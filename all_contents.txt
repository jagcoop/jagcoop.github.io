     <meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/slate.css?">

                        **Slate Template**
                           Version 1.23


This template is good for "dark mode" documentation. It automatically
switches to black-on-white and an inline table of contents when
printed.


Initialization
==============================================================

Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis
voluptatibus maiores alias consequatur aut perferendis doloribus
asperiores repellat.

Asset Based
--------------------------------------------------------------

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur.

 Maine | Iowa | Colorado
-------|------|----------
   1   |  4   |   10
  ME   |  IA  |   CO
 Blue  | Red  | Brown
[Table [states]: Caption with label.]


### Exporters

Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum:

- Incididunt
- Bonus Unum
- Quibusdam

```````````````````````````````````````````````
count_lines () {
  local f=$1
  local m
  m=`wc -l $f | sed 's/^\([0-9]*\).*$/\1/'`
  return $m
}
```````````````````````````````````````````````


Procedural
--------------------------------------------------------------

At vero eos et accusamus et iusto odio dignissimos ducimus qui
blanditiis praesentium voluptatum deleniti atque corrupti quos dolores
et quas molestias excepturi sint occaecati cupiditate non provident,
similique sunt in culpa qui officia deserunt mollitia animi, id est
laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita
distinctio.

**************************************************************
*
* .---.       .-.        .-.       .-.
* | A +----->| 1 +<---->| 2 |<----+ 4 +------------------.
* '---'       '-'        '+'       '-'                    |
*                         |         ^                     |
*                         v         |                     v
*                        .-.      .-+-.        .-.      .-+-.
*                       | 3 +---->| B |<----->| 5 +---->| C |
*                        '-'      '---'        '-'      '---'
**************************************************************

Nam libero tempore, cum `soluta` nobis est eligendi optio
cumque nihil impedit quo minus id quod maxime placeat facere possimus,
omnis voluptas assumenda est, omnis dolor repellendus. Temporibus
autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe
eveniet ut et voluptates repudiandae sint et molestiae non
recusandae.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a long preformatted code block a long preformatted code block a long preformatted code block a long preformatted code block a long preformatted code block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Modules
==============================================================

Nam libero tempore, cum soluta nobis est eligendi optio
cumque nihil impedit quo minus id quod maxime placeat facere possimus,
omnis voluptas assumenda est, omnis dolor repellendus.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ rust
fn main() {
    let x = 5u32;

    let y = {
        let x_squared = x * x;
        let x_cube = x_squared * x;

        // This expression will be assigned to `y`
        x_cube + x_squared + x
    };

    let z = {
        // The semicolon suppresses this expression and `()` is assigned to `z`
        2 * x;
    };

    println!("x is {:?}", x);
    println!("y is {:?}", y);
    println!("z is {:?}", z);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<!--
![`a long code caption a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg)
![`a long code caption a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg)
-->

See Also
==============================================================

[Link to nowhere](nowhere).



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/newsmag.css?">

    <meta name="author" content="Your Name">
    <meta name="description" content="newsmag description"
    <meta name="keywords" content="keyword1, keyword2, keyword3, keyword4, keyword5">

    <!-- Other common meta tags you might want to include -->
    <meta name="robots" content="index, follow">
    <meta name="language" content="English">

    <!-- Open Graph meta tags for better social media sharing -->
    <meta property="og:title" content="Your Page Title">
    <meta property="og:description" content="A brief description for social media sharing">
    <meta property="og:image" content="https://example.com/image.jpg">
    <meta property="og:url" content="https://example.com/page-url">

	<script src="https://morgan3d.github.io/include.js/include.min.js"></script>


                          **Jag.is**
	Cooperative Innovation Studio specialized in software development, devops and project management.
	We are on this for the long term with our members, our software and our customers.

We are a software development and Innovation Studio.
Specialized in high quality, long term maintenance of software products.


An independent research lab exploring the future of tools for thought.
================================================================

We envision a new computer that amplifies human intelligence. A system
that helps you think more clearly, collaborate more effectively, and is
available anywhere and anytime. Though the specifics of our work
continue to evolve, everything we do is in pursuit of this vision.

Research Tracks
---------------------------------------------------------------

Our research spans a wide variety of domains from theoretical computer
science to practical user experiences. We currently have three primary
research themes.

### Malleable Software

Designing software environments where people can customize tools in the
moment to meet their unique needs.

### Programmable Ink

Discovering a dynamic medium for sketching ideas where adding behaviors
and interaction is as natural as applying ink to paper.

### [Local-First](/local-first)

Exploring software architecture that returns data to users and enables
collaboration in every tool.


Our Writing
==============================================================

This are the innovations that have been ocupaying our minds lately

<ul>
  <li>[./projects](././projects/) 
      <ul>
  	  <li>[./projects/yaml_resume_db](././projects/yaml_resume_db/) 
  	      <ul>
  	  	  <li>[./projects/yaml_resume_db/test](././projects/yaml_resume_db/test/) 
  	  	  </li>
  	  	</ul>
  	  </li>
  	</ul>
      <ul>
  	  <li>[./projects/rewards.codes](././projects/rewards.codes/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./projects/AOP_in_Eiffel](././projects/AOP_in_Eiffel/) 
  	  </li>
  	</ul>
  </li>
  <li>[./posts](././posts/) 
      <ul>
  	  <li>[./posts/xilenial_discovers_perseverance](././posts/xilenial_discovers_perseverance/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/tdd_cloud_wilkinson_vs_meyer](././posts/tdd_cloud_wilkinson_vs_meyer/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/sonic_pi](././posts/sonic_pi/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/observational_learning](././posts/observational_learning/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/music_and_technology](././posts/music_and_technology/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/ideas](././posts/ideas/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/how_to_define_a_problem](././posts/how_to_define_a_problem/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/haskell_musical_paradigm](././posts/haskell_musical_paradigm/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/faust_a_musical_dsl](././posts/faust_a_musical_dsl/) 
  	      <ul>
  	  	  <li>[./posts/faust_a_musical_dsl/a_dozen_problems](././posts/faust_a_musical_dsl/a_dozen_problems/) 
  	  	  </li>
  	  	</ul>
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/executable_tutorials_literate_programming](././posts/executable_tutorials_literate_programming/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/different_perspectives_for_the_same_information](././posts/different_perspectives_for_the_same_information/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/argentina_coops](././posts/argentina_coops/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/a_dozen_problems](././posts/a_dozen_problems/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/You_Need_To_Write_Here_is_Why](././posts/You_Need_To_Write_Here_is_Why/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/What_a_mechanic_understans_about_free_software](././posts/What_a_mechanic_understans_about_free_software/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Videogames_The_new_frontier_in_English_learning](././posts/Videogames_The_new_frontier_in_English_learning/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Using_Elixir_Flow_To_Process_Data](././posts/Using_Elixir_Flow_To_Process_Data/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Unlocking_the_Power_of_Personal_Cloud](././posts/Unlocking_the_Power_of_Personal_Cloud/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Understanding_complexity_in_software_systems](././posts/Understanding_complexity_in_software_systems/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Track_your_day](././posts/Track_your_day/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Top_10_Questions_for_a_Job_Interview](././posts/Top_10_Questions_for_a_Job_Interview/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/The_Zettelkasten_Note_Taking_Method](././posts/The_Zettelkasten_Note_Taking_Method/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD](././posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding](././posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/The_Rise_and_Fall_of_Abacus_Rationale](././posts/The_Rise_and_Fall_of_Abacus_Rationale/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/The_Photovoltaics_Dilemma](././posts/The_Photovoltaics_Dilemma/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/The_Future_of_Money](././posts/The_Future_of_Money/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Terravision_vs_Google_Earth](././posts/Terravision_vs_Google_Earth/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Teaching_Academic_Writing_with_the_Macro-Tulmin](././posts/Teaching_Academic_Writing_with_the_Macro-Tulmin/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/TRIZ_applied_to_an_Acacemic_Problem](././posts/TRIZ_applied_to_an_Acacemic_Problem/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw](././posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Single_text_file](././posts/Single_text_file/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Simple_example_of_liveview1_phx](././posts/Simple_example_of_liveview1_phx/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Requirements_in_the_Age_of_AI](././posts/Requirements_in_the_Age_of_AI/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Real_Life_Movies_as_a_Teaching_Method](././posts/Real_Life_Movies_as_a_Teaching_Method/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Re-Discovering_My_PhD_Challenge_for_the_Semester](././posts/Re-Discovering_My_PhD_Challenge_for_the_Semester/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Psychological_Safety](././posts/Psychological_Safety/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Prompt_Engineering_Basics](././posts/Prompt_Engineering_Basics/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Product_Management_and_AI](././posts/Product_Management_and_AI/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner](././posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/PMI_vs_Flight_Levels_Less_is_More](././posts/PMI_vs_Flight_Levels_Less_is_More/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Our_New_Approach_for_Developing_Products](././posts/Our_New_Approach_for_Developing_Products/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/One_more_year](././posts/One_more_year/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Navigating_GHC_compilation_errors_in_Emacs](././posts/Navigating_GHC_compilation_errors_in_Emacs/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud](././posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Moving_to_DeepSeek](././posts/Moving_to_DeepSeek/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/More_About_Zettelkaster](././posts/More_About_Zettelkaster/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development](././posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Manage_complexity_behind_simple_interfaces](././posts/Manage_complexity_behind_simple_interfaces/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Karina_La_Humana](././posts/Karina_La_Humana/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Kanban_Serious_Games_Intro](././posts/Kanban_Serious_Games_Intro/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Kanban_Case_Study_in_Public_Sector_Part_I](././posts/Kanban_Case_Study_in_Public_Sector_Part_I/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Intellectual_Property_Analysis_The_Founder_Movie](././posts/Intellectual_Property_Analysis_The_Founder_Movie/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Innovation_on_Water_Management_from_The](././posts/Innovation_on_Water_Management_from_The/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Innovation_Methods_Comparison](././posts/Innovation_Methods_Comparison/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Ikigai_to_Evaluate_Education_Ideas](././posts/Ikigai_to_Evaluate_Education_Ideas/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/How_to_Learn_any_Topic](././posts/How_to_Learn_any_Topic/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/How_to_Do_a_Dirty_and_Quick_Review](././posts/How_to_Do_a_Dirty_and_Quick_Review/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/How_To_Choose_a_Book](././posts/How_To_Choose_a_Book/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Home_Manager_strategies_for_symlink_management](././posts/Home_Manager_strategies_for_symlink_management/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Going_Agile_The_Agile_Way](././posts/Going_Agile_The_Agile_Way/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Frustration_in_the_face_of_improvement](././posts/Frustration_in_the_face_of_improvement/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Extending_the_Power_of_your_Personal_Cloud](././posts/Extending_the_Power_of_your_Personal_Cloud/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones](././posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion](././posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Did_You_Read_This_Book](././posts/Did_You_Read_This_Book/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines](././posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Declarative_dotfiles_with_Home_Manager](././posts/Declarative_dotfiles_with_Home_Manager/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Creating_a_QR_for_Google_review_URL](././posts/Creating_a_QR_for_Google_review_URL/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Create_Abundance_With_Software](././posts/Create_Abundance_With_Software/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Continuous_Integration_CI_Garnix](././posts/Continuous_Integration_CI_Garnix/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise](././posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Another_post_on_Crypto_Assets](././posts/Another_post_on_Crypto_Assets/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/A_premier_on_Prometheus_relabelling](././posts/A_premier_on_Prometheus_relabelling/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/A_Tool_in_a_World_Full_of_Distractions](././posts/A_Tool_in_a_World_Full_of_Distractions/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions](././posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience](././posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience/) 
  	  </li>
  	</ul>
  </li>
  <li>[./drafts](././drafts/) 
  </li>
  <li>[./about](././about/) 
  </li>
</ul>
--------------------------------------------------

#### Connect with us

Say [hello@jag.is](mailto://hello@jag.is)

Code on [Github](https://github.com/jagcoop)

#### Our news letter

Keep up-to-date with the lab's latest findings, appearances, and
happenings by subscribing to our newsletter. For a sneak peek, [browse
the archive](/newsletter).


<ul>
    <li><a href="/">index</a></li>
		<li>[./projects](/./projects/index.html)</li>
		<li>[./posts](/./posts/index.html)</li>
		<li>[./drafts](/./drafts/index.html)</li>
		<li>[./about](/./about/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>



Email

--------------------------------------------------


CC-By-Sa-NC JagIs

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'medium'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<ul>
    <li><a href="/">index</a></li>
		<li>[./projects](/./projects/index.html)</li>
		<li>[./posts](/./posts/index.html)</li>
		<li>[./drafts](/./drafts/index.html)</li>
		<li>[./about](/./about/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# A better approach to finding research problems for experienced professionals
By Alejandro García, and Pepe Hernandez. January 17th, 2025

When discussing research, particularly in the context of Mexico, a prevailing mindset is that the starting point must be identifying a gap in the literature. A recent trend named bibliometric analysis is an example of this mindset. However, this approach doesn't always align with practical, impactful research. This kind of applied research is conducted in developed countries. Here's a fresh perspective on tackling useful and impactful research problems, inspired by a recent discussion between Alex, Jani, and me last weekend.

## A Different Starting Point for Research
The process often starts with a personal or industry problem in countries where research drives practical innovation. The mindset shifts from merely filling a gap in academic literature to addressing real-world challenges. Here's how this alternative process unfolds:

### Step 1. Identify the Problem:
This approach comes from someone with experience in a practical field. For example:
- An engineer might ask, "How do I build a solution to this problem I know, I saw, I already have, or as an organization I discovered?"
- Meanwhile, a scientist with no practical experience could inquire, "What has been done written before about this area of interest? and what are the existing challenges?"

### Step 2. Explore the Landscape:
The following steps involve framing the problem within the existing body of knowledge. Depending on the findings, researchers can proceed in several ways:

- **The problem has already been solved and documented**: Great! You've found your answer. Document your application as a case study to enrich the literature.
- **The solution exists in another field**: Adapt and apply it to your domain. Then, write about your experience of cross-domain implementation.
- **You have a new solution**: Develop your innovation and contribute to the knowledge pool with your unique approach.
- **The problem is recognized, but no solution exists**: This is a major opportunity. Put on your engineering hat and create a solution, even if it's a first iteration.
- **The problem isn't recognized in the literature**: This requires a deeper look. You've uncovered a novel issue (potential innovation!) or need to refine your search terms to verify its uniqueness.

## The new trendy academic approach to finding a Problem: the Bibliometric Analysis
Another emerging method to look for impactful research topics is bibliometric analysis. This approach uses statistical and mathematical techniques to analyze scientific literature, uncover trends, and define potential lines of inquiry. Key indicators include:

- Publications per year
- Most-cited works
- Author productivity
- Gender or language trends in authorship

Using this method, researchers can pivot from broad trends to pinpoint specific problems worth addressing, especially for students or those without extensive industry experience.

## The Bigger Picture: Useful Research Drives Innovation
These insights emphasize a critical point: impactful research often emerges from practical problems, not abstract gaps in the literature. This shift in mindset aligns research more closely with real-world applications, making it more relevant and valuable.

## A refinement of the approach in BPM format.
Alex designs a diagram that starts with identifying and putting them in the proper context.

![process to find a reseach project (click to open)](bpmn_research_problem.svg)

I am adding the link to edit the diagram directly in [Sketchminer](https://www.bpmn-sketch-miner.ai/#EYBwNgdgXAbgjAKALRIQSQCYFMCGAXASwHtoEARIgAgE8iBXSgCxxi0p0oAUAnI4MLAFsA-AmpYAzggDCOCDXqUsADxDdJEygTztNHAFQBjEnm44MBQ4RL7R4qQAoJWCBkoBNRc1btK6nGBcvPxCAJQI6Nj4xKQUCgzebBw8fAIiCBBECACqzpT6AEIE-MSCWKaWlACCEAHUEgQS+pR4VABmBK6+aqlCWvJg2lhmeHTqAHQycvFKquoSmtq6vkYmZhZWMbYRmLjWpOOHU-K0DCpqGlo6OHr5xhCm5pb72wByWQAqjC4zGCQA5DpEr4UiFBAhPAkWGwJNRBCBWuDcmwAOJEMAYEZ4f6aaRjdQPSgAJVwgzw1EoH3UbCI3EpRLQAC12LUwPVGi12p03HhvpRpGsnpsSMcZud5otrrdVg91s8tqJDpMIq8VHgoJQEA51IYsAQfJCmNDfP5AqC0uEquoZtMAKIQADmnSww0otMoAGVDAQXIQJHhRF6fQ9GngEAB1ZhAm6UYAu+R-CBsONtWlsTotRgcnpg0RxAAyQxGYzYJJgPoA7ghnF0SU9HRFC3hhvgS8SsOWsBWoAgdXqfHWLA2PbhuIZGP1KGiiA6BJ7x+icNwADSeoRyQiGeeMRcr9jcZT61flQyTAASMd52eCaVj8coEnRrDcKbTdkk6BO9Dp3Lo-u41DvlI4baBOHAOkQRBuI+YB0PsQFajWbg4CA4CWNEJBum0D7onBMThAgSoRqBvgQVBOGwfBCDvDI-jNr4SYVhReEilUqFslcMhEPCS7pjorSZmwFzlvQmgwSx8gOAULjjoIS4ANbhE4LhuJ0rAhj44n7ARhFHGgX5jP0GB-qYgHUVkVQYChOhLHIyHsRSSwCacP6uCZAGISplAVtwQzsMA9DXFZCIYRAoSahEREXpoV6aDmt5xj8MHPneqbqKINH6ewYCBEQ2G8mwZ6hrSFJ5ZQZ50HJEDaBSpz7mwBWUB03D+pQIDDI+8gCcCsVtTeQgIYavFKJ0-p6hACBUhScjUFejqZvgD6bvJmgOIY1BJh08iCFBWBgDp4a+YQjo9tqWC6vq6YQOphCabh2kID5fk4AFcHxK5N2Xcx+xan2X1PfRL2BewwV4KF4SHc9r06C5lD3P+dDCvIZWNVpMS-ed-ZJOx6H7Fh334RGR1JND72zO1vkydj4DUJ0DqCQTmECY18VCETUPA7DVlg+zgOk7DcYQLJCmUGt3EgEujQxJyboFXSaMkBIEPE-5wMVlGMwVvQGKUH8usEG0bTDL6osCAsiuUAIS5Jhgysc296uLXVWt0DretJso-FUNgrBgEQIAMwr21pqLbRwW2WvcIpETUWqGq6ZMVpsHVdqOs6rrukGvqhqI9pOkmwwIBePh1clWDQQQggEGAS59b0gipW+YgfsAdDVzyfJByqcealFxql0+5cPpX1e16zDevulGRZP6S5e34uAYNWXmDnTCBAA)

If you want to know more about sketchminer, check my latest blog post about it: https://jagcoop.github.io/posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner/

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# A Real Challenge as DevOps: Navigating Key Hurdles and Solutions

October 31th, 2024
by *Leonel Perea*

## Introduction

In today’s fast-paced software industry, DevOps teams are expected to deliver rapid, reliable, and secure deployments. However, the journey to optimized DevOps practices is laden with challenges. This article explores major obstacles commonly faced by DevOps professionals and presents solutions backed by industry insights from recent DevOps blogs.

## Key Challenges in DevOps

### Integrating Security from the Start (DevSecOps)

Security is increasingly recognized as a key DevOps responsibility. Integrating security measures directly into the development lifecycle—DevSecOps—ensures early vulnerability detection and reduces risks post-deployment. Blogs from AWS DevOps and Google Cloud highlight how security automation and integrated testing can secure code without disrupting the pipeline.

- **Challenge**: Many organizations struggle with integrating security checks without slowing down the CI/CD cycle.
- **Solution**: DevSecOps practices emphasize automated vulnerability scanning in code repositories and container images, ensuring that security remains an intrinsic, unobtrusive part of the pipeline.

### Managing Multi-Cloud and Hybrid Environments

Operating across multiple cloud platforms adds complexity to configuration management, orchestration, and monitoring. According to Azure DevOps blogs, having the right tools and workflows for these environments can streamline processes while maintaining visibility across platforms.

- **Challenge**: Each cloud provider has unique configurations and APIs, creating fragmented workflows.
- **Solution**: Using centralized tools for cross-platform management, such as HashiCorp’s Terraform for infrastructure as code, provides a consistent approach to managing resources across clouds.

### Automating and Streamlining CI/CD Pipelines

The demand for automated CI/CD pipelines is rising as organizations seek faster delivery cycles with minimal errors. GitHub’s DevOps blog emphasizes the need for automation tools and pipeline optimization to manage deployments at scale.

- **Challenge**: Achieving fully automated pipelines that support the pace of rapid deployments and rollback strategies without manual intervention.
- **Solution**: Implementing best-in-class CI/CD tools, like Jenkins or GitHub Actions, allows for scalable, automated testing and deployments. Additionally, using containerized environments with Docker or Kubernetes enables more consistent pipeline execution.

### Enhancing Observability and Monitoring

Observability is crucial for maintaining high availability in complex, distributed systems. Stack Overflow’s blog identifies observability as foundational for DevOps teams to quickly detect and address issues in production environments.

- **Challenge**: Ensuring comprehensive visibility across microservices, containers, and cloud services.
- **Solution**: Leveraging observability tools like Prometheus and Grafana, which integrate with Kubernetes, enables real-time monitoring. Additionally, implementing log aggregation and correlation tools aids in root-cause analysis.

### Infrastructure as Code (IaC) for Consistency

IaC simplifies infrastructure provisioning, making deployments repeatable and consistent. According to DevOpsCube, IaC tools like Terraform and Ansible support automated infrastructure scaling and help prevent configuration drift.

- **Challenge**: Balancing speed with accurate configuration in highly dynamic environments.
- **Solution**: Creating modular IaC code allows reusable components for infrastructure, improving consistency across environments. Regular testing of infrastructure scripts ensures reliability in deployment.

### Building a Collaborative DevOps Culture

Successful DevOps requires a cultural shift that promotes transparency, accountability, and cross-functional collaboration. Atlassian’s DevOps blog highlights how open communication and shared responsibilities can significantly enhance DevOps practices.

- **Challenge**: Breaking down silos between development, operations, and security teams.
- **Solution**: Introducing collaborative tools like Slack or Jira for real-time communication, and regular retrospectives to foster a continuous improvement mindset across teams.

## Conclusion

Overcoming the complexities of DevOps involves mastering a range of tools and practices while promoting a collaborative culture. By addressing these common challenges—DevSecOps integration, multi-cloud management, CI/CD automation, observability, IaC, and culture-building—DevOps teams can enhance efficiency, security, and scalability. As DevOps continues to evolve, staying informed on best practices and emerging tools is crucial for maintaining a resilient and responsive DevOps framework.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# A Tool in a World Full of Distractions
September 21th, 2024
by *Karina Chaires*

In today's distraction-filled environment, having effective tools at our disposal is essential for maintaining focus and productivity.

A few months ago, I realized that I was struggling to concentrate and finish simple tasks that took me longer than they should have, even though they weren't "complicated." I was also distracted by things around me, like simply unlocking my phone to do a bank transaction or something else I deemed "important", and suddenly, 15 minutes or more would pass without me accomplishing anything. In the worst cases, I would forget what I intended to do.

In search of a solution to this "problem" I came across the recommendation for the book **"Deep Work: Rules for Focused Success in a Distracted World"** by Cal Newport. This book emphasizes the importance of deep work — the ability to focus without distraction on cognitively demanding tasks. Newport argues that in a world full of distractions, cultivating deep work is essential for achieving high levels of productivity and professional success.

The book is divided into two main parts: the concept of deep work and strategies to cultivate it.

## The concept of DeepWork

In the first part, Newport defines deep work as a state of concentration that enables individuals to produce high-quality work and develop valuable skills. He contrasts this with shallow work, which consists of non-cognitively demanding tasks often performed while distracted. Newport suggests that the ability to engage in deep work is becoming increasingly rare yet is highly valuable in today's economy, where knowledge work is key.

## Strategies to cultivate it.

Newport supports his arguments with examples from successful individuals who practice deep work, including authors, scientists, and entrepreneurs. He illustrates how their focus and commitment to deep work have led to significant contributions and achievements.

The second part of the book offers practical strategies for cultivating deep work in daily life. Newport outlines four essential rules:

1. **Work Deeply**: He stresses the importance of rituals and routines to enhance focus, suggesting techniques such as time blocking, setting clear goals, and removing distractions. Newport advocates for creating an environment that supports deep work.

2. **Embrace Boredom**: Newport argues that one must learn to accept boredom and resist the temptation to switch to shallow tasks. He encourages practicing concentration and developing the ability to focus over time, which involves training the mind to remain engaged with challenging tasks.

3. **Quit Social Media**: Newport critically examines the role of social media and other distractions, recommending that individuals assess the tools they use and eliminate those that do not provide significant benefits to their professional and personal lives.

4. **Drain the Shallows**: He advises minimizing the time spent on shallow work by scheduling every minute of the day. This practice helps prioritize deep work and ensures that time is not wasted on low-value activities.

## In my personal experience

For me, the first strategy has been helpful, and I've implemented it by keeping my phone away for certain periods. I'm trying to create a schedule for each activity throughout the day, although I haven't fully succeeded yet. I will continue to improve my concentration practices because, ultimately, **"Deep Work"** serves as both a manifesto for focused success and a practical guide for cultivating concentration in a world full of distractions. Newport's insights resonate with anyone seeking to enhance productivity, achieve professional goals, and develop valuable skills in an era dominated by superficial engagement.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# A premier on Prometheus rellabelling

October 5th, 2024
by *Julio César*

# Introduction

Nowadays Prometheus is one of the most used solutions for monitoring services. After having Prometheus installed we&rsquo;re able to configure &ldquo;targets&rdquo; that Prometheus should monitor, really what we do is to register a collection of metrics endpoints, variations of the form &ldquo;http(s)://my.other.service:9999/metrics&rdquo; these endpoints are served by the actual services to be monitored.

Such &ldquo;targets&rdquo; should be configured within the Prometheus configuration, something like this:

```yaml
scrape_configs:
  - job_name: my_service
    static_configs:
      - targets: ["my.service.com:9999"]
```

This means once that Prometheus is running we need to reload it in order to add new targets, that&rsquo;s a shame. However, in order to solve this Prometheus has basic service discovery mechanism that will allow it to dynamically discover new targets. One of the most useful ones is \`ec2<sub>sd</sub><sub>configs</sub>\` which allow us to register AWS EC2 instances as Prometheus targets, this is an example on how to use it:

```yaml
- job_name: my_service
  ec2_sd_configs:
    - region: "us-east-1"
      port: 9999
      filters:
          - name: "tag:service"
            values: ["my_service"]
```

This basically tells Prometheus to query the AWS API and add all instances tagged as `service=my_service`. But this is not enough configuration, if we were to configure alerts based on this service&rsquo;s metrics we wouldn&rsquo;t know which instance went rogue other than `"my_service"`, if we run only a single service this is enough but what if we manage hundreds of instances? We need to define labels that allow us to identify what instance serves the faulty service.


# Prometheus relabelling

To define prometheus labels we use the `relabel_configs` stanza in the prometheus target configuration, see:

```yaml
- job_name: my_service
  ec2_sd_configs:
    - region: "us-east-1"
      port: 9999
      filters:
          - name: "tag:service"
            values: ["my_service"]
  relabel_configs:
    - source_labels: ["__meta_ec2_tag_service"]
      target_label: service
    - source_labels: ["__meta_ec2_tag_instance"]
      target_label: instance
    - source_labels: ["__meta_ec2_tag_environment"]
      target_label: environment
    - source_labels: ["__meta_ec2_tag_datacenter"]
      target_label: datacenter
```

`relabel_configs` is a half-baked DSL on top of Yaml to define rules about what labels to add to the metrics, yes, a **DSL on top of Yaml**, and not even that!. Understandably reading Prometheus relabelling rules is almost like reading Brainfuck programs, let&rsquo;s explain.

Each discovery mechanism like `ec2_sd_configs` exposes labels on each target discovered, in this case we&rsquo;ve available AWS related labels like `__meta_ec2_ami` of the AWS EC2 AMI, `__meta_ec2_private_ip` for the instance&rsquo;s private IP, `__meta_ec2_region` for the AWS region, and many more (see [here](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#ec2_sd_config)). The most useful ones are the ones that expose labels that we set on the AWS EC2 instance, in this example the AWS instance is tagged with `service`, `instance`, `environment`, and `datacenter`. We could imagine an instance with the following values:

-   `instance: "sales-1a"`
-   `service: "invoicing"`
-   `environment: "production"`
-   `datacenter: "primary"`

Therefore by using `ec2_sd_configs` we would also have the following labels around:

-   `__meta_ec2_tag_service`
-   `__meta_ec2_tag_instance`
-   `__meta_ec2_tag_environment`
-   `__meta_ec2_tag_datacenter`

Now, `relabel_configs` lists relabelling rules that Prometheus processes in turn, the anatomy of a basic relabelling rule is as demostrated above:

```yaml
    - source_labels: ["__meta_ec2_tag_service"]
      target_label: service
```

It basically means *&ldquo;define a new label for the metrics on this target named `service` and set the value of whatever value is in the existing label `__meta_ec2_tag_service`&rdquo;*; why would we want to do this? turns out Prometheus will remove all labels from our metrics that begin with double underscore (`__`), the reason for this is because metrics may be indexed by labels downstream and having too many labels could cause excessive storage issues. This is the way of Prometheus saying to us *&ldquo;create your labels or I will set none&rdquo;*, so that&rsquo;s why we can&rsquo;t know the failing instance if we don&rsquo;t have labels for it.

> To be fair, Prometheus does always set a `job` label, the value will be whatever we put in the `job_name` property on the target, so by default, at least we know something, but not enough IMHO.

So now we now what this means:

```yaml
  relabel_configs:
    - source_labels: ["__meta_ec2_tag_service"]
      target_label: service
    - source_labels: ["__meta_ec2_tag_instance"]
      target_label: instance
    - source_labels: ["__meta_ec2_tag_environment"]
      target_label: environment
    - source_labels: ["__meta_ec2_tag_datacenter"]
      target_label: datacenter
```

Create a label and use the value of the original soon to be removed label. This will precisely give us the same labeling scheme we have on the AWS EC2 instance itself, e.g.:

-   `instance: "sales-1a"`
-   `service: "invoicing"`
-   `environment: "production"`
-   `datacenter: "primary"`

Now, why am I writing this post? after all this can be understood from the documentation and other resources online. Let me put it bluntly, 1) I have to write about something to avoid being charged (shout-out to [beeminder.com](https://www.beeminder.com/)) and 2) I needed to set a new `host` label that would be a composite of other labels, and I did not find a clear explanation on how to do that; check this out:

```yaml
    - source_labels: ["__meta_ec2_tag_instance", "__meta_ec2_tag_environment", "__meta_ec2_tag_datacenter"]
      regex: "(.*);(.*);(.*)"
      replacement: "$1.$2.$3.example.com"
      target_label: host
```

A bit cryptic no? but it&rsquo;s all *&ldquo;very intuitive&rdquo;* (?), we list the labels in the order we want to &ldquo;manipulate&rdquo; them within a regex, by default they are concatenated with a semi-colon (`;`) as a separator (we&rsquo;re able to use our own if we include `separator: ","` but I don&rsquo;t do that here), within the `regex` field we capture each of the label values (in the same order as they&rsquo;re listed), and instruct to do a `replacement` on the value of the label by using the regex capture groups, finally we instruct to save that value in the `host` target label. After all is said and done we end-up with a label formatted as:

-   `host: "sales-1a.production.primary.example.com"`

Ah! ready to copy-and-paste when SSH-ing to it in the heat of the moment.


# Handling authentication to AWS

To the trained eye there&rsquo;s a missing piece, how is Prometheus able to query AWS API to get our targets in the first place? After all we need to authenticate to correctly identify our instances or else we get denied errors.

This might be it&rsquo;s own post but since words count the same I&rsquo;ll do it here. The gist of it is that when provisioning the EC2 instance we&rsquo;re able to set an AWS role to be used as the &ldquo;instance profile&rdquo; for it. EC2 instances in AWS are able to query AWS API without issue, **if** the profile we set for the instance has permissions to do so.

> Some of this happens behind the scenes and this explains why AWS takes some IPs out of the subnet IP range, because it uses them among other things to set an internal DNS resolver which allows them to know when resources withing the subnet need to talk to other services, plus enforcing security group rules and all that.

As an example this is how we tie the key pieces together using Terraform:

```hcl
# This defines the actual EC2 instance
# there are many supported attributes but we use a few to keep this minimal
resource "aws_instance" "example_instance" {
  ami           = "ami-0c55b159cbfafe1f0" # Just as an example
  instance_type = "t2.micro"

  # This is the key
  # We assign an AWS role as the instance profile on the EC2 box
  iam_instance_profile = aws_iam_instance_profile.prometheus.name

  # For good measure this is how we tag an instance
  tags = {
    instance = "sales-1a"
    service = "invoicing"
    environment = "production"
    datacenter = "primary"
  }
}

# The instance profile is a resource in and of itself that needs to be provisioned
# since many EC2 instance may use the same instance profile
resource "aws_iam_instance_profile" "prometheus" {
  name = "PrometheusInstanceProfile"

  # An instance profile is linked to an AWS role
  role = aws_iam_role.prometheus_scrapping_role.name
}

# An AWS Role is like a "hat" a service or user can use to acquire temporary permissions
# Here we create a "PrometheusScrappingRole" so that the instance that "wears this hat"
# is able to do whatever permissions are set in any policy linked to this role.
resource "aws_iam_role" "prometheus_scrapping_role" {
  name = "PrometheusScrappingRole"

  # This is an almost mandatory permission on almost every role
  # it gives the permission to the role be assumed by someone (or something)
  # in this case this is a "hat" only available to EC2 instances.
  # No other service or user is allowed to "grab this hat" (assume this role).
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# An AWS Role is nothing in and of itself, it actually needs some policies
# associated with it to be useful.
# Here we link the role (bound to `prometheus_scrapping_role`) to
# a `prometheus_scrapping` policy we define next.
resource "aws_iam_role_policy_attachment" "attachment_prometheus_role_policy" {
  role       = aws_iam_role.prometheus_scrapping_role.name
  policy_arn = aws_iam_policy.prometheus_scrapping.arn
}

# This is the AWS Policy that we link to the Role we created above.
# A Policy defines permissions, in this case the policy allows
# to describe all EC2 instances to whomever gets this policy assigned.
resource "aws_iam_policy" "prometheus_scrapping" {
  name        = "PrometheusScrapping"
  description = "Policy to allow Prometheus describe EC2 instances."

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = "ec2:DescribeInstances"
        Resource = "*"
      }
    ]
  })
}
```

After having this setup any process running within the EC2 instance (including Prometheus itself) will be able to query the AWS EC2 instances in our AWS account, making the `ec2_sd_configs` discovery mechanism work. One way to test this is to login into the instance and querying the instances using the AWS SDK:

```bash
aws ec2 --region us-east-1 describe-instances
```

> The AWS SDK is not installed by default on EC2 instances, you have to install it yourself, Nix is a great way to do so BTW&#x2026; [I use NixOS BTW](https://knowyourmeme.com/memes/btw-i-use-arch)&#x2026;

Using EC2 instance profiles is way better than to ship the AWS credentials within your applications, in this case while prometheus can be configured to use a pair of AWS credentials it is strongly advised to not do so.


# Leveraging tags

We can even go a bit further, we could assign a tag to all EC2 instances we wish to monitor with Prometheus, or perhaps we only care about instances running `production` and we wish to leave other environments such as `uat` or `dev` outside of prometheus.

Let&rsquo;s do both, suppose we work along with dinosaurs and also use Nagios for monitoring, we&rsquo;re slowly migrating away before catching a meteorite. In the meantime wish to allow Prometheus to see only instances to be monitored by Prometheus itself.

For the sake of the example, we tag the monitoring system on the instance itself:

```hcl
  # ...

  tags = {
    monitoring = "prometheus" # or "nagios" if you still dig it... it's just an example!
    # ...
  }

  # ...
```

Now, following the principle of least privilege, we could change the policy we assign to the prometheus AWS role so that it is only able to describe the instances we&rsquo;re going to monitor with it:

```hcl
  # ...

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = "ec2:DescribeInstances"
        Resource = "*"

        # We use a condition on the policy so that only instances
        # with the `monitoring="prometheus"` tag are "describable".
        Condition = {
          StringEquals = {
            "aws:ResourceTag/monitoring" = "prometheus"
          }
        }
      }
    ]
  })

  # ...
```

After this change the Prometheus instance will only be able to see instances with the `monitoring` tag set to `"prometheus"`.

Now, back in the `prometheus.yml` configuration file, we can further filter the targets we wish to add:

```yaml
- job_name: my_service
  ec2_sd_configs:
    - region: "us-east-1"
      port: 9999
      # Of all described EC2 instances we only care to add the ones tagged with `environment="production"`.
      filters:
          - name: "tag:environment"
            values: ["production"]

    # As a bonus, suppose the metrics endpoint exposed by the service isn't the standard "/metrics"
    # we can set it this way:
    metrics_path: "/v1/agent/metrics"

    # We can specify query string parameters in the metrics endpoint URL
    # Fox example if the service's metrics endpoint supports distinct formats
    # (perhaps the cretaceous nagios agent format) we can append `?format=prometheus`:
    params:
      format: ["prometheus"]

  relabel_configs:
    - source_labels: ["__meta_ec2_tag_service"]
      target_label: service
    - source_labels: ["__meta_ec2_tag_instance"]
      target_label: instance
    - source_labels: ["__meta_ec2_tag_environment"]
      target_label: environment
    - source_labels: ["__meta_ec2_tag_datacenter"]
      target_label: datacenter
    - source_labels: ["__meta_ec2_tag_instance", "__meta_ec2_tag_environment", "__meta_ec2_tag_datacenter"]
      regex: "(.*);(.*);(.*)"
      replacement: "$1.$2.$3.example.com"
      target_label: host
```


# Debugging Prometheus relabelling rules

Whenever we work with prometheus labelling rules we almost always feel like being in the dark, there&rsquo;s no visibility of that is happening whatsoever, you may have to run and restart prometheus often till you get it right.

But fear no more! There&rsquo;s an official online-tool that allow us to evaluate our rules on the fly till we get them right: <https://relabeler.promlabs.com/>.

In there, you write your rules in the &ldquo;Rellabelling rules&rdquo; text area, and write some mock values for the source labels in the &ldquo;Object labels&rdquo; text area. At any point you can click &ldquo;Analyze Rules&rdquo; to see what Prometheus will actually relabel to by following your rules. Pretty handy!


# Conclusion

In this post we learned how to configure AWS EC2 instances as Prometheus targets so that we&rsquo;re able to read metrics for all our services, we learned how to leverage tags to control the exact instances to scrape, and also how to write Prometheus labeling rules to merge multiple labels into one single label.

We also saw how to define an EC2 instance, and the associated AWS instance profile, roles and policies to make this all work within Terraform.

I could keep rambling about the this stuff, after all every word counts, I could write and write about the myriads adventures I saw on a movie or elsewhere, the point is to fill in some text to please beeminder.com. But I&rsquo;ll remain sensible and stop here.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
# Another post on crypto assets
November 30th, 2024
by *Agus Rumayor*

This week, two friends approached me with the same question: Should I buy Bitcoin or any other crypto asset? My answer remains consistent: I never recommend buying something that creates artificial scarcity and isn't fundamentally being used to democratize finance. While crypto has the potential to revolutionize the system, the harsh reality is that much of it is driven by speculation rather than utility.

So, what does this mean for you as a potential investor or curious bystander? For me, it signals a perfect time to take some profits off the table. When I see the same kind of growth others are chasing, I often sell 10 to 15 percent of my portfolio. It's my way of locking in gains and reducing exposure to volatility.

But what if you're starting from scratch? You could take the opposite approach. Begin with a small, calculated investment—around 10 to 15 percent of the money you're willing to lose. Then, use a disciplined strategy: buy a little more of the asset you want to bet on every time it retracts by the same percentage (e.g., 10-15%) over a day or two.

If you’re approaching this for fun, potential gain, or even to gain knowledge, let me draw a comparison: it’s a bit like betting on your favorite game every weekend. My strategy here is the same. I started small, using the money I’d normally spend on my Friday tacos. If I lose, no tacos for me that week, which is admittedly painful! But if I win, it’s not only easier to enjoy my beloved tacos, but I can share them with friends and family, making the experience that much more rewarding.

The point is, whether it’s crypto or game bets, the key is to stay disciplined, set limits, and always be prepared for the possibility of a loss. Investing or betting should never come at the cost of your essentials—only with money you’re comfortable parting with.

## Summary

*****************************************************************************************************************************************************
* +-----------------------------------------------------+                                                                                           *
*   |                10-15% Strategy Guide               |                                                                                          *
*   +-----------------------------------------------------+                                                                                         *
*   |   Scenario       |   Action                        |                                                                                          *
*   +------------------+----------------------------------+                                                                                         *
*   |   Asset grows    |   Sell 10-15% of your portfolio |                                                                                          *
*   |   by 10 - 15%    |   to lock in gains.             |                                                                                          *
*   +------------------+----------------------------------+                                                                                         *
*   |   Asset retracts |   Buy 10-15% of the money       |                                                                                          *
*   |   by 10-15%      |   you are willing to lose.      |                                                                                          *
*   +------------------+----------------------------------+                                                                                         *
*   |   Betting/Invest |   Start with a small amount     |                                                                                          *
*   |   for fun        |   (e.g., the cost of tacos).    |                                                                                          *
*   |                  |   If you lose, accept the loss. |                                                                                          *
*   |                  |   If you win, share the gains.  |                                                                                          *
*   +-----------------------------------------------------+                                                                                         *
*                                                                                                                                                   *
*                                                                                                                                                   *
*                                                                                                                                                   *
*****************************************************************************************************************************************************

Before we wrap up, I want to leave you with three important takeaways from this strategy:

1. Always share the gains.
When you win, share your success with others. This simple act shifts the focus away from greed or scarcity, bringing joy and purpose to your gains. Whether it’s celebrating with tacos, taking friends out, or giving back in some way, sharing transforms the experience.

2. Accept the loss.
Losses are part of the process, whether you’re betting on an asset or your favorite game. Even if it means skipping your beloved tacos for a week, this discipline strengthens your resilience and teaches invaluable lessons about managing risk. Personal growth often comes from how we handle setbacks.

Bonus tip: Bet against your favorite team.
This might sound counterintuitive, but hear me out: if your team wins, you’re thrilled. If they lose, at least you win the bet. Either way, you come out on top. It’s a playful strategy that keeps emotions in check and ensures a win of some sort.

At the end of the day, whether it’s crypto or casual bets, the key is to keep things fun, intentional, and within your limits. Always remember that the journey is as valuable as the destination—both in finance and in life.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Reflecting on developing expertise using Blooms Taxonomy, and Shu Ha Ri model
October 25th, 2024
by *Pepe Hernandez*


## Bloom Taxonomy
Bloom's taxonomy is a multitiered model of classified thinking according to six cognitive levels of complexity. Bloom and a group of educators created the taxonomy in 1958.

In 1995, a group of specialists started. In 2001, the revisited Bloosm Taxonomy was published.

```markdown
|                          |                             The Cognitive Process Dimension                            |
|--------------------------|------------------------------------|------------|---------------|----------|-----------|
| The Knowledge Dimension  | Remember              | Understand | Apply      | Analyze       | Evaluate | Create    |
|--------------------------|-----------------------|------------|------------|---------------|----------|-----------|
| Factual Knoledge         | List                  | Summarize  | Classify   | Order         | Rank     | Combine   |
| Conceptual Knowledge     | Describe              | Interpret  | Experiment | Explain       | Assess   | Plan      |
| Procedural Knowledge     | Tabualte              | Predict    | Calculate  | Differentiate | Conclude | Compose   |
| Meta-Cognitive Knowledge | Appropiate use        | Execute    | Construct  | Achieve       | Action   | Actualize |
```
Source: Oreng State University.

The Bloom Taxonomy framework consists of six categories **each requiring achievement of the prior skill or ability before the next, more complex one, remains easy to understand.**

## Get directly to the superior levels of learning, a wrong assumption

As a student, I believed that superior levels of taxonomy were what I had to focus. Critical thinking, for example, is prevalent among marketing messages today, and it was 20 years ago. I did believe that understanding and memorizing things was wrong.

Even several Bloom's taxonomy promoters believe that superior levels of thinking are the proper focus for students and professionals. They are wrong, too.

Bloom's taxonomy is hierarchical. That means a specific pyramid level needs the student to master the previous ones.

## The Software Product Managemer Certified training is focused on the first two levels of learning

I am working on a Systematic Literature Review about Software Product Management and Artificial Intelligence. My base research question is, "Which approaches exist that allow software product managers to have expertise in specific Software Product Management Practices?" One of the first articles I found identifies different Product Management Frameworks. The ISPMA (International Software Product Management Association) is one of the most well-known. Several of the most well-known researchers of SPM (Ebert and Maglyas, among others) participated in developing the learning material for the Certified training.

The educational objectives of the ISPMA syllabus for the Software Product Manager Certified course focus on two cognitive levels of knowledge: "know" and "understand," the two basic levels of the Bloom Taxonomy—the first Bloom Taxonomy, not the revised one.

The two verbs are placeholders. **Know** for enumerate, characterize, recognize, and name. **Understand** for reflect, analyze, execute, justify, describe, judge, display, design, develop, complete, explain, elucidate, elicit, formulate, identify, interpret, reason, translate, distinguish, compare, understand, suggest, and summarize.

My base question is how to develop expertise in Software Management Practices. The two basic levels were a previous requirement. The ISPMA learning objective is not intended, at least in this foundational training course, to develop expertise. It's part of the solution.

## The Shu Ha Ri model is suitable for framing the expertise level from Apprentice to Master.

As I am looking for practices that allow me to develop expertise, I think the Shu Ha Ri model better explains what I am expecting.

The Shu Ha Ri is another learning model that comes from Japanese culture. It is the model of Master and apprentice. Shu means to obey. Here, the apprentice must do what the Master says. This is well represented in martial arts with the figure of katas. The apprentice knows the Kata and practices. When the student has enough practice, she becomes a practitioner. When the student dominates the Kata, she can introduce their variations to the movements. Ha point to this level of mastery. Ha means detach. When the apprentice dominates several katas, she creates her own. She designs, develops, and innovates. She became the Kata.

## The following question. Are there AI tools to develop Software Product Manager expertise?

What must a Producto Manager do to advance in these levels of learning and mastery? And what the existing tools are that allow them to become one.

The way to start is with the basic level of knowledge (to know). How does a Product Manager know what she must know?

The second step is to understand. How can a Product manager understand practices? Are there IA tools that allow them to understand?

This will come in another story...

## References
https://cft.vanderbilt.edu/guides-sub-pages/blooms-taxonomy/



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
# Continuous Integration (CI): Garnix
January 25th, 2025
by *Karina Chaires*


## Garnix is a hosted CI service based on Nix that integrates seamlessly with GitHub.

Compared to GitHub Actions, CI jobs on Garnix run faster while providing free Nix caching (no need to manually upload to Cachix). It currently only works with flake-enabled repos. 

## Features:

- **Integration with Nix Flakes:**
Garnix uses the configurations defined in the `flake.nix` file, eliminating the need for CI-specific YAML configurations. This means that the same configuration running on your local machine will be executed in the CI environment.

- **Shared Binary Cache:**
Garnix offers a globally shared binary cache. This means that build results from various projects are stored and shared, making the compilation process faster. Pre-compiled components can be reused, enhancing overall efficiency.

- **Multi-Platform Support:**
Garnix supports multiple platforms on both x86_64 and aarch64 architectures,
including Linux and macOS. Projects targeting different environments can be
seamlessly integrated and tested within the CI pipeline.

- **Efficient Build Processes:**
Unlike some CI services that clear the `/nix/store` folder after each execution, Garnix retains this store, allowing for faster subsequent builds.

## Considerations:

It’s important to note that Garnix is not currently open-source. However, the service emphasizes minimal vendor lock-in. Configurations rely primarily on standard Nix practices, so transitioning away from Garnix, if needed, would not require extensive reconfiguration.

## Example:

```nix
{
  description = "A simple sample Nix project";
  outputs = { ... }:
    {

     checks = {
        x86_64-linux.test = ...;
      };



      packages = {
        x86_64-linux.frontend = ...;
        aarch64-darwin.devServer = ...;
      };



      nixosConfigurations = {
        server = ...;
        db = ...;
      };
  };
}
```


## Conclusion:

Garnix offers an attractive CI solution that combines simplicity, efficiency, and robust features. Its deep integration with Nix and user-friendly design make it a compelling option for achieving an optimized CI workflow.

According to the official site, integrating Garnix is as simple as "Click. Push. Done." All you need to do is install the Garnix GitHub App and push a `flake.nix` file to your repository. Garnix takes care of everything else: building your software, running tests, and even provisioning and deploying your servers.

[garnix.io](https://garnix.io/)


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# 🌟 Create Abundance with Software 🌟
Nov 7th, 2024
by *Agus Rumayor*

We live in an age where abundance is within reach, yet scarcity persists—rooted in outdated, profit-driven systems. But what if we could break free from these limitations? What if we could build a world where resources are managed efficiently, equitably, and sustainably? This vision aligns with the principles of a Resource-Based Economy (RBE), as championed by Jacque Fresco, and software plays a key role in making it a reality.

## The Problem: Money-Oriented Constraints
* 💼 Healthcare: Systems prioritize profitability over universal access.
* 🏫 Education: Quality learning is treated as a commodity, leaving many behind.
* 🌱 Sustainability: Environmental priorities are often sacrificed for short-term economic gains.
* 📈 Business: Profit motives limit collaboration and long-term societal value.

These constraints are a consequence of the scarcity that our money-oriented society endures, perpetuating cycles of inequality and waste, but RBE offers a different approach: managing resources intelligently for the benefit of all, without relying on money as the main driver.

## Software as a Catalyst for Resource-Based Abundance
* 🔧 Automation: Liberating Human Potential
In an RBE, automation handles tasks that don’t require human oversight, allowing us to focus on creativity, innovation, and connection. With software, we can ensure systems operate efficiently, reducing human labor for mundane tasks.

Example: Automated systems in agriculture and energy management optimize production and distribution, ensuring everyone’s basic needs are met without human micromanagement.
Automation helps maintain balance and sustainability, focusing on optimal resource use rather than profit margins.

* 🌐 Democratization: Empowering and Uplifting Communities
RBE emphasizes equal access to technology and tools that empower individuals and communities. Software democratizes not just knowledge but also problem-solving, spreading opportunities for growth and innovation.

Example: Tools for critical thinking and collaborative decision-making enhance personal and collective problem-solving, rippling through entire communities.
By sharing knowledge and tools, we amplify collective intelligence, spreading abundance far beyond individual users.

* 📊 Optimization: Aligning Needs with Resources
Software-driven optimization ensures that population needs are met with the resources we have, minimizing waste and ensuring equity. In RBE, this alignment is key to sustainability and abundance.

Example: Real-time data systems optimize resource allocation, such as water or food distribution, ensuring no resource goes to waste while meeting everyone’s needs.
Optimization shifts focus from maximizing profit to maximizing well-being, fostering a balanced, thriving society.

* 🤝 Collaboration: The Foundation of Thriving Systems
In nature, success comes from collaboration, not competition. RBE mirrors this by prioritizing collective well-being over individual gain. Software enables systems where collaboration is the main goal, fostering shared progress across politics, finance, and society.

Example: Platforms for collective resource management, such as community energy grids or cooperative business models, align individual efforts with communal goals.
When collaboration becomes our core value, we build systems that are resilient, adaptable, and abundant.

* 🚀 Scalability: Amplifying Global Impact
Information and solutions are infinitely scalable, enabling a global shift toward abundance. RBE leverages this scalability to ensure that knowledge and resources flow seamlessly across borders and systems.

Example: A localized healthcare software solution can scale globally, improving healthcare systems worldwide while adapting to local contexts.
Scalability ensures that abundance isn’t confined to one region or group—it becomes a global standard.

** The Vision: From Scarcity to Abundance
Jacque Fresco’s vision of a Resource-Based Economy reimagines how we manage our world’s resources. It shifts the focus from profit to purpose, from individual gain to collective well-being. Software is a critical enabler of this transition, allowing us to:

* Automate the unnecessary,
* Democratize tools and knowledge,
* Optimize resource allocation,
* Foster global collaboration, and
* Scale impact to benefit all of humanity.

The path to abundance isn’t through hoarding or competition—it’s through sharing, balancing, and thriving together. Let’s build a future where software helps us live in harmony with our planet and each other. 🌍✨

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# How did I generate a QR so our clients could write a review 
September 30th, 2024
by *Pepe Hernandez*

###Portfolio ###Hacks ###ProgrammingAdventures

My wife asked me for a QR code so their clients could write a review in Google Maps. As you know, when a woman asks a man to do something, the man will do it; you don't have to remember the task every six months. As I know myself, I started as soon as possible, just before a kind reminder came to me.

## 1st iteration. Found the URL on Google Maps. Find a tool to generate the QR. Generate it.
The first thing I did was go to Google Maps and find the URL of the business. I had the input to generate the QR. Then, I asked chatGPT, "How can I create a QR?"
It gave me three options: download Code Monkey or use a QR code generator. I tried both. I downloaded the QR code generator, but there is no app for Code Monkey on my iPhone. The third option was to generate the code using some Python libraries. I had to generate only one, so I chose to go with the apps. 
I had to pay for the 14th-day package of the QR code generator. 
It was okay, but you have to scroll until the review section, which creates a little friction for the customer. I was not happy with it. 

## 2nd Iteration. How do you get a direct URL to publish the review?
I asked CHATGPT how to do this. It gave me two options: First, add the URL /review, which didn't work. 
The second option is generating the URL using the PLACE_ID with the next link:
https://search.google.com/local/writereview?placeid=PLACE_ID

Now I asked, "How do I get the PLACE_ID?" The direct place ID is a HEXADECIMAL number that you can extract from the sharing URL of the place. However, this doesn't work. 

It generates an error:
404. That's an error. The requested URL /local/writereview?placeid=0x8f56777791707875:0xf7ed452d4b2d8269 was not found on this server. That's all we know.

I asked CHATgpt about it. The reason is that the HEXADECIMAL format is incompatible with the suggested link to go directly to the review.
To get the right PLACE_ID, CHATgpt suggested going to the Google Developers site: https://developers.google.com/maps/documentation/places/web-service/place-id and looking for the PLACE.
I got the right PLACE_ID.
Here you can write your review:
https://search.google.com/local/writereview?placeid=ChIJM9B-Nap1Vo8R-decYH9-KV4

## Finally, I tuned the QR using the QR Generator
I used a template.
I selected a logo.
I shared the QR with my wife.

![Add your review! Quiriquiqui](QRQuiquiriqui.jpg)

And those who are married know, "Happy wife, happy life."

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>

<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Declarative dotfiles with Home Manager

October 5th, 2024
by *Julio César*

## What are dotfiles?

The UNIX philosophy is a set of cultural norms and a philosophical approach to building minimalist and modular software, the main tenets can be summarized as follows:

-   Write programs that do one thing and do it well.
-   Write programs to work together.
-   Write programs to handle text streams, because that is a universal interface.

While I am a big supporter of the idea, is not without drawbacks. As a software developer in a Linux system I often end up installing lots of small utilities each one needing its own configuration file. It&rsquo;s not uncommon to have lots of these configuration files lying around polluting the home directory. In an attempt to keep these out of the way their names usually start with a dot (`.`) meaning they are &ldquo;hidden&rdquo; and not listed by programs such as `ls` or any other file browser for that matter (at least by default), however, they&rsquo;re still there accruing into a bigger configuration file collection over time, these are commonly known as &ldquo;*dotfiles*&rdquo;.

In order to ease management of these configuration files it is often practical to start viewing them as code, after all they define the state of the system we use to do our work, because of this reason it is not uncommon to check these files into version control systems so that we&rsquo;re able to share the same configuration across multiple machines with the added benefit that if we ever need to change workstations then it would be easier to port our tools over and get to work right away (which in my experience - it&rsquo;s never that easy).

However, managing these files in a software repository brings on a new challenge as we now need to handle the installation of these files into their correct locations, not all dotfiles need to be in the home directory and not every tool supports the [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/latest/) so it&rsquo;s not uncommon to have non-standard locations for these files, more over tools which provide lots of functionality might end up needing more than one configuration file for them to work.


## The symlink approach

Take the following dotfiles repository as an example:

```
$ tree --charset=ascii ~/configuration/dotfiles
.
|-- .ghcid
|-- .git/
|-- bat/
|   `-- config
|-- doom/
|   |-- config.el
|   |-- init.el
|   `-- packages.el
|-- fourmolu/
|   `-- fourmolu.yaml
|-- nix/
|   |-- netrc
|   |-- nix.conf
|   `-- registry.json
|-- nvim/
|   `-- init.vim
`-- setup.sh
```

One option would be to use symbolic links to install this configuration into place:

```
$ ln -s ~/config/dotfiles/bat ~/.config/bat
$ ln -s ~/config/dotfiles/doom ~/.config/doom
$ ln -s ~/config/dotfiles/nix ~/.config/nix
...
```

Unfortunately we can&rsquo;t symlink the whole repo into `~/.config` because this directory might not be empty and contain other files that we don&rsquo;t want to track in our dotfiles repository, so the next intuitive thing to do might be to iterate through each of the directories and symlink each file into place, here is a one liner to do exactly this:

```
$ find . -type d -exec ln -s {} ~/.config/ \;
```

Ok but what about the `.git` folder that exists in all git repositories, or suppose I have a `docs` folder in my repo that doesn&rsquo;t hold any configuration files at all? I don&rsquo;t want these directories to be symlinked!

With this symlink approach it isn&rsquo;t hard to find ourselves in a situation where we start to loose flexibility, for instance, all of a sudden a tool&rsquo;s configuration might need to be placed in a different location due to an upstream change. Next, we find ourselves coding a script with all these rules in it, yes, that&rsquo;s precisely why there&rsquo;s a `setup.sh` script in the dotfiles folder above. I&rsquo;ll give you a sneak peak into what that file might look like; young children close your eyes:

```bash
#!/usr/bin/env bash

set -xeumo pipefail

self="$(realpath "$0")"
this="$(dirname "$self")"

# Create symlinks so config appears in right folder
# ln -sT "$this/.lesskey" "$HOME/.lesskey"
# ln -sT "$this/dunst" "$HOME/.config/dunst"
ln -sT "$this/.ghci" "$HOME/.ghci" || echo "WARN: .ghci config already exists"
ln -sT "$this/fourmolu" "$HOME/.config/fourmolu" || echo "WARN: fourmolu config already exists"
ln -sT "$this/.clang-format" "$HOME/.clang-format" || echo "WARN: .clang-format config already exists"
ln -sT "$this/nvim" "$HOME/.config/nvim" || echo "WARN: nvim config already exists"
# ln -sT "$this/bat" "$HOME/.config/bat"
# ln -sT "$this/containers" "$HOME/.config/containers"

# This should execute only when xmonad support is desired
# # TODO Should link as well
# mkdir -p $HOME/.local/share/sounds/
# cp $this/share/sounds/* $HOME/.local/share/sounds/
# cp $this/share/icons/* $HOME/.local/share/icons/

# TODO Setup the following snap packages as well (in a function)
function setup_snaps () {
    snap install dbeaver-ce firefox gnome-clocks slack snapd-desktop-integration element-desktop
}

# TODO Link nix and nixpkgs configuration into place
# ln -sT "$this/nix" "$HOME/.config/nix" || echo "WARN: nix config already exists"
# ln -sT "$this/home-manager" "$HOME/.config/home-manager" || echo "WARN: home-manager config already exists"
ln -sT "$this/doom" "$HOME/.config/doom" || echo "WARN: doom config already exists"

# link share resources
# TODO Add a check to make sure the "icons" and "applications" directories exist, and if not create them
ln -sT "$this/share/fonts" "$HOME/.local/share/fonts" || echo "WARN: ~/.local/share/fonts already exists"
ln -sT "$this/share/icons" "$HOME/.local/share/icons" || echo "WARN: ~/.local/share/icons already exists"
# TODO probably need to fix globbing
ln -s $this/share/applications/*.desktop "$HOME/.local/share/applications/" || echo "WARN: conflicting links/files in ~/.local/share/applications"
```

I don&rsquo;t know about you, but that looks nasty! it certainly does read &ldquo;fragile&rdquo; all over the place to me, you can even see we do not check if the files where already installed and might be overwritten, or whether the target directories exist at all. We might get into arguments on what approach the script should take and how it should be structured in order to improve the situation, but my point stands, scripting a configuration into place will never be good enough and as such is not the right approach to configure an environment.


## Home Manager for declarative configurations

As a neophyte Nix user I had to try Home Manager for solving exactly this problem, and what a great solution this is!

Home manager allow us to follow the philosophy of NixOS to manage our dotfiles, that is, whereas NixOS allow us to configure an entire system state and system-level properties declaratively using the Nix language, Home Manager allow us to configure our user-level tooling declaratively using the Nix language.

Nix being nix, exposes lots of possible ways to do the same thing, so I will document bellow the way I&rsquo;m currently using it in combination of Nix Flakes, a fancy name for &ldquo;*a unit of Nix distribution package*&rdquo;.

Within the root of the dotfiles repo we define a `flake.nix` file, this is a file that implements a known schema of what a *flake* should look like, in essence it must define an object with certain properties set, or in Nix lingo, an attribute set with certain definitions in it, it&rsquo;s all the same, the code is properly commented to explain each part:

```nix
# flake.nix
{
    # Adds a sample description as metadata for this flake
    description = "This Flake manages my dotfiles";

    # The "inputs" attribute is used to declare what other flakes
    # this flake depends on - it is essentially our dependency list
    inputs = {

        # We can depend on other flakes that are hosted at github by their URL.
        #
        # Nixpkgs is a big set of packages that is almost always depended upon
        # as it contains Nix's standard library.
        #
        # It is possible to pin dependencies to a specific commit (aka revision)
        # for example in this case we pin to a commit on the nixos-24.05 branch
        # of the "NixOS/nixpkgs" reposityory. We can obtain these either by
        # looking in github directly or by browsing https://status.nixos.org/.
        nixpkgs.url =
          "github:NixOS/nixpkgs?rev=36bae45077667aff5720e5b3f1a5458f51cf0776";

        # The nixos-XX.YY branches contain stable packages known to work reliably,
        # however, this means that software packaged in that branch might not be
        # the latest available, for that we can declare another version of nixpkgs
        # this time pinning a revision from the "nixpkgs-unstable" branch which
        # typically has the "latest" available versions of most packages:
        unstable.url =
          "github:NixOS/nixpkgs?rev=5de1564aed415bf9d0f281461babc2d101dd49ff";

        # Home Manager is distributed as a flake itself, so we add it
        # here as a dependency to our flake, the revision comes from
        # the "release-24.05" branch
        home-manager.url =
          "github:nix-community/home-manager?rev=e1391fb22e18a36f57e6999c7a9f966dc80ac073";

        # Since Home Manager is a flake itself written in Nix then it surely
        # declares nixpkgs as one of its dependencies, since our flake already
        # depends on nixpkgs it would be nice to tell nix to use the exact same
        # Nixpkgs version that our flake depends on when Home Manager's nixpkgs
        # dependcy gets resolved; we use literaly type "nixpkgs" here because
        # that how we named it in our inputs above.
        home-manager.inputs.nixpkgs.follows = "nixpkgs";
    };

    # The "outputs" attribute is a function that takes the "inputs" as
    # parameter (here we unpack it using object destructuring) and returns
    # an attribute set (aka an object or dictionary) that defines certain
    # attributes that follow the flake schema.
    outputs = { nixpkgs, unstable, home-manager, ... }:

      let
        # nixpkgs packages software for different architectures in my
        # case I only care about x86_64-linux so I refer to that on
        # its own as "pkgs".
        pkgs = nixpkgs.legacyPackages.x86_64-linux;

      in {

        # In this particular case "homeConfigurations" is not part of the
        # official flake schema but is an attribute understood by the
        # home-manager CLI tool.
        #
        # Here we declare a home manager configuration named "demo".
        homeConfigurations.demo =

            # home-manager configurations are instantiated by calling the
            # "homeManagerConfiguration" function, giving it an attribute
            # set as its only argument:
            home-manager.lib.homeManagerConfiguration {

              # The attribute set we give to the function expects a "pkgs"
              # attribute to be defined, it must be a nixpkgs package set,
              # in this case we use `inherit` as a shortcut for `pkgs = pkgs`.
              inherit pkgs;

              # Home manager - as well as NixOS - allow us to package our
              # configuration in modules, at the beginning we might only
              # have a single module but this can change later, perhaps
              # having a module per application configuration.
              modules = [
                # We refer to the file containing our home configuration as a module
                ./home.nix
              ];

              # Optionally we can set "extraSpecialArgs" to pass arguments
              # to home.nix and whatever other modules we might have
              # included in the "modules" list above.
              extraSpecialArgs = {

                # As an example we pass the "unstable" version of nixpkgs
                # so that we're able to use it within the home.nix module.
                inherit upkgs;
              };
            };
    }
}
```

Now, we need to define the `home.nix` file that we included by path in the `flake.nix` file:

```nix
# home.nix

# A module is no different than a function that takes an attribute set as its
# only parameter, here we deconstruct the object to access `pkgs` and `upkgs`
# that we passed in `extraSpecialArgs` earlier.
{ pkgs, upkgs, ... }:

{
  # We might include other modules if we have organized our configuration
  # in multiple files, you see, our configuration composes just like
  # Matryoshka dolls
  imports = [
    ./other-module.nix
  ];

  home.username = "demo";

  # Install syncthing and enable a systemd service that keeps it running
  services.syncthing.enable = true;

  # We can define environment variables we might need
  home.sessionVariables = {
    EDITOR = "nvim";
    COLORTERM = "truecolor";
    TERM = "xterm-256color";
  };

  # We can install Emacs and with some extra packages for Emacs to use
  programs.emacs = {
    enable = true;
    extraPackages = epkgs: with epkgs; [ vterm ];

    # We can tell it to use "emacs" but the one coming from
    # the unstable nixpkgs version "upkgs"
    package = upkgs.emacs;
  };

  # It is possible to say "put *this* file into *this* location".
  #
  # In this example we use it to "copy" a "ghci" configuration
  # file into our home directory as ".ghci".
  home.file.ghci = {
    enable = true; # If this is `false` then the file is not copied
    source = ./.ghci;
    target = ".ghci";
  };

  # A partial example on how we can install and configure git:
  programs.git = {
    enable = true;

    # These are attributes that git expects
    # in its `~/.config/git/config` file
    userName = "demo";
    userEmail = "user@demo.com";

    # We can alias commands, e.g. "git graph":
    aliases = {
      graph = "log --all --graph --decorate --oneline";
    };
  };

  # This value determines the Home Manager release that our
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # It is possible to update Home Manager without changing this value.
  #
  # Whenever we use flakes (as we are doing) this value isn't really used
  # because we specifically set the home-manager revision to use as a flake
  # input, however, still must be present in the home configuration so that
  # it does not throw an error about "missing attribute".
  home.stateVersion = "23.11";
}
```

This is a bare example that shows how could we use Home Manager to configure our user-level tools, we can see how not only we&rsquo;re able to install packages such as Emacs or Git, but also add configuration to them. We can also manage arbitrary files (`home.file`) and set environment variables (`home.sessionVariables`).

Note that environment variables are only able to get injected if Home manager also configures our shell, this mentioned in the manual: [Why are the session variables not set?](https://nix-community.github.io/home-manager/index.xhtml#_why_are_the_session_variables_not_set), in the example above we did not configure our shell so if we wanted to see those variables we need to source a script home-manager installs, but, adding our shell configuration to home-manager is trivial.

```nix
# other-module.nix
{ ... }:

{
  # ...

  # Install and configure Zshell
  programs.zsh = {
    enable = true;
    autosuggestion.enable = true;
    enableCompletion = true;
    autocd = true;
    defaultKeymap = "emacs";
    dotDir = ".config/zsh"; # Where to place zsh config?

    # Define some shell aliases
    shellAliases = {
      cat = "bat -p";
      cd = "z";
      gs = "git status";
      l = "ls -alh";
      ll = "ls -l";
      ls = "ls --color=tty";
      lt = "ls -thalr";
    };

    # Use the popular Oh-My-Zsh distribution
    oh-my-zsh = {
      enable = true;
      plugins = [ "git" "direnv" "fzf" ];
      theme = "robbyrussell";
    };
  };

  # ...
}
```

After seeing all this, a natural question arises, how do I know what options are available to set in my Home Manager configuration? good news, all the options home manage supports are listed in the official manual [Appendix A. Home Manager Configuration Options](https://nix-community.github.io/home-manager/options.xhtml). I would also suggest [Home Manager Option Search](https://home-manager-options.extranix.com/) an option index for quick searching.


## Applying the Home Manager configuration

It&rsquo;s all fun and games till we want to apply our configuration, the very first time we do this we actually want to install Home Manager into our workstation, the following works given that we have Nix installed with Flakes support enabled:

```
$ nix run home-manager/release-24.05 -- init --switch
```

A temporary shell with `home-manager` available will be activated after running that command, and will bootstrap our configuration in the process.

From this point onwards whenever we modify our configuration `home-manager` can be executed directly to switch to the new configuration:

```
$ home-manager switch --flake .#demo
```

We use `demo` here because that&rsquo;s the name we gave to our Home Manager configuration within the `flake.nix` file.


## Conclusion

I know what you might be thinking, &ldquo;*this doesn&rsquo;t look any simpler!*&rdquo;, &ldquo;*uh&#x2026; ever heard of GNU Stow?*&rdquo;, &ldquo;*Nix is hard*&rdquo;, &ldquo;*I use Windows*&rdquo;, &ldquo;*what is this post even about?*&rdquo;. Shh! when we start to treat our configuration files as any other software codebase, then using a declarative functional language to manage it is a smart move.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Devtron: Enhancing Kubernetes Management and DevOps Pipelines

October 16th, 2024
by *Leonel Perea*

## Introduction

As organizations continue adopting Kubernetes for containerized applications, they encounter several operational and developmental challenges. Kubernetes, while highly scalable and flexible, demands a deep understanding of cluster orchestration, debugging, and CI/CD pipelines, which often overwhelms DevOps teams. Devtron https://devtron.ai/ presents itself as a unified platform to simplify these tasks. This research paper delves into how Devtron integrates with Kubernetes, providing solutions to container orchestration, security management, and application deployment.

## Problem Statement

Organizations utilizing Kubernetes face challenges in:
- **Complex application management**: Orchestrating multi-cluster environments.
- **Debugging and observability**: Identifying root causes in distributed environments.
- **Security vulnerabilities**: Ensuring continuous security scanning of applications.

Devtron seeks to address these challenges by providing a Kubernetes-native platform that integrates with existing DevOps workflows.

## Simplified Application Management

Devtron offers a centralized dashboard that provides complete visibility over Kubernetes clusters, pods, and applications. It allows users to monitor cluster resources, check logs, and manage deployments through a single interface. This eliminates the need for complex command-line interactions, simplifying Kubernetes adoption.

- **Resource Grouping**: Devtron groups resources, such as networking, storage, and compute, into intuitive categories. This helps users debug issues faster, as all related components are neatly organized in the UI.
- **Multi-Cluster Management**: The platform allows users to manage multiple Kubernetes clusters from one central location, making it suitable for enterprises with complex multi-cloud or hybrid cloud environments.

## Enhanced CI/CD Pipelines

One of Devtron's strongest features is its integration of CI/CD pipelines into Kubernetes. Devtron automates the build, test, and deployment phases for applications, leveraging Kubernetes as the base infrastructure for these processes.

- **Continuous Integration (CI)**: Devtron integrates with common CI tools and allows easy deployment of application changes. It provides Dockerfile templates for easy containerization, enabling teams to standardize the CI process.
- **Continuous Deployment (CD)**: Devtron integrates with Helm, allowing easy deployment of Kubernetes resources. Its Helm dashboard provides visibility into Helm charts, enabling users to manage and monitor applications deployed across clusters more efficiently.

## Debugging and Monitoring

Debugging distributed systems like Kubernetes can be complex. Devtron simplifies this by providing access to logs, pod-level events, and a built-in terminal, allowing teams to debug applications directly from the dashboard. This real-time debugging capability helps reduce downtime and speeds up resolution times.

- **Log Monitoring**: Devtron allows users to view application and Kubernetes logs in real time. It supports automated log collection and organization by application, pod, or namespace.
- **Interactive Shell**: Users can access an interactive shell for each Kubernetes pod, allowing them to run commands and inspect the state of the application from within the pod itself.
- **Event Tracking**: The platform logs key events, helping teams trace the root cause of issues, such as failed deployments or pod crashes.

## DevSecOps Integration

Security is a critical concern in cloud-native environments. Devtron addresses this by integrating security scanning into the deployment pipeline and enforcing access control policies.

- **Security Scanning**: Devtron integrates with tools like Trivy to perform vulnerability scans of containers and Kubernetes resources before deploying them to production. This ensures that no vulnerable code is deployed to production environments, maintaining a secure pipeline.
- **Fine-Grained Access Control**: The platform provides detailed access control, allowing teams to assign specific permissions to users or groups. Devtron supports Role-Based Access Control (RBAC), which is abstracted to a user-friendly UI, making it easier for DevOps teams to manage access across multiple projects and environments.

## Policy-Driven Security

Through Devtron, teams can enforce security policies on Kubernetes resources to ensure compliance with organizational standards. These policies can cover a range of topics from image scanning to infrastructure monitoring, ensuring that only secure and compliant applications are deployed to production.

## Multi-Environment and Multi-Cloud Support

Devtron's support for multi-environment and multi-cloud configurations makes it a valuable tool for enterprises that operate in hybrid environments. It allows organizations to manage configurations specific to development, testing, and production environments, ensuring consistency across different clusters.

- **Parallel Deployments**: Devtron facilitates simultaneous deployments to multiple environments, reducing the complexity of managing different configurations for staging, production, and development clusters.
- **Environment-Specific Configurations**: Each environment can have unique configurations managed directly within the Devtron platform, allowing for efficient management of application settings across diverse environments.

## Operational Efficiency and Cost Management

Devtron introduces features that help reduce the operational overhead of running Kubernetes. Its dashboard provides real-time insights into resource usage, helping teams optimize their deployments and scale their infrastructure according to demand.

- **Hibernation of Workloads**: Devtron enables organizations to scale down non-critical workloads during off-hours, reducing operational costs. This feature is particularly useful for managing non-production environments such as staging and testing.
- **Real-Time Monitoring**: The platform provides live monitoring of deployments and Kubernetes resources, allowing teams to make informed decisions about scaling or resource allocation.

## Conclusion

Devtron serves as a comprehensive platform for managing Kubernetes clusters, CI/CD pipelines, and security workflows. Its integration with Helm and Kubernetes makes it an ideal choice for organizations seeking to streamline application deployment, monitor performance, and enforce security policies. By reducing the complexity of managing Kubernetes and providing a single platform for CI/CD, DevSecOps, and cloud-native applications, Devtron helps organizations maximize the benefits of Kubernetes while minimizing operational overhead.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">

# Did you read this book? Great, show me...
November 3rd, 2024
By Pepe Hernández

# I like to read.

I like to read.
I wish I could have more time to read.
As I don't have too much time to read, I need to take some shortcuts.
First, I use audible.
I enjoy running for 30 minutes daily while listening to the chosen audiobook. Last month, I listened to and re-listened to Cal's Newport Slow Productivity book. I also re-listen to one of my favorites, Steven's Pressfield, "Put your ass where your heart wants to be." I will buy both books physically. They are worth it.

## A pair of learnings from each book

### Cal's Newport Slow Productivity

**I discovered some stories that show that slow productivity works**. Cals Newport writes about how vital work is and how it took years, even decades, to finish. Newton, Galileo, Jane Austin, Einstein, and other great achievers had problems in their minds and worked on them for many years. They were persistent, patient, and slow productivity workers. They worked a pair of hours and then followed with the daily activities. But they continually came back to their stuff, to their problem.
**I found another interesting Kanban case in the book**.
Another exciting learning is that the Genoma Research Center of Boston's business case used Kanban to achieve an excellent operating performance. A sustainable pace is one of Kanban's values. The lab's IT and software departments adopted Kanban to improve software delivery.

### Steven Pressfield, "Put your ass where your heart wants to be"
You can use many quotes to be on your thing when you are working. Also, the book contains recommendations to motivate you to outperform in your field. This is mainly for artists and writers, but you can generalize this to every human field.

- This is the day; there is no other day.
- This is the wor, there is no other work.
- Move your ass all the way, related to marketing.
- Kill-kill = good, good
- Among other advice.

Both books are highly recommended.

## Reading the Physical book, "Scaling Up".
For other motifs, I am reading Vern Harmish's book Scaling Up. I am working right now, helping my family use this framework in their company.

When I read a book, I try to understand the message. Frequently, I elaborate on something. I've made a presentation, prepared material, written a post, or done something else.

So when I recommend a book, I have a general understanding of it. I could talk about it. This is obvious, at least for me. But is it for everybody else?

## Did you read X book?

So frequently, when I talk to somebody about a specific topic, I remember a book, a phrase, a quote. And I ask, that comes from this particular book. Did you read it? Sometimes, people ask me, "Yes, of course." The younger me smiled, agreed, and continued with the talk to realize that people hadn't read the book for the following talk, or, if they had read the book, they hadn't understood the content, or the message, or thought bad, they only told me they read the book, but it wasn't true.

When this happens to me, now I ask, "Great, what do you think about the book?" What did you learn? Did you like it, and why? I do that not because I want to put them in evidence of lying to me or us. I do that because when I say something, I frequently don't finish my idea because I think other people already understand or know what I am trying to say.

I adopted this habit because Alex uses it frequently. We have a WhatsApp group of friends. The group aims to recommend movies or tracks. Its original name is cine cata (cine, for cinema, and data for the analogy of wine-tasting events for enthusiasts and specialists). When somebody adds a recommendation, Alex always asks, "Why did you like it?" That means you should give me more information to check my interest.

As an expert in something, there is some knowledge you think is obvious. For example, bottlenecks determine the performance of the system. It's obvious, isn't it? Yes, but the second level of understanding is not. You realize that when people know the bottleneck, they continue improving the 99% of elements that are not the bottleneck. When you ask, what will you improve? That lets you know that they don't understand bottlenecks.
Experts understand deeply simple things in their domain.

If you know something as an expert and someone tells you they understand the concept, you believe them because it is obvious. This is a trap.

Did you read this book? Did you know this concept? - you will ask.
Yes, of course - people will answer.
Then you believe. You have fallen. You lose an opportunity.

	"What is obvious, is obvious (only) to You" - John Medina.

John Medina, author of Brain Rules and Brain Rules for Kids (both excellent books), said, "What is obvious is obvious to you." Because what you are trying to say is not apparent to anybody else. You need to say it to be understood. Yes, I know. It's not only me. Everybody makes connections with his experience or with the knowledge he has acquired throughout his life.

## Teaching from the Back of the Room

There is another story that I like to share. I have some friends who have been teachers for a long time. A month ago, a friend of mine shared with me that their students of a class ignored them, and some of them told them, you repeat the concepts many times. Your class is boring because you repeat it continuously. She was reflective. I recommended that she ask their students what they have learned. To ask more, to listen more, and to talk less. "Can you explain to me the concept, idea, technique, and tool I have already shared with you?" When students answered, she knew if students had understood the concept. And she could give them good feedback in advance. Her classes have improved with the use of this principle.

I discovered this principle in a Kanban University training course. Asking participants about Kanban methods' core practices lets facilitators know if they understand the concept or if they identify the gaps to give the participants good feedback.

A final thought.

## People frequently think they know, but they don't.

When this happens, go deeper. Both parts win.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Challenges for the new educational systems in the World. An historical perspective about the change from the Atlantic Countries dominion, to the Pacific emergent dominion of the economy
By Pepe Hernandez
November 26th, 2024

The document "Oceans of Innovation. The Atlantic, the Pacific, Global Leadership and the future of education" is an essay written by Michael Barber, Katelyn Donnelly, and Saad Rizvi, education specialists. 

## The Atlantic region dominion of the world over 300 hundred years
The essay provides a historical perspective on the global leadership of the Atlantic region over 300 years and its transition to the Pacific region. It addresses the immense challenge Pacific countries face to maintain this leadership and tackle the challenges of the second half of the 21st century. The article emphasizes the importance of disruptive innovation in addressing these challenges and argues that Pacific countries—and, indirectly, the rest of the world—must revolutionize their educational systems.

## The Pacific Global Leadership
The authors acknowledge the success of current education systems but argue that Pacific countries' cultural values, such as collectivism, respect for authority, and achievements in mathematics, reading, and science, limit their ability to foster disruptive innovation and entrepreneurship. The challenge lies in maintaining leadership through profound changes in education systems, steering them toward creativity, entrepreneurship, and individualism to successfully confront these transformative challenges for the region (and humanity).

## The keys of the success of the pacific countries education systems
A complementary part of the essay discusses characteristics of Asian culture that contributed to the success of their education systems. These include valuing and appreciating teachers, the virtuous cycle created with parents and students due to the presence of excellent teachers, prioritizing education as a fundamental value, and a long-term mindset with consistent actions aligned to these goals. 

## A new framework for actual education systems
The article proposes an equation summarizing a framework for education systems: Well Educated = E(K + T + L)

A good education equals the sum of Knowledge, Critical Thinking, and Leadership, all empowered by Ethics.

## The agenda for the evolution of educational systems
Additionally, the essay outlines complementary views on implementing this framework, such as curriculum changes, restructuring traditional schedules and daily classes, and transforming evaluation methods. It advocates for systemic reforms based on standards, accountability, human capital, structure, and organization.

## Examples of good practices in educational initiatives in the world
As articulated in the essay, these elements form the foundation of a new educational model for innovation and entrepreneurship. Finally, the essay references several successful cases in different countries that exemplify good practices that should ideally be disseminated within their respective educational systems and globally.

- High Tech High achieves 100% effectiveness in student university applications through innovative teacher-driven education.
- Raffles Girls' School constantly experiments with new approaches, openly sharing and distributing them.
- GEZH High School in Hong Kong has generated over 600 patents with the participation of students, parents, and teachers (40% of which are related to sustainability).
- The Jugaad low-cost school model, at $5 per student monthly, achieves better results than government programs, though perceived as a threat. Unlike Jugaad, Punjab schools in Pakistan are considered complementary low-cost options funded by the government to augment existing educational alternatives.

## Two pivotal points from the essay
This summary sets the stage for focusing on two main ideas:
The recurrent use of dichotomies throughout the article is an open question, which is useful for us as a means of generating new ideas.
The premise of disruptive innovation is to address transformative regional challenges.
### Dichotomies for Idea Generation
Some of the dichotomies identified in the essay include:
- How do we foster disruptive innovation while preserving cultural values? Maintaining a love for work and respect for authority while being open to change and generating new ideas is an example of a dichotomy.
- How can academic success be achieved while developing creativity and entrepreneurship in Asian cultures?
- How do we leverage outstanding innovation cases, described as "islands of innovation," and democratize these practices quickly and effectively?

The authors identify several dichotomies they label as false but useful for practical problem-solving exercises:
- Universal standards vs. personalization
- Entire systems vs. autonomous schools
- Best practices vs. innovation
- Teaching vs. technology
- Public vs. private education
- Strategy vs. Execution

### TRIZ - Theory of Inventive Problem Solving
TRIZ, developed by Heinrich Altshuller in 1945, provides algorithms and tools for systematically solving creative problems. Among its tools are separation principles, which include:
- **Separation in time.** For this principle, you need a system to have a specific state at a particular time and another at a different time (e.g., airplane landing gear is used only for takeoff and landing).
- **Separation in space.** Combining separate spaces for different purposes (e.g., a family dining area with a visible play area for children) can help cover both needs in different places.
- **Coexistence of factors.** This principle allows managing two different states for the same object simultaneously. A typical example is, "I want my coffee hot and at environment temperature at the same time." I want my coffee hot to enjoy it and a template coffee to carry it. 

For instance, consider the dichotomy of preserving cultural values while fostering openness to change. Applying TRIZ principles:
- **Separation in time:** During class, build trust with teachers and superiors; maintain respect for parental authority outside classy.
- **Separation in space:** Foster creativity within schools while maintaining traditional values at home.
- **Coexistence:**  Show respect for authority while encouraging assertive communication with leaders to foster entrepreneurship, and disruptive innovation.

### Goldratt's Conflict Resolution Diagram
Eliyahu Goldratt's Conflict Resolution Diagram, part of the Logical Thinking Process in the Theory of Constraints, is another tool for resolving dichotomies. For example:
- Universal standards vs. personalization.
- Universal standards aim to scale processes.
- Personalization focuses on nurturing students' unique talents.
Potential solutions emerge by identifying underlying assumptions for each side. Often, these conflicts are apparent rather than real, such as standardizing personalized approaches to resolve the dichotomy.

## Final Reflections
This article resonated deeply with me. Education is a universal theme I've experienced from multiple perspectives—as a student (with two master's degrees and current doctoral studies), as an educator with 23 years of teaching experience, as a process improvement advisor for the Ministry of Education, as the coordinator of the Master's in Software Engineering program at CIMAT, and as a father of four. The article broadened my understanding of successful educational systems worldwide and their present challenges.
It also stimulated critical thinking about tools like TRIZ and the Logical Thinking Process, which I've found invaluable for analyzing problems and generating innovative solutions.

### On Disruptive Innovation:
The authors argue it is the only solution to transformative challenges. However, Walter Isaacson's The Innovators suggests that innovation is incremental, building on existing technology. For instance, ENIAC and MARK I computers emerged because prior technologies enabled their creation. This incremental approach combines existing elements to develop innovative solutions.

### On High-Performance Teams:
The essay references The Lunar Men, a group of inventors and scientists whose collaborative efforts led to innovations like the steam engine. Similarly, Xerox PARC produced groundbreaking technologies through a formal and informal culture of collaboration. Creating such teams today could lead to similar transformative innovations.

These themes warrant further exploration in another essay.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Don't Waste Your Time with Skeptics. Go With the Interested ones in Your Projects. 
By Pepe Hernandez. December 3rd, 2024.

## Finding Radziwill again
Alex admires Nicole Radziwill. She wrote the better statistics book. He had lost the footprint of Radziwill, until last week. He found she is now a consultant, and she write in the blog of her company. Alex sharee with me the post https://www.dxquality.com/blog/don-t-try-to-win-them-over. It copes with a problem that we have faced many times. Trying to convince others from something good for them. 

## The futility of your time with Skeptics
She points out the futility of Trying to Win Over Skeptics. She said that if she had read the book "Cascades. How to create a movement that drives transformational change", written by Greg Satell, she could have saved two months, a lot of agony, and about 150k USD.

## How to detect that we are over investeing in our time in a lost battle
Radziwill said, "if you repeat over, and over, and you feel anxious and mad about others dont listening, probably you need to let it go"...

## What to do instead
Trying to convince skeptic is hard because of their beliefs. They are influenced for factors beyond reason. Skepticism, is driven by emotional, psychological, and social factors. It is better to use that energy in other activities like:
- Trying to understand where skepticism come from understanding skeptic perspectives.
- Focus on those who are more receptive to the idea. 
- Invest your time on those who are willing to change their mind.
- Avoid unproductive discussions with skeptics.
- Shift the conversation to productive topics. 

## Convice others to do something good for them, is not good for you
After I read the post I realized when I waste time trying to convince someone to buy in an idea:
- I offer digitization services to the undersecretary of planning of Secretary of Education. We had a good service. It was ineffective.
- Right now, we have a group that writes a technology blogpost. From an approximately, 10, only 3 people have contributed to the 80% of the total blogposts (Thank you Pareto).
- I am trying to convince, my thesis director to work on a topic not related to the work she likes.
- All of this activities were waste. We couldn't convince the undersecretary to contract our service, our friends don't write for the blogpost, and my thesis director does not want to participate on the topic I propose.

## First trying to convice, then working with the interested ones
But I realized, I took the good choice other times, after spending some time trying to convince there were need for alternative ones:
I had a group of computer engineers that wanted to change the local government. We proposed to creat an Information Technologies agency. At the same time, the Accountability Secretary, and the governor in time (Amalia Garcia), wanted to offer physical kiosks to deliver digital services to citizens.
I remember I was in charge of the project. Andres Hoffman, was director of the magazine "Digital Politics", a Mexican magazine that promotes and inform about the IT successful trends and current initiatives in Mexico, and in the world in 2008. We had a call, and he told me. If you dont deliver on digital kiosks, it doesn matter what you propose for the IT Digital Agency. That is not what the governor was. I though about it, and knew he was ritght. So we focus on that project, and it was one of the succeses of that administration. Digital services in one place in several points of the states.
I worked for a project that the governor wanted. 

I remembar another ocassion, insted of working in the Secretary of Administration with all the government dependence, we focused in the internal needs. There were also, other small government areas that ask for help. We stopped to offer our innoations services to thos areas. We worked with the people who wanted to work with us.

The same happened when I worked as a lean-Kanban consultant at the Secretary of Education. In the Undersecretary of Planning, there were a lot of areas and needs. We focus on the area, and the area improved their performance for adopting good agile practices and methods (like Kanban). We worked with someone who wanted to work with us.

## A final thought
Thanks Alex for the blogpost. This is illuminating. 
We need to focus on the people who want to work with us, and with the people that share interests with use. It works on the personal level, in the professional level, and in the organizational level.
That way we will be using our time wisely.

Mental note: go directly with the interested ones in your initiative, avoid going with skeptics from the beggining.



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Extending the Power of Your Personal Cloud with Development Tools

## Tools for a Development Personal Cloud
October 26th, 2024
by Agus Rumayor

When building a personal cloud, the goal is not just storage or compute but creating a robust, versatile environment. For developers, this setup can include everything from managing web assets to container orchestration and IoT device control. Here’s how these tools fit together in a development-focused cloud.

### 1.1 Min.io for Web Asset Management
Min.io is a powerful open-source object storage tool, compatible with the S3 API, that allows for seamless management of web assets. With Min.io in your cloud, you can:

Store and serve static assets like images, videos, and files for web apps.
Scale storage efficiently, making it ideal for projects with expanding data needs.
Integrate with web frameworks through its S3 compatibility, simplifying data handling in your applications.
By handling web assets locally, you gain more control over data security and reduce reliance on external storage solutions.

### 1.2 Portainer for Container Management
Portainer brings simplicity to container management. With Docker and Kubernetes capabilities, Portainer’s visual interface makes it easy to:

Deploy and monitor containers, supporting rapid testing and iteration.
Manage permissions and access with role-based access control, essential for collaborative projects.
Scale applications across environments, allowing you to deploy apps or services with ease.
Portainer is perfect for quickly launching new containerized projects and managing them in a personal cloud setting without the complexity of a command-line-only interface.

### 1.3 Coder for Development Environments
Coder creates consistent, cloud-based development environments, freeing developers from machine constraints. With Coder, you can:

Set up isolated workspaces that replicate production environments, enabling reliable testing.
Scale environments dynamically based on the complexity of the project.
Collaborate easily, letting team members access the same development environment remotely.
Using Coder, you can turn your personal cloud into a reliable development hub, accessible from anywhere while maintaining security and control.

### 1.4 ThingsBoard for IoT Device Management
If IoT is part of your projects, ThingsBoard provides a versatile platform for device management. With ThingsBoard, your personal cloud can:

Monitor device data using a customizable dashboard for real-time insights.
Manage workflows and rules to automate responses to device data.
Securely interact with connected devices through protocols like MQTT, HTTP, and CoAP.
ThingsBoard’s visualization tools and device management capabilities make it ideal for any IoT-based projects or experiments within your personal cloud.

## Additional Tools for Efficiency and Cost-Savings
### 2.1 Storj for Leveraging Extra Storage and Cost Efficiency
While not directly a development tool, Storj adds value to a personal cloud by letting you rent out unused storage. It’s a decentralized storage network that offers:

Monetization of spare storage to offset cloud costs.
Economical storage options for large files, encrypted and distributed across multiple nodes.
Additional data redundancy, making it a secure backup option.
For those seeking to maximize efficiency, Storj provides a way to share resources and reduce the fixed costs associated with a personal cloud.

## Architecture in Action
Let’s look at a scenario where these tools come together:

Scenario: New Feature Development and Testing
Imagine you’re developing a new feature for an IoT application and need to test it across multiple services. The process might go like this:

Coder sets up a consistent environment, mirroring your production setup. You develop and test code, deploying the feature to a local container using Portainer for quick access and control.
ThingsBoard manages IoT device telemetry, helping monitor device interactions in real time.
Min.io stores all necessary assets, such as configuration files, images, or firmware for IoT devices.
Storj is employed as a backup for critical data from Min.io, providing redundancy and sharing storage costs across the network.

## Why This Setup?

These tools are all integrated within the multi-layered proxy architecture, ensuring secure, controlled access to each service. For more details on how the proxy architecture is structured, check out this post: [Multi-layered Proxy Architecture for my Personal Cloud](https://jagcoop.github.io/posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud/).

Security: By integrating only private and secure services, this setup gives full control over your data and applications. Scalability: Kubernetes and Docker provide flexibility to scale services, while Portainer and Coder simplify management. Cost-Effective: Tools like Storj help monetize spare storage, lowering overall costs compared to relying solely on public cloud services.

This setup transforms a personal cloud into a comprehensive development environment, built with control, flexibility, and efficiency in mind.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


    

November 11th, 2024
By Ruben Mevy

# Frustration in the Face of Improvement #

There always comes a time when we want to learn something or be better at some activity, and with it, a wave of feelings arises, both good and bad. It is at this point that the situation can play a trick on us and lead to frustration.

So, ** what is the famous frustration, how to avoid it, and how to cope with it in a healthy way? **

Frustration is a negative emotion that occurs when goals or objectives are not achieved. It is a natural response to the inability to get what we want, and it can generate feelings of disappointment, helplessness, anger, and despair.
This happens to most people who are dedicated to any creative field, such as music, programming, literature, etc. Unfortunately, frustration is a feeling that leads to failure and creative self-destruction, which is precisely what we do not want to suffer. But how could we "combat" this feeling of failure in the face of new challenges? Well, "No one is born knowing," and from this phrase, we will start to put aside the mental and physical obstacles that frustration imposes on us.

The first thing is to accept what we feel. Frustration is a sensation that we will inevitably experience when we learn something, as things will not always go as we expect the first time due to various factors, whether natural impediments or otherwise. I repeat, things will **NOT** always be in our favor.
Self-motivation is very important at this point because, just as in music and programming, we can find different paths to reach our goal. So, we must look for ways to overcome new challenges. There is always more than one way to do it.
And the most important thing of all is persistence and practice. Although this is the stage where frustration is most felt, there is no harm that does not bring some good. When learning something and after practicing and practicing, if you are not satisfied, you can always stop for a moment and take some time to clear your mind, relax your joints, or simply take a breather. You will see that when you try again, things will be better.
It is also necessary to find external support that can constructively criticize our work and give us an outside opinion. This helps a lot to see errors that we, as creatives, do not perceive. Be very patient because practice makes perfect. Nothing is instant or magical; it will take more or less time depending on how much effort we put into practicing whatever we are learning.

In conclusion, frustration is a natural emotion in the creative process. To overcome it, we must accept obstacles as opportunities for learning and improvement, be patient, and seek inspiration from new sources. Constant practice and self-reflection are key to advancing and improving.



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Becoming agile the agile way. Its not always like this.
By Pepe Hernandez. December 6th, 2024

## Klaus Leopold Advice. Become agile the agile way.
Klaus Leopold, the creator of Flight Levels, and Rethinking Agile, said that if you want to implement agility in on organization, the way you implement it must be agile too. If you are going to implement agile, and use all the knowledge areas, and all the processes from PMBoK something is wrong. You are sending mixed messages, as Donald Keough said in his book, the ten commandments of business failure. Your are trying to implement agile, by not being agile.

Note. Acting agile means using an iterative approach with short feedback loops, instead of developing detailed transformation plans.

The Agile way described in his last book "Flight Levels Architecture" points out a change management theory that goes together with the five steps to implement Flight Levels. Klaus said they are both sides of the same coin.

In order to implement agile you must work on the system design, and in the change design.

The systems design requires five steps:
1. Visualize the situation
2. Create focus
3. Establish agile interactions
4. Measure progress
5. Operate & Improve

On the other hand, the change design requires:
1. Clarify where you start from
2. Create focus for improvement
3. Build a guiding coalition
4. Engage People
5. **Apply and agile approach. Here lies the intro of this post.**


## A pragmatic approach to teach Project Management Book of Knowledge

I've been thinking a lot about it, cause I am delivering a class about Project Management based on the PMBoK (Project Management Book of Knowledge). i would have liked to use the Agile Approach only. But this is the first time I am giving this class, and we need to be compliant with the contract offered 
by the marketing area. How to offer the students a class to be compliant with the requirement, but at the same time guiding them to adopt agile practices? We found a contradiction, we can use TRIZ now.

## Using innovation principles to cope with this challenge
TRIZ separations principles can be applied to this contradiction.

- **Separation in Time**. So I am going to do what I used to do. Reducing the time to speak about it, and go agile the rest of the time. 
- **Coexistence of Factors**. In the class we are reviewing the processes, at the same time I am explain them alternative options for agile methods, and tools.

TRIZ not only have the separation principles, TRIZ have 40 principles for solving technical contradictions". **The principle number 13 is "The other way around"**. This principle change the action by asking. What will happen if you do de opposite. Using this approach you are going to the other extreme. You promote agile, then promote the opposite. You can find this advice in the Five Elements of Effective Thinking, in the first principle "Understand deeply simple things". The author suggest to "defend the opposite", as an example "if you are republican, go to a democrat event". I am an agile convinced today, I am offering a PMP class. By doing the opposite I am trying to understand better agile principles. One day I am a PMP Project Manager, and I explain the rationale of the approach to my students, and the following day I am and advocate of agile. Studying, and using PMP helps to understand better why agile, and rigid methods are equal, when is much better agile, of if they are the same in some things.

Neither Product Management, nor Agile are ends by themselves. They are both a mean to create, and deliver value for customers, collaborators, shareholders, and stakeholders in general. 
So I give my advice to students warning about becoming worshipers of a specific method. Let's the tool be the slave, not the master (said once Ellen Domb (https://the-trizjournal.com/about-commentator-ellen-domb/. I took three TRIZ workshops with here in 2010. I am in love with the method since that time in 2010).


ps1. See my review of the book, "The Five Elementos of Effective Thinking". https://novador.blogspot.com/2014/11/los-5-elementos-del-pensamiento-efectivo.html
 


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Home Manager strategies for symlink management

November 15th, 2024
by *Julio César*

We&rsquo;ve discussed before how Home Manager can be used for managing user level configuration, more specifically to manage the *&ldquo;dotfiles&rdquo;* on a linux based workstation, we discussed how Home Manager is a nice declarative alternative to plain symbolic links, a.k.a. &ldquo;*symlinks*&rdquo;. However, some times (hopefully just on a few occasions) it is necessary to have symlinks lying around, this was the case for my Emacs Doom configuration which for the moment I do not want to migrate to a Home Manager + Nix based setup since I&rsquo;d have to rebuild and switch my configuration every so often whenever I extend Emacs in any way - something that happens a lot.

My usual approach was to to install my Emacs Doom configuration into place like this:

```sh
ln -s /path/to/dotfiles/doom ~/.config/doom
```

However, having to manually create this symlink separately of activating my Home Manager configuration wasn&rsquo;t ideal, the bike shed needed new paint. It turns out it is possible to *declare* symbolic links in the Home Manager configuration, there are three approaches I could use, and these are outlined below.


# Using the `mkOutOfStoreSymlink` library function

This is the current approach I&rsquo;m using right now, and it looks like this:

```nix
{
  # some options ...

  home.file.doom =
    let
      flakeRoot = "${config.home.homeDirectory}/workspace/config/dotfiles";
    in
    {
      enable = true;
      source = config.lib.file.mkOutOfStoreSymlink "${flakeRoot}/doom";
      target = "${config.xdg.configHome}/doom";
    };

  # more options ...
}
```

We instruct Home Manager to allocate a file with the `home.file` option and declare a variable to the location of the dotfiles repo (a flake itself) which contains Emacs Doom configuration in a `doom/` sub-directory, then the target is declared using the `xdg.configHome` option which expands to something like `~/.config` on my system, therefore linking the configuration into place (in `~/.config/doom`).


# Using the `home.activation` option

Home Manager allow us to hook some actions while the Home Manager configuration is being activated, we declare such actions using the `home.activation` option, example:

```nix
{
  # some options ...

  doomActivationAction =
    let
      flakeRoot = "${config.home.homeDirectory}/workspace/config/dotfiles";
    in
      lib.hm.dag.entryAfter [ "writeBoundary" ] ''
        run ln -s $VERBOSE_ARG ${flakeRoot}/doom ${config.xdg.configHome}/doom
      '';

  # more options ...
}
```

This just calls `ln` within a script to create a link in the right location, `run` is a shell function made available by home-manager that handles the output stream correctly when the user asked for a verbose behavior, `$VERBOSE_ARG` just expands to `--verbose`.


# Declare a systemd bind mount unit

This one is a bit far fetched but it is so cool we&rsquo;re able to declare systemd units with Home Manager and that systemd provides &ldquo;bind mounts&rdquo; which can be used as an alternative to symlinks, i.e. make a directory (or a file system) available at some other location in our file system:

```nix
{
  # some options ...

  systemd.user.mount =
    let
      flakeRoot = "${config.home.homeDirectory}/workspace/config/dotfiles";
    in
    {
      emacs-doom-mount = {
        Unit = {
          Description = "Mount Emacs Doom configuration into place";
        };

        Install = {
          WantedBy = [ "default.target" ];
        };

        Mount = {
          What = "${flakeRoot}/doom";
          Where = "${config.xdg.configHome}/doom";
          Type = "none";
          Options = "bind";
        };
      };
    };

  # other options ...
}
```


# Conclusion

The only disadvantage to all these strategies is that we have to hard-code the path of the source, in this case the `flakeRoot` value, as there&rsquo;s no way to say &ldquo;give me the path to this (self) nix file&rdquo; because such questions are considered &ldquo;impure&rdquo;. This is possible to work around by using something like [flake-root](https://github.com/srid/flake-root) which I&rsquo;ve not used yet but it would still feel like a hack.

While we could try using something like `builtins.toPath ../../doom` (assuming our `doom` configuration is two levels up), it wouldn&rsquo;t be what we want even if it works, referring to &ldquo;the current path&rdquo; will resolve to a path within the `/nix/store` which will contain a copy of our Emacs Doom configuration, not the real one!.

> ℹ️ when using flakes the whole git repository is copied verbatim to the Nix store.

In any case, this only bothers me because the symlink I want to setup goes into my own flake configuration which makes things a bit circular, however, the premise of the post is that even symlinks are seen as &ldquo;resources&rdquo; in Home Manager and thus can be managed declaratively in our configuration.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# How to Hack Your Reading? Imitate Those with Good Habits
By Pepe Hernandez
November 10th, 2024

## How Not to Get a Good Book
Borrowing books from the library or buying from a bookstore is usually a bad idea. In the knowledge economy, there’s an overwhelming supply of books and topics. I reiterate, almost always, at least in my case, picking a random book off the shelf at Walmart or any bookstore is a poor strategy. Although sometimes you might stumble upon treasures or good deals. Personally, after 38 years, I’ve found a way to increase the number of books I read by following the advice of those who know better.

## Then, how to choose a book
So, How Do I Select Books That Contribute Most to My Growth? I’ve accumulated tips from a professional reader, and here’s a summary of the gems I’ve discovered by following these recommendations:

### Subscribe to Audible.com
This Amazon service offers a trial period for the first three months at $7. If you like the service, there are various plans. I’m subscribed to the one-credit-per-month plan, which is sufficient for me. Listening to one book per month guarantees at least 12 books a year! Plus, it helps you practice your English.

### Follow the masters, not the students

There are iconic figures who are reference points for specific areas of study. For example, in Software Engineering, The Mythical Man-Month is a must-read. If Brooks writes another book, software engineers should read it. In the case of the Theory of Constraints, books or people recommended by Goldratt are safe references for experts in the field.

Derek Sivers is a born entrepreneur and has a couple of TED talks that I really like. He maintains a list of the books he’s read—over 100 of them—with rankings from most to least liked. I’ve already read almost all his five-star books, and they’ve practically become my favorites too. From his list, I picked up The Five Elements of Effective Thinking.

Bill Gates has a cool habit: during his summer vacations, he takes a pile of books and reads them all in two weeks. I don’t know how many he reads, but in the past two years, he has shared a list of interesting books, which I’ve added to my resource pool for selecting my next read.

### Recommendations from Friends
- Alex recommended to me several books along the way, including The Paradox of Choice, How Education Works, and The Toyota Way to Lean Leadership, among others.
- If You Like a TED Talk, Get the Book. This is another tip from "El Viejo." For instance, books I’ve read based on TED talks include The Paradox of Choice and Brain Rules for Kids.
- A Key Question: What’s the Best Book a Programmer Should Read? The answer: Code Complete. Additionally, there’s a list of 100 books every programmer should read. Here’s the link. Similarly, you should ask this question for the profession and topic you’re pursuing, always listening to those with a solid reputation.
- “I don’t read literature because I want to understand the world.” You can enjoy literature through movies. Although a book is almost always better than a movie, it takes five to ten times longer to consume.

A final question. The Print or the Digital on Kindle or Audible Audiobooks
This depends on the book and how fast I want to finish it. If I want to finish it very quickly, I buy it in two or three formats. This allows me to read practically anywhere—while waiting for someone, commuting, or as a bedtime read. If I want to take my time and the narrative is engaging, the audiobook suffices. But if the book is excellent, it’s worth having in physical format as well. If the book I want to read isn’t available in audio, I’ll buy it in digital format.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Quick and Dirty Review, as an alternative to be aware and exposed to ideas of specific field.
By Pepe Hernandez. December 23th, 2024

I am working in my PhD. A pair of moths ago I was looking for information in the field of "Software Product Management", and "Artificial Intelligence". Alex suggested to me use QnDReviews. We had a very interesting conversation.
Right now, I did an exercise with a paper.
The conclusions of the teacher make sense: this is an exercise to be aware of the field very fast, and also, to be exposed to new ideas.
It is a useful exercise for someone looking for a topic to research, or need to knows fastly the state of the art.
If you do this, you will have a good context.

## What is an QnDReview
Ji Soo Yi is a academic research teacher.
He has an assignment for his students called the dirty research.
Students need to read 100 papers each in four minutes.
Students write their observations and follow with the next article in and xls document.
The observations need to be more precise than "this was a good paper".

## What is the goal of the QnDReview
The goal of this exercise is to be aware of how their field is changing, and be exposed to a new ideas.
 
This is the link where the technique is explained "QnDReview: read 100 CHI papers in 7 hours" 
https://dl.acm.org/doi/10.1145/2559206.2578884

In the same link there is a slideshow:
If you could read 3326 papers you would need between 1 or 2 hours per paper. If you read 8 hours per day, you will need between 416 to 832 hours. That is impossible.

https://www.slideshare.net/slideshow/qndreview-read-100-chi-papers-in-7-hours/38302070

## Conclusions about using it with his students in five years 
Half of students thing this exercise is boring. 
A quarter of students things is boring but useful.
And, the last quarter enjoy the exercise.

Here you have the thirty seconds intro to the technique. 
https://www.youtube.com/watch?v=5RmRNETY_OY

Alex found this because someone studying psychology tried the technique... You can see the exercise here https://www.scattered-thoughts.net/writing/qnd-review-of-ppig-1989-2015.

The psychology students spent several months trying to use the technique. Lastly, he could read 50 articles per day. But he thinks that instead of using a lot of time looking and filtering articles, he would select papers randomly and would finish in just a day. 

## Propose exercises
1. Reading 16 articles in two hours.
1. Read an article in 10 minutes.

### This is the proceddure
This is the receipt for the "Quick and Dirty Review QnDReview".

1. Set the chronometer to 5 minutes.
2. Review the abstract
3. Review the research question
4. Review the method
5. See all graphics
6. Go to the conclusions

Write your observations.
Go to the following article, and start the process again...

### The result for the sencond exercise: just one article in 10 minutes.

A quick exercise to determine what is the right journal to apply for a Systematic Literature Review on Software Product Management. 

I am looking in the MDPI webpage articles related to Artificial Intelligence, and Software Product Management.

I look for the terms "Software Product Management", and "Artificial Intelligence".
MDPI search located 25 articles.

From that articles, I choose those articles I choose

#### What is the inclusion criteria:
- Articles that relates to both search terms.
- Articles that include Software Engineering (a wider scope for Software Product Management) instead of SPM.

#### What is the exclusion criteria:
- All articles related to Project Management are discarded.
- The Potential of AI-Driven Assistants in Scaled Agile Software Development. Link: https://www.mdpi.com/2620418

#### Resume of the Article  
- Type of Article: Synthetic Knowledge Synthesis
- Techniques: Bibliometric mapping, and content analysis

#### Research Questions:
- What is the volume of the research on using AI in Software Engineering?
- What is the maturity status of the research?
- What are the volume and dynamics of the production of the research literature on AI use in software?
- How is the research geographically distributed
- Which information sources informing the scientific community are the most prolific?
- Which funding bodies sponsoring research on AI in software engineering are the most prolific?
- What are the most prolific research themes?

#### Figures, and description
- Figure 1. The dynamics of the research literature productivity.
- Figure 2. The research landscape of AI use in software engineering, keywords appearing in 20 or more publications are shown. Colors represent clusters.

#### Insights:
- It does not talk about Software Product Management, it includes Project Management.
- Is software development management, software product management? What are the differences.

#### Conclusions:
- There is just a search string. Researches run the search string in Scopus.
- There is a section for each theme.
- There is a table with the

#### Future work:
- Include non-peer-reviewed media such as preprints, and do it periodically.

Not so bad. I will work in the two hours exercise, and will link the experience in a new blogpost. Thanks Alex for your recommendations.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


     **How to learn any topic?**

October 29th, 2024
By Alejandro Garcia

> "I don't read a topic,
> I annihilate it"
>      -- Me, When feeling specially arrogant

> "I try to not give an opinion on a topic
> until I've read about it at least
> three books on the topic"
>      -- Me, When feeling specially arrogant


Call me old school.
But I think that dominating any topic of knowledge.
Comes to find the right books.

# How to find the right books?

So this is my algorithm to find the best books to read about any topic.

First I just search in amazon, or audible for a book on the topic.
Here I don't fret a lot. Almost any book with good reviews will do.
Then I read the book and pay attention to the **references**.

There is a surely a **reference** that stands above the others.
So the next book I read is this reference.
That is probably one of the canonical books on the field.

Then after reading the second book.
Then, I search for a 3rd book, but this is the most difficult one.
Because this most criticize something about the other two.

It must be a contrarian.

# Why does this method work?

## Because we learn a lot from little information

In the essay [Why you only need to test with five users](https://www.nngroup.com/articles/why-you-only-need-to-test-with-5-users/).
Jacobi Nielsen shows the learning curve of *usability tests*

![5 Users the Optimal Sample Size](./why-you-only-need-to-test-5-users-1.jpg)

This curve has many properties:

- Zero tested users there is zero learning.
- A single user your learning shoots up, and you already know 33% of the usability problems hidden in your design.
- With a second user you discover some new things, and some repeated things.
- By the third user you already know 65% of the hidden problems in your product.
- And with 5 users you are already discovered 80% of the problems.

And from that article we learn, that is better to 3 studies with 5 users each.
That a single study with 15 users.

Applying this to our current situation.
Just by reading that first random book, we are learning around 33% of what there is to learn about that topic.
Then the second book, the reference / canonical takes our knowledge to above 50% of what is there to know.
and The 3rd book, the **contrarian** takes our knowledge above 65%.

## Because we are at most 3 links from an important book.

And also from Networking Theory we know.
That if we take any random node in the network we are at most 3 steps from a highly influential node.

Which means, It doesn't matter which one is the first book we choose.
We will find the **Canonical** ones pretty fast.

For example, in this graph I searched for an obscure paper on *YooccLa* (Butler 2000)
And we can see that we are just one step away from a highly influential paper on ANTLR (Parr 1995)

![From an Obscure Paper to an Influential one](yooccla_to_antlr.png)

# What is the catch?

## It is difficult to find the contrarian book.

I find it difficult to find the contrarian book.
Because it is by definition an isolated node in the network of knowledge.
So I have to really try and find it.

The way I do this is searching for "Critique" or "in response to" and the name of the author of the canonical book.

Sometimes I'm lucky and the random book I start with is the contrarian!

And that way, I have saved my self a lot of work.
Because, normally the contrarian authors are extremely well informed of the deficiencies of the canonical approach in the topic.
And the expose the canon, and why it is wrong.
It is a great way to learn!

## It takes a lot of time.

Imagine if before expressing any opinion.
Humanity had to read at least 3 books on the topic.
Almost no body would be able to express their opinions...
Wait, what? ... are we sure that is bad thing?




<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Ikigai. A Japanese concept to evaluate  new challenges in education
By Pepe Hernández, November 21th, 2024

## The Public Health System service created a significant opportunity for low-cost health services in Mexico 
The public health system in Mexico has many inefficiencies. Each company that hires employees must contribute to the National Health Security System, allowing workers to access IMSS services. However, the service needs to be improved for all beneficiaries. Its quality has deteriorated over time and has increased due to public policies implemented during the López Obrador administration. Medicines and drugs are included in the public service. To book a medical appointment, individuals must physically visit the facility in the early morning, present their Social Security card, and line up until their turn occurs. Sometimes, the wait can last all day.

Several pharmacy chains, such as Dr. Simi, Farmacias del Ahorro, and Benavides, have identified an opportunity. These pharmacies have established foundations to provide low-cost medical consultations next to their branches. For approximately USD 2.50 (50 Mexican pesos), patients can access medical services with the option to give an additional tip to the doctor. Most medicines sold are generic, making them cheaper than those large pharmaceutical companies produce. This business model enables people to access essential healthcare services affordably. 

## A low-cost primary education service, the "Simi-school".
Given the success of this model, why not apply it to basic education? In Mexico, public education is another low-quality service. Private education, which is also available, is expensive. Why not establish something like a "Simi School," similar to Dr. Simi's model?

Alejandro Garcia came up with this idea. As usual, Alex shared his thoughts with us. Last week, He discussed the concept with Carlos Lara, the Chair of CIMAT, Zacatecas. He was enthusiastic about it. 

Alex agreed it was a good idea but believed it would be better suited for someone else to execute. Why?

## A Simi School and the Ikigai Framework
The Ikigai framework, a Japanese concept, evaluates purpose through four dimensions:
- What you love
- What the world needs
- What you are good at
- What you can be paid for

In the case of a "Simi School," Alex and his team realized they were not qualified for the "what you are good at" dimension. Their expertise lies in high school, higher education, and vocational training, not primary education.

As a result, Alex proposed a variation: they might not be able to create a "Simi School for primary education," but they could establish a "Simi School for Software Engineering postgraduate level."

## Ikigai: A Gradual Evaluation
While Ikigai is often seen as binary, it can also be understood as a gradient. For example:
- "Yes, I'll be paid for it, but only a little."
- "The world needs it, but not urgently."
- "I am good at it, but not excellent."
Visualizing Ikigai as a gradient allows for more nuanced decisions.

## Applying Ikigai to Alex's Passion
Alex loves education, creating programming languages, and discovering suitable paradigms. He's read extensively about successful programming language developers but noticed many, like those behind Elm or Eiffel, make little money. While Alex loves this work, is good at it, and sees its value, the world isn't willing to pay for it at scale.

Conversely, some pursuits fit all dimensions but lack meaning—for instance, high-frequency trading, which is lucrative, necessary, and skillful but serves no larger purpose.

## With our expertise, we can find another opportunity in education following the Simi-School idea?
Alex and Carlos identified that software engineering education is a potential area aligning with their expertise. Specifically, they considered:
- Master's programs focused on programming transitions and interdisciplinary approaches.
- A Master's Degree emphasizing programming paradigms, requiring students to write 100,000 lines of code (LOC) by graduation—a benchmark for strong beginners.

## We are already on the Sw Engineering Domain. Is it possible an interest conflict?
Carlos reassured Alex that there would be no conflict of interest if he continued teaching at his university while pursuing this venture. Inspired by the Escuela Libre de Derecho—a prestigious law school established by rejected UNAM professors—Alex envisioned creating a similar institution in software engineering. The CIMAT Software Engineering Degree is for full-time students, and they need to be software engineers, or at least have some experience in this area. The proposed Master's Degrees are for non-software engineers who want to become software engineers. And, for a very specialized software engineer who wants to write software. The CIMAT Software Engineering is focused on process improvement, robotics, and artificial intelligence.

## Feed for thought
After these rolling coaster of ideas, I have a pair of insights:
- I must reflect about the several things I am doing. The Ikigai is a good frame to think.
- A new idea can be evaluated under this framework. Then we can go ahead, or not.
- There is an opportunity for us in Software Engineering education. 


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Innovation Methods Graphical Comparison
November 14th, 2024
By Pepe Hernández

## Most known Innovation Methods
Recently I gave a pair of classes on line about Design Thinking. Design Thinking is the Designer approach for an innovation method. In order I discovered first TRIZ en 2010, TOC thinking process, Six Thinking Hats, Google Design Sprint, and lately Design Thinking. Along the way after discovering a new method a questions arises. Is there a better method? Is there an universal method? Which is the adequate criteria to compare them?

Design Thinking is method designed by IDEA, an innovation company that has clients like Apple, among others. At a first glance, Design thinking differentiatio from other for its strong user centric approach. On the other hand, TRIZ is no user centric. It starts with a technical contradiction or a phyisical contradiction. A technical contradiction means that when you try a solution in a problem you will obtain gains, but also cost and harms. Something improves, and something gets worse. A physical contradiction means that you need to obtain two different states of something. I want hot coffe (for drinking), and I want cold coffe, so I dont burn my hand.


## Innovation Methods Characteristics Definition
User centricity, definively is on aspect, but  are there other criteria that can help us to differentiate those methods. Yes these are some of basic characteristics determined for innovative methods:

**1. Focus on Problem Solving.** It measures how effectively the methodology identifies and addresses specific problems. High-scoring methods provide systematic approaches to solve complex issues.

**2. Encourages Creativity.** Assesses the degree to which the method fosters innovative and out-of-the-box thinking. High scores indicate methods that prioritize ideation and divergent thinking.

**3. Iterative Process.** It evaluates whether the methodology emphasizes repeated cycles of experimentation, learning, and refinement. Iterative processes improve solutions through continuous feedback.

**4. User-Centric.** It determines how much the methodology focuses on understanding and addressing user needs and feedback. Higher scores reflect direct user engagement.

**5. Structured Framework.** It indicates the presence of a clear and systematic approach to applying the methodology. High scores imply well-defined steps or tools.

**6. Emphasis on Rapid Prototyping.** It measures the method's ability to quickly develop and test prototypes to validate ideas or solutions. Essential for methods that prioritize speed in experimentation.

**7. Decision-Making Enhancement.** It reflects how well the methodology supports structured and informed decision-making. Higher scores mean improved clarity and reduced biases in group decisions.

**8. Root Cause Analysis.** Focuses on identifying the underlying causes of problems rather than addressing superficial symptoms. High-scoring methods delve deeply into system inefficiencies.

**9. Focus on Reducing Risk.** It evaluates the methodology’s effectiveness in mitigating risks through experimentation, validation, or optimization. Methods with high scores emphasize de-risking early and often.


## Comparision of the Innovation Methods against characteristics
With these criteria, I asked ChatGPT to compare all the methods, and assign a grade in each of them for each method.

![Innovation Methods Comparison Radar Diagram](radar.png)

In the Radar Diagram I you can differentiate between two grups. The tools created for the group with strong design background: Design Thinking, Google Sprint, and Lean Startup.
* User-centricity is a key component of thise group.
* An Emphasis on rapid prototyping to reduce uncertainty and validate your hyphotesis (definitively, a practical scientific approach)
* The iterative process, the lean-agile approach, is another big influence of this group.

The second group differentiate from the other for its more technical approach.
* TRIZ, and TOC are simmilar on Root Cause Analysis. I can say, that both try to understand the problem in a rationale way. Both of them foculs in atacking internal constrain to look for more ideal solutions.
* TRIZ and TOC Thinking Process excel in internal constraints optimization due to their structured approaches to identifying and resolving inefficiencies.

Note. Ideality is a principles used by TRIZ. Ideality is the sum of the benefits divided by the sum of the costs and harms. It serves to evaluate every state of a system to verify if a system after a certain change have more idelity versus the current system.

* In this second group TOC and six thinking provide principles, tools, and processes that enhance decision making.

## User Centricity vs Optimizations of System

The two dimmensionas that has the higher difference between those two groups are user-centricity, and root cause analysis. The root-cause analysis is related to reduce internal inefficiecies or constraints. So I asked CHATGPT to elaborate a two dimension diagram. First dimension specifies the Optimization of Internal Constraints, and the other axis the User-Centric approach.

![User-Centric vs High System's Diagram](two_dimmension.png)

This diagram is very clear. There are two types of innovation methods. Those centered on the technical aspects, and those centered on the user.

There is a special case. Six Thinkin Hats is graded low on both dimension. But, it is the first on decision making enhancement.


## Next release. Assigning a description to each scale point of each dimension
An improvement to this exercise could be to assing a description for each point of the scale for each dimension. It could be represented as follows as a first approach.

It can look like this:

**1. User-Centric Dimension.** This dimension measures how methodologies engage with users to understand their needs and behaviors:

|Score	|Description						|Example
|1.0	|Highest: Shadow users in their natural environment. 	|Ethnographic studies or contextual inquiries.
|0.8	|High: Focus groups. 					|Group discussions to gather collective insights.
|0.6	|Medium: Interviews. 					|One-on-one conversations with users.
|0.4	|Low: Questionnaires					|Standardized surveys or polls.
|0.2	|Lowest: Don’t talk to users				|No direct user input is considered.

**2. Encourages Creativity.** This dimension assesses the extent to which the method stimulates out-of-the-box thinking:

Score	Description	Example
1.0	Highest: Dedicated brainstorming sessions	Freely generating ideas without constraints.
0.8	High: Structured creative workshops	Using frameworks like SCAMPER or Six Hats.
0.6	Medium: Creative tools introduced selectively	Creativity supported in specific phases.
0.4	Low: Creativity emerges indirectly	Focus on incremental changes.
0.2	Lowest: Focus on predefined solutions	Minimal emphasis on innovation.
3. Iterative Process
How much the methodology relies on cycles of refinement and learning:

Score	Description	Example
1.0	Highest: Continuous, rapid iterations	Lean Startup with build-measure-learn cycles.
0.8	High: Frequent iterative cycles	Agile sprints or Design Sprint iterations.
0.6	Medium: Iterations between major milestones	Reviewing progress at significant stages.
0.4	Low: Limited iteration	Iterations primarily for corrections.
0.2	Lowest: No iteration	A linear, one-time process.
4. Structured Framework
This dimension evaluates how methodically the process is defined:

Score	Description	Example
1.0	Highest: Highly defined stages with clear steps	TOC Thinking Process, TRIZ.
0.8	High: Well-defined frameworks	Design Thinking, Design Sprint.
0.6	Medium: Semi-structured processes	Lean Startup with adaptive guidelines.
0.4	Low: Loose frameworks	Conceptual phases but little detail.
0.2	Lowest: No formal structure	Ad-hoc or improvised processes.
5. Root Cause Analysis
Measures the extent to which the method delves into the root causes of issues:

Score	Description	Example
1.0	Highest: Systematic analysis of core issues	TRIZ, TOC Thinking Process.
0.8	High: Structured problem-solving	Six Sigma tools like fishbone diagrams.
0.6	Medium: Focus on identifying key contributing factors	Lean Startup experimenting hypotheses.
0.4	Low: Superficial root cause exploration	Brief analysis but lacking depth.
0.2	Lowest: Symptom-focused approaches	No deep exploration of root causes.
6. Decision-Making Enhancement
How well the method improves decision-making quality:

Score	Description	Example
1.0	Highest: Multi-perspective decision framework	Six Thinking Hats explicitly enhances decision-making.
0.8	High: Decision support tools	Frameworks to balance pros and cons.
0.6	Medium: Improved decisions via structured approaches	Design Sprint or Lean Startup decisions.
0.4	Low: General decision-making improvements	Methods indirectly lead to better decisions.
0.2	Lowest: No explicit focus on decision-making	Primarily process-driven methodologies.
7. Focus on Problem Solving
Measures the extent to which the method solves immediate problems:

Score	Description	Example
1.0	Highest: Directly tackles and resolves problems	TOC Thinking Process and TRIZ.
0.8	High: Problem-solving as a core feature	Design Thinking problem identification.
0.6	Medium: Solves problems through iterations	Lean Startup solutions emerge from learning.
0.4	Low: Problem-solving secondary	Indirect through innovation or decision.
0.2	Lowest: Minimal problem-solving	Focused elsewhere, e.g., strategy.

## Conclusions
I have to review each of the descripction for the points of the scales, but its enough to understand in which, and why each method has that idea.

	This is not the perfect diagram, but as Geroge E. Box said "All models are wrong, but some are 	useful".

I hope this comparision could be useful for you.

For me is enought to be clear about the existence of two grupos (user centric group, and the optimiziations of inefficiencies group). A third group could be the decision enhancment group with TRIZ, TOC, and Six Thinking Hats.

Experts understand simple concepts deeply, that is a principle of High Effective Thinking.

These two diagrams clarify some of my thoughts, and allow me to share it with the community.

You don't need to have all the answers, you need to know how to ask.

Enjoy it.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# How to Innovate on the Water Scarcity Issue from Your Position?
By Pepe Hernández, December 24th 2024.

Water scarcity worldwide is critical. The United Nations website, in its section on global challenges, provides some alarming statistics worth mentioning:

2.2 billion people lack access to safely managed drinking water services. Among them, 771 million cannot access even basic drinking water services.
Improved water, sanitation, and hygiene conditions could prevent around 400,000 deaths annually from diarrheal diseases among children under five.
80% of wastewater returns to the ecosystem untreated or unreused (UN Water, 2018).
In Mexico, the situation is not much different. Mexico ranks as the fifth-highest consumer of water per capita in the world. Of the water consumed, 14% goes to human use, 76% to agriculture, 5% to thermoelectric plants, and 5% to industry, according to the national statistics and geography institute.

This crisis is further exacerbated by climate change and the intense heat and solar radiation experienced in 2024.

The Current Drought Situation in Mexico
The following is Mexico's Drought Monitor as of May 15, 2024. It clearly shows that very few areas of the country are drought-free (gray zones). The rest face varying degrees of drought.

Maroon indicates exceptional drought, and red indicates extreme drought.
A significant part of the territory in Sinaloa, Sonora, Chihuahua, and Durango is experiencing exceptional drought.
Similarly, San Luis Potosí, Veracruz, Puebla, and Guanajuato are also facing extreme conditions.
(Source: National Meteorological Service)

Recent events, such as the water scarcity crisis in Nuevo León in 2022, where residents and industries faced daily cuts, and potential water rationing in Mexico City, underscore the growing importance of Sustainable Water Management.

Learning from Global Leaders: Israel's Water Management
Following the TRIZ principle—"Why reinvent the wheel?"—we must ask: Has someone else in the world already solved this problem? The answer is yes. Israel is a global leader in this area.

Israel has achieved a remarkable feat: producing 20% more water than it consumes, despite its desert-dominated climate. If Israel succeeded, can we achieve the same? How did Israel become self-sufficient in water generation?

Here's a brief summary of Israel's water management journey:

1964: Israel began constructing a National Water Carrier, sourcing water from the Sea of Galilee.
1964: Israeli scientists invented drip irrigation, allowing less water to be allocated to crops. By 1965, 75% of crops were irrigated this way, although only natural freshwater sources were used.
Mid-1980s: 82% of the water supply was used for agriculture.
1985: Recycled water was incorporated into the National Water Carrier.
1986: 85% of recycled water was dedicated to agriculture.
1999-2015: Israel built five desalination plants.
With 273 km of Mediterranean coastline, these plants have a combined capacity of 597 million cubic meters annually. Two additional plants, with a combined capacity of 300 million cubic meters, are under construction.
The Sorek plant, operated by IDE Technologies, is Israel's most important desalination facility and employs reverse osmosis technology. IDE Technologies has over 4,000 desalination plants in 40 countries.
Cultural and Governmental Efforts
2009: The government launched a campaign featuring celebrities like supermodel Bar Refaeli, filmmakers, and athletes, promoting responsible water consumption. As a result, consumption dropped by 16%.
Over time, desalinated, recycled, and harvested water have diversified water sources. Excess desalinated water is now returned to the Sea of Galilee.
Efforts to protect and restore rivers and aquifers continue as part of their strategy.
Lessons for Mexico
A national vision for water sustainability and focused water management projects are essential. In the near future, water will become a matter of national security, as it is in Israel.

For vulnerable groups in Mexico, the stakes are even higher: approximately 95,000 children under five die annually from consuming contaminated water, and only 52% of the population receives daily access to potable water (Aristegui Noticias, 2019).

How Can We Help Vulnerable Communities?
The nonprofit organization Litro x Litro presented a proposal on Shark Tank: for every water book they sell, they donate one water book to vulnerable areas. This initiative is their way of addressing the issue, one small step at a time.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

The Founder. The history Ray Croc and McDonalds from the Intellectual Property Point of View
By Pepe Hernandez. February 6th, 2025.

# Introduction  

*"History is written by the victors."*  
— Winston Churchill  

On McDonald's Spanish website, under the "About Us" section, we can read:  
*"Our story begins with a man. In 1954, a man named Ray Kroc discovered a small burger restaurant in California and wrote the first page of our history..."*  

According to McDonald's, the story begins with Ray Kroc, despite the fact that it actually started 14 years earlier with the first restaurant owned by the McDonald brothers.  

---

## Summary of *The Founder*  

*The Founder* is a film based on true events, meaning it is an adaptation with a certain degree of creative interpretation by the authors. The movie narrates the story of Ray Kroc, a milkshake machine salesman struggling to make sales.  

When his company assigns him to deliver six machines to a single restaurant—the McDonald brothers' restaurant—he becomes curious about how a single location could need so many machines. There, he discovers the **Speedy System**, the innovative fast-food production method invented by the McDonald brothers.  

Ray proposes franchising the restaurant and, after multiple attempts and negotiations, convinces the brothers. As the chain expands, he realizes that despite the growing number of locations, the business is not as profitable as he desires. He attempts to cut costs by replacing vanilla ice cream with a powdered substitute, leading to conflicts with the McDonald brothers, as he had agreed not to alter internal operations.  

Kroc then seeks a loan to continue expanding and meets a financial advisor who advises him to focus on **real estate**. Ray establishes a real estate firm, effectively **bypassing** the McDonald brothers. This decision enables McDonald's to expand globally and become what it is today.  

With full control, Kroc negotiates the purchase of the entire franchise, including the **McDonald's brand**, for **$1.4 million per brother**—equivalent to **$10 million today**. The McDonald brothers become millionaires, but their original restaurant is left out of the deal. Meanwhile, the **McDonald's name and the golden arches design** become the property of Kroc’s newly established company.  

### Criticism of the Film  

One common critique of *The Founder* is that it portrays Ray Kroc as a manipulative businessman who **exploited** two small entrepreneurs and **took** their intellectual property.  

According to a Reddit user, Ray Kroc was the one responsible for making McDonald's a global brand, and he identified himself as the founder of the company.  

---

## Key Events in McDonald's Franchise Development  

| Year  | Event Description |
|-------|------------------|
| 1937  | The McDonald brothers start selling hot dogs as business partners. |
| 1940  | The first McDonald's restaurant opens—a barbecue and ribs joint. |
| 1948  | The McDonald brothers open their first burger and fast-food restaurant. |
| 1953  | The first McDonald's franchise opens in Phoenix, Arizona, under Neil Fox. Their direct supervision model limited scalability. |
| 1953  | Another location opens in Downey, California. |
| 1954  | Ray Kroc visits the McDonald brothers' restaurant. |
| 1955  | **McDonald's Systems, Inc.** is established to formalize the franchise model. The first Kroc-franchised restaurant opens in Des Plaines, Illinois. |
| 1956  | Kroc and Harry Sonnenborn develop a business model in which McDonald's owns the land of its restaurant locations—one of Kroc’s most significant strategic moves. |
| 1959  | Kroc becomes CEO of McDonald's. |
| 1961  | Kroc purchases McDonald's from the brothers for **$2.7 million** (around **$27.7 million today**). The brothers retain their original restaurant but must rename it **Big M**. Kroc opens a McDonald's right across from it, leading the McDonald brothers out of business within a decade. |
| 1962  | The **golden arches logo** and **Ronald McDonald** character debut. |
| 1965  | McDonald's goes public on the **New York Stock Exchange**. |
| 1967  | Kroc ousts Sonnenborn and becomes **CEO**. The first international franchise opens in **Canada**. |
| 1974  | The first **Ronald McDonald House** opens. |
| 1984  | Kroc dies in 1984. By this time, McDonald's has **7,500** franchises across **31 countries**, generating over **$8 billion** in annual sales. Kroc’s **personal fortune** exceeds **$600 million**. |

---

## Intellectual Property Identification and Analysis  

In **1961**, McDonald's key intellectual property assets included:  

1. **Trademarks** – The **McDonald's name**, the **golden arches design**, and the **jingle**.  
2. **Trade Secrets** – The **Speedy System**, the innovative production method created by the McDonald brothers.  
3. **Franchise Agreements** – The structured franchise model agreed upon between Kroc and the McDonald brothers.  

### Lack of Patents  

The McDonald brothers **could have patented** several of their innovations, as they modified and created new equipment to implement their system. However, since the **Speedy System** was **not patented**, there was no legal barrier preventing Kroc from **adopting and imposing** his own vision.  

### Trademarks and Branding  

The **McDonald's name** was recognized for evoking warmth and trust. The **golden arches**, originally conceived by the McDonald brothers in **1952**, later became the company's official logo when Kroc took over in **1961**. By **1968**, the logo had evolved into a design similar to today's version.  

---

## McDonald's Global Expansion  

The following table outlines the brand’s international growth:  

| Year  | Number of Franchises | Expansion Highlights |
|-------|---------------------|---------------------|
| 1955  | 1   | First **Kroc-model McDonald's** opens in Des Plaines, Illinois. |
| 1959  | 100 | Expansion reaches **East Coast states** in the U.S. |
| 1961  | 228 | Kroc **buys McDonald's** and continues national growth. |
| 1965  | 700 | First **international** franchise in **Canada**. |
| 1967  | 1,000 | McDonald's expands to **Puerto Rico, Canada, and beyond**. |
| 1970  | 1,600 | Rapid expansion in **Latin America and Europe**, including **Spain**. |
| 1978  | 10,000 | Major growth in **Asia, Europe, and Latin America**, including **Japan** and **Brazil**. |
| 1980  | 6,000 | Expansion into **Asia and Australia**. |
| 1990  | 11,800 | Entry into **Eastern Europe**, including **Russia**. |
| 2000  | 28,707 | Presence in over **119 countries**. |
| 2020  | 38,695 | Growth in **Africa and the Middle East**. |
| 2024  | 43,000 | Continued expansion worldwide. |

This table highlights key milestones in McDonald's global growth.  

---

## Study of the Franchise Model and Intellectual Property  

According to the **World Intellectual Property Organization (WIPO)**, franchises typically integrate multiple intellectual property elements, including **trademarks, trade secrets, patents, and business models**.  

McDonald's success was largely due to the **franchise model**, which combined:  

- The **Speedy System** for production.  
- The **design of buildings and logos**.  
- Standardized **operational processes**.  
- **Trademarks** and branding elements.  

The McDonald brothers **underestimated** the **global potential** of their brand. While Kroc’s **legal acquisition** of the brand was valid, its **ethical implications** remain debatable. However, as Steve Jobs once said:  

*"It's very difficult to connect the dots looking forward; it's easy to do it looking backward."*  

McDonald's became a **global brand** thanks to the **initial groundwork** laid by the McDonald brothers, Kroc’s **business acumen**, and his strategic acquisition of the **trademark** and **franchise system**. 


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# A Kanban Case Study in the Public Sector (Part I of N)

October 14th, 2024
By Pepe Hernandez

By the end of 2017, several Department of Education administrative units had unspent budgets, and the fiscal year was nearing its end. Given the success of the Self-Construction Program team, the Zacatecas Education Agency decided to allocate unspent resources from other programs to the self-construction program. Thanks to this budget, the team could double the number of requests attended, a significant achievement considering that the annual resources needed to be more to meet all the needs of public schools. In the following years, the same phenomenon happened. The self-construction program used remanent resources from other programs. The team was proud of their Service's impact on the Zacatecas's childhood.

It hasn't always been this way.

The Self-construction program was tripartite. The Education Agency of the State, the Municipal Governments, and School Parent Associations signed a legal agreement to participate in the program. The Education Agency provided materials and coordination through the Department of Self-Construction. The school parents' association provided social supervision. The municipal government provided labor. Some municipal governments signed an agreement and supported all the requests from schools with labor. Some of the work only needed the Parents' work and the materials provided by the Education Agency.

The team was small: the Service manager (and other services), the supervisor coordinator, three supervisors, and the documentation specialist. There was a lot of work in progress or WIP (the work started but still needed to be finished). They didn't have a way to visualize the WIP. All they knew was that they were busy all day. They had a commitment to their purpose, but they felt stuck. But the natural explanation of reality was that the acquisition area was blocking our work. As humans look for a rational explanation of reality. We don't believe that it's our fault. It's somebody else. In this case, the acquisitions area was responsible for delaying materials. However, this limiting belief prevented them from acting on what was within their control.

Stephen Covey, author of The Seven Habits of Highly Effective People, states that **"when we think the problem is outside, that thought is the problem."** The team of the Self-Construction Program believed that the Department of acquisitions needed to be improved. However, this limiting belief prevented them from acting on what was within their control.

The introduction of a physical Kanban board revealed the partial truth. Of the 84 tickets in the "Preparing for Acquisition" column, only 37% of the work was pending acquisitions. The remaining 63%, or 139 tickets, had already passed through this phase and were in stages of building, finishing, and closing. With this new visibility, the team prioritized finishing those 139 tickets, freeing up space for new projects after the acquisitions area could do its job (acquiring materials from vendors).

The team focused on following the Work In Progress in the columns ahead of the Acquisition in Progress step. The team needed to be more stable and was able to focus their attention on facilitating communication with stakeholders. The supervisor knew which requests required supervision, and the coordination area could make calls to update the state of the work. The team could detect external blockers, like delayed work due to unprovided municipal labor. Requests started to finish more frequently. The WIP decreased, and it was time to ask for help in the acquisition area.

The head of acquisitions committed to attending weekly meetings to review the cases "blocked" by the area. In the first meeting, it became clear that his Department was a bottleneck. The team had labeled tickets with green stickers after each month, tickets had been spent in the acquisition process, and some had been stuck for six months or more, especially in public bidding cases. With this level of transparency, the acquisition area was aware of their importance in the process. They took action, and several tickets began to move. The head of the Department recognized the impact that waiting times had on project delivery.

There are several things I learned with this Kanban initiative, like:
- Establishing gradually Kanban Core Practices
- Limiting the Work in Progress
- Finding the criteria for the work done Determining policies of the system
- Using metrics to manage a significant volume of work (Core Practice 3. Managing Flow)
- One Kanban Board to rule all the requests
- The Physical Kanban Board evolution
- From a physical Kanban Board System to a Digital Kanban System

...

I will talk about some of what I learned next week.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
# How I fell in love with Serious Games for teaching Kanban (PART I)
October 28th, 2024
by *Pepe Hernandez*

## My first contact with Serious games

	"First experience, then theory." - Mike Burrows.  

Mike Burrows, author of Kanban from the Inside and Agendashift, said, "First experience, then theory." This is a powerful pedagogical principle.

We played the Get Kanban Game when I attended my first workshop with David Anderson from Kanban University in 2015. It was very engaging, and I also understood the game's mechanics. You can discover bottlenecks and identify several key concepts of the Kanban Method—everything in less than four hours. 

The Get Kanban Game is a serious game simulation created by Rusell Healy in 2011. Russel is a well-known Kanban specialist. He designed the Get Kanban game in the early days of Kanban and was awarded as a great contributor to the knowledge of the Kanban community. He was recently recognized as a Distinguished Kanban Fellow of Kanban University. 

You can buy the game at https://getkanban.com/.
- There is a free version of the game that you can print and play whenever you want. 
- There is a free online game version where you can play individually. You can play several times and change your strategy for better economic results. http://www.kanbanboardgame.com/ 

Note. There is a very different form of playing the game. That is for advanced players. "Improving GetKanban Scoreboards for Deeper Learning from the Game | by Alexei Zheglov | Medium." 

Since that firs time with Get Kanban Game, I fell in love with the general concept of **serious games**. The Get Kanban Game is a simulation embedded in a serious game. Simulations reproduce real-life settings to help players better understand the world (Gilbert & Troitzshn, 2005). Meanwhile, serious games focus on teaching players information or practicing specific skills while retaining the fun of the game. 

I used several times Get Kanban game. Every game, you learned something new. When I was preparing the first certification training course as an Accredited Kanban Trainer, I kept looking for more ideas about introducing Kanban to people. The GetKanban game is excellent for software development teams, software product teams, product managers, project managers, and Scrum Masters. However, it is not intuitive for other professionals. I've worked with public servants for a long time, so I needed more straightforward ways to introduce Kanban. I found a book that I enjoyed very much "Practical Kanban", writen by Klaus Leopold. There, I found simulations about building paper boats. While reading, I was sure that was a more straightforward, shorter way to introduce Kanban to people. 

I currently use GetKanban Game for the Kanban Systems Desing, but when I want to introduce the topic to people from different industries I use the Paper Boat Flow Simulation.


## The Learning Pyramid. A wrong and valuable model.
The Learning Pyramid said that the worst way to learn a topic is through a traditional lecture. On the other extreme, the best way to learn is by teaching. The second better way is through simulations or hands-on activities. The model makes sense, and supports the confirmation bias for me. I can learn better with games. Therefore, I started to look serious games and simulations for all my classes and workshops.

Unfortunately, the learning pyramid has proven to be ineffective. It was first proposed in a 1954 book called Audio-Visual Methods in Teaching, which the National Training Laboratories Institute developed. Empirically, I knew simulations were engaging, but learning things was not very effective. The model was wrong, but it was useful. When I use games and simulations, students engage with the topics. Even then, they could barely remember the key concepts. Nevertheles, that interest motivates them to give the method, principles, values, and practices a chance, and to be open for change. So, serious game are motivating, and engaging, but not effective for learning.

	"All models are wrong. But some are useful". - George E. Box.

In the thesis "A guide development for teaching Lean Startup using serious games," Ceballos, in 2021, created an instrument to evaluate learning from fundamental concepts of Lean Startup. The identification and comprehension of key concepts were very positive. Before introducing this tool, the questionnaire was only applied at the end of a series of plays, and the results were poor. Why did the introduction of a questionnaire before the serious game improve the learning results of the exercise?

## The right way to introduce serious games is to use proven methods, predict results, use spaced repetition, and predict results.

In his book, Small Teaching, James Lang remarks on the necessity of using the muscle of memory. When someone, even yourself, asks to remember something, you have more probability of remembering it. For example, James Lang attended a Starbucks for six months to buy frozen green tea. The same barista received the order day to day. When Lang asked what he would want, the barist could remember. But, the next day, the barista knew he wanted a frozen green tea. She could remember James, only when he ask her for his beverage.

The same principle was used for Ceballos in 2021. He made an initial questionnaire; it didn't matter what the participants answered. Some of them knew the topic, but not very well. But in the end, and during the process, they knew what answer they must look for during the game. This is a practical use of the prediction principle recommended by Lang in his book. Participants of a simulations, are aware of some specific questions, and while the evaluation happens students are answering the questions. As a side note, other valuable principles and practices are suggested in the Small Teaching book, like the interleaving principle (coming back to a specific knowledge) and spaced repetition practices, for example. This will be a topic for the following pòst. 

One of the things I like very much about Kanban training is the inclusion of good teaching practices, such as serious games, Case-Based Learning, and "Teaching from the Back of the Room," among others. This material would also be helpful for a future blog post.

Meanwhile we will be coming back to the Paper Boat Simulation workflow. How do you plan, how you execute, and how you close the simulation? We will answer the questions in the following blogpost.


-------

ps. I realized we have a lot of capital in serious games.
- We have played the GetKanban Game more than a thousand times
- The same for Featureban and Paper Boat Simulation
- We have several sources of collections of Lean-Kanban Games and Simulations.
-- Kirill Krimov. https://kirillklimov.com/kanban-games/
-- Full metal agilist. https://fullmetalagilist.wordpress.com/2020/04/08/simulaciones-kanban-a-distancia/
- We have three Master's Thesis about Serious Games (Kanban, Lean Startup, and Playing Lean).
- We have sold workshops for college teachers on using Serious Games.

Why is that? We are constantly looking for better ways to teach and learn.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">

# Karina La Humana
November 8th, 2024
by *Karina Chaires*


In today’s world, increasingly digital and virtualized, it’s easy to lose touch with our human essence. We find ourselves caught in a routine of screens and notifications, where real moments of connection are often overshadowed by the constant immediacy of digital life. However, there are moments that bring us back to our humanity, reminding us of the beauty of the tangible and the natural—like a breath of fresh air that reconnects us with who we truly are.

Not long ago, while working in front of a beautiful sunset in Argentina&rsquo;s Patagonia, I felt a deep sense of gratitude for the privilege of experiencing such a moment. This connection, so intimate and pure with nature, reminded me of the importance of preserving these physical spaces in a world that is increasingly immersed in the virtual. We are beginning to lose our sense of the space in which our lives unfold, without clearly distinguishing between what is real and what is digital. For me, without a doubt, physical places and moments will always hold the most value.

This reflection on the importance of the physical goes beyond landscapes; it also extends to our interactions and human connections. A few months ago, I had the opportunity to teach a programming course in Buenos Aires, Argentina. There, I met passionate people who are part of programming communities and local cooperatives. These conversations, which went beyond technical aspects and became human encounters, were enriched by sharing barbecues, walks, and ice cream. These moments, so simple yet so full of life, reminded me that nothing can replace the power of a face-to-face conversation. No technology can emulate the warmth of a shared smile, the tone of spontaneous laughter, or the feeling of presence.

It’s true that time is a resource we increasingly value, and we seek to optimize it to do more in less time. Virtual meetings and digital tools help us save time, but, paradoxically, this time-saving is distancing us from real moments of connection.

This is why I invite everyone to pause now and then, to disconnect from the
virtual and immerse themselves in the world around us. To share a face-to-face
conversation over a good cup of coffee, or simply go for a walk and breathe.
These moments of connection remind us of our essence and bring us back to our
humanity. In a world quickly moving toward the digital, perhaps the most
valuable thing we can do is rediscover the richness of the physical, of the
human, and give it the place it deserves in our lives.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Manage complexity behind simple interfaces

October 3rd, 2024
by *Julio César*

This is a follow up to the first post on [Understanding complexity in Software Systems](https://jagcoop.github.io/posts/Understanding_complexity_in_software_systems/) where we mentioned that a good software design is the one that reduces complexity of the system; complexity being anything that makes the system hard to understand and therefore modify.

In general, we can refer to the components of a system as &ldquo;*modules*&rdquo; and we can categorize them in mainly two groups, deep modules and shallow modules. The distinction comes mainly, from the size of the module interface and how well does it hide irrelevant details for most users of the module behind a properly designed interface. The reason on why this is of importance comes after the realization that complexity - while it can take many forms - the one area where it tends to creep-in is at the boundaries of modules, that is, at the interfaces. This is a key insight for software developers to grok - master the interfaces and keep complexity at bay.

To better understand what we mean by interfaces, recall that a software system is primarily an amalgamation of components, and for this to work every component in the system must expose some kind of interface, this is what tells users (and other modules) how are they supposed to use the &ldquo;thing&rdquo;, let it be a function, a method, a class, a package, a service, or a system on its own; all of these *objects* expose interfaces so that consumers know how to consume them.

Now, bringing it back to the categorization of modules, *deep modules* are the ones that hide a lot of complexity behind a simple interface so that users aren&rsquo;t bothered with understanding or even knowing about such complexities. A real-world example of a good deep module is the Linux I/O subsystem, there, users need only to know of about five system calls to do I/O interaction, mainly with files; programmers are often able to get away with just four of them, `open()`, `read()`, `write()` and `close()` (`lseek()` is the fifth one in case you were wondering). Behind these system calls there is a lot of complexity hidden that manages permissions, entries on a virtual file system, storage devices, memory mapping, and more, all of which is invisible to users.

In contrast to deep modules there are *shallow modules*, these are components of a system in which the interface leaks a lot of information about the implementation details of the thing, or worse, modules where the interface ends up being more verbose than the implementation of the module it self. Such small components shouldn&rsquo;t even exist, specially if used just in a couple of places through the codebase.

The information exposed by the interface of a module should be as small as posible without the need to make users understand the implementation of the module. This is the basis of the information hiding principle - an idea that has been preached before in other areas as well, &ldquo;the principle of the least information&rdquo;, &ldquo;don&rsquo;t make me think&rdquo;, etc.

In short, having simple interfaces is the secret sauce behind modular software, focus on defining small and simple interfaces and strive for deep modules that hide a lot of information users need not to care about; even better if we can still expose advanced functionality to power users through a different interface for those who need *more* out of the module, coming back to the  Linux I/O subsystem example - while rarely used - `lseek()` provides tighter control when reading files that some users might care about, specially the ones seeking to achieve higher performance or highly optimized programs.

In conclusion, by following these principles we will then make composition of modules on a system easier, just as we would like our jobs to be.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Reimagining IT Talent Development in Mexico: Innovative Alternatives to Traditional Training Models
By Alejandro Garcia and Pepe Hernandez November 22th, 2024

## Is there a human capital problem among software engineers in Mexico?
The first step to solving a problem is acknowledging it, so let's begin by asking: Is there a human capital problem in Mexico? Intuitively, the answer is yes, but let's dig deeper. As part of their projects at CIMAT, the authors interviewed 18 software entrepreneurs from the state of Zacatecas, and here are some reflections from their experiences:
- Only one of every 25 interviewees is worth teaching how to program (I.G., Tecnologías Dexa). In the case of Quarksoft, it's 30 to 1 (P.B., QuarkSoft).
- "I certified 45 developers in .Net, then I sent them for an exam to see if we could be an IT provider for a larger company. None passed the exam" (R.E., TopService).
- "From the moment of hiring, a recruit needs supervision for a year to start producing results" (R.C., ZacSoft).
- "The productivity and quality of a company's products and services are associated with the staff they hire" (F.C., Softlogik).
- "… there are no IT recruitment specialists either, so each company solves this problem their way" (P.B., Quarksoft).
- "There are fields like Community Manager and Social Media Specialist where there are simply no trained people in the market" (E.C., WSI).

## What is the problem?
Realizing the poor quality of graduates, companies have created or proposed alternative mechanisms to retrain them. At Quarksoft, they designed a six-month BootCamp to train engineers in technologies and quality models (P.B., Quarksoft). The Mexico First model aims to certify the use of technologies and quality models (A.R., Ministry of Economic Development).
- "Engineers graduating from public and private universities have no real experience in project development" (F.C., Softlogik).
- "We, as entrepreneurs, want to teach and influence the redesign of university curricula, in addition to having greater ties to improve the quality of graduates" (R.C., ZacSoft).

The need for more trained human resources is not exclusive to Zacatecas or Mexico; it occurs worldwide (Pankaj, 2010). Now, this is not a problem of the quantity of trained individuals, but a problem of quality. Our interviews also revealed that, according to the entrepreneurs' experience, recruiting a person takes between 25 and 35 interviews.

So now the problem transforms: How can we develop quality IT professionals in Mexico so that they can become productive and independent as quickly as possible in the companies that hire them?

## What are some solutions found in other countries
The situation of the shortage and low quality of IT professionals is not exclusive to Mexico, so it is worth considering how other countries addressed the problem:

### An ex professo University inside the Company: Zoho
Zoho is a Software as a Service (SaaS) company from India founded by Sridhar Vembu. Mr. Vembu faced the same issues as other graduates from Indian universities who were not prepared to develop professionally. Vembu decided to start with the principle that university graduates were unprepared for work, saying: "In fact, assuming that universities don't train is liberating because then we keep our expectations low and our recruitment and training systems are tailored to this reality."

So, Zoho established an internal training program within the company. They hired high school graduates who, due to economic reasons, were not planning to attend university and enrolled them in their training program, Zoho University.

The employees remain at Zoho University for two years, after which they become full-time employees. According to their internal evaluations, Zoho University graduates have the same skills as university graduates. Currently, 10% of Zoho's full-time employees are graduates of Zoho University.

Unlike Mexico, companies do not have schools to provide them with human capital and the specific competencies required to develop their products and services.

### Micro-schools in USA
Another case is micro-schools. These are high-quality institutions with reasonable tuition, small groups, and modest facilities. The goal of a micro-school is to train outstanding professionals in a single field at a reasonable cost, professionals comparable to the best schools in the US. Examples include the Magdalen College of Liberal Arts in Warner, New Hampshire, Shimer College of Literature, and Sterling College of Environmental Sciences, whose graduates compete in quality with graduates from prestigious US universities like Harvard.

The operational model of micro-schools requires specialists in a particular field, few students, and low administrative costs. Teachers themselves can perform administrative roles. In micro-schools, the student-to-teacher ratio is between 6:1 and 10:1. The cost is approximately $10,000 USD per year, far below the $50,000 USD that tuition can reach at other private universities.

Unlike the public and private universities in Mexico, the approach of micro-schools contrasts: We have generalists vs. specialists, large groups vs. small groups, and high tuition for prestigious universities versus the alternative of reasonable tuition but with even larger groups. As for facilities, the costs associated with building and maintaining most private and public universities are high.

## Studio Schools in the UK
Studio schools in the UK are another interesting case. Their primary goal is to keep high school students engaged in their education. Faced with this, they asked themselves: What would a high school look like where students wanted to be instead of trying to escape? Their proposal is the studio schools. These are high schools with at most 175 students, where the entire school focuses on a single theme. In some schools, the focus is multimedia; in others, it's sustainable development and information systems. To highlight, 80% of the subjects are evaluated based on real projects.

Studio Schools began in 2009 with two schools, grew to 10 in 2011, and by 2012, 35 were expected.

### The Conversion Program in the "Universidad Regiomontana", Mexico
On the other hand, in Mexico, I.G., now at Sygnus, a Monterrey-based company, shared that the quality of graduates has improved in recent years in Monterrey due to a conversion program at the Universidad Regiomontana, where students develop real projects in a scheme created at the university itself.

## Characteristics of a Mexican Micro-school
Based on the previous cases, we wonder how a Mexican micro school could develop talent in the software development field. We identified the following characteristics:
- Super-focused on a single topic, e.g., "Software Development."
- High mentor-to-student density, i.e., one mentor for every 7-10 students.
- Mentors are specialists in software development with at least 10 years of experience.
- Mentoring through pair programming, where students program with either a mentor or another student.
- Practice, practice, practice. That is, students participate in real projects.
- Accessible costs for both students and companies.

Thus, JagAcademy's proposal emerges: "It's a new program for software developers. Where practice, mentoring, teamwork, and real work take precedence over theory" (http://jagacademy.github.com/).

## Who is gonna pay the tuition in this new micro-school?
All the interviewed entrepreneurs agreed that an initiative like the one proposed at JagAcademy is necessary to develop talent. However, they also agreed on the main challenge for applying this model in Mexico: "self-sustainability." When asked directly whether they would pay university graduates to take part in the proposed program in the micro-school model, the majority of entrepreneurs answered negatively.
Some of the reasons given by entrepreneurs are:
- "Who guarantees that someone who takes the program will stay with me?" (R.E., TopService).
- "I don't have a budget for training" (P.B., Quarksoft).
- "The government needs to support companies in these initiatives" (R.C., ZacSoft).
- "It could be, but there should be tax incentives to invest in these programs" (F.C. , Softlogik).

Regarding JagAcademy's economic sustainability, we surveyed 40 engineering students or recent graduates to analyze their interest in the plan and the amount of tuition they could cover themselves. We concluded that the monthly payment could be up to 1,000 pesos per student (today it is almost 1800 for the inflation factor). However, they expressed interest in participating in such programs.

## Conclussions
Based on the authors' experience interviewing software industry entrepreneurs and studying innovative educational models abroad, we can conclude that:
- Micro schools are a viable alternative to developing human capital in the IT field.
- Some entrepreneurs have tried to address this need with their training workshops, like the BootCamp at QuarkSoft or the model at Universidad Regiomontana.
- Both entrepreneurs and students are interested in participating in a micro-school model.
- The main constraint for this type of model is that specialists with 10 years of experience must be willing or intending to participate in training projects.
- In other countries, such as the US, India, and the UK, this model has worked and is sustainable, given the cultural characteristics of those regions.

However, establishing such a model faces the following challenges:
- Financial sustainability. Mentors with 10 years of experience in software development charge higher salaries than what academia can offer.
- Entrepreneurs are not willing to subsidize students due to other risks.
- Recently graduated students need more resources to pay for such a scheme.
- The opportunity to increase collaboration between academia and industry goes beyond the current state of the people involved in the IT ecosystem, and its solution is not found in current approaches. 

As Einstein said: "We cannot solve a problem at the same level of thinking that created it." Therefore, innovative solutions need to be created. Micro schools, studio schools, and company-owned development centers are real alternatives for training IT personnel in Mexico, with the proper contextualization.

## References
- Clúster TI Zacatecas (March, 2011). Interviews with IT sector entrepreneurs from the Zacatecas IT Cluster. Retrieved September 12, 2012, from http://jagacademy.blogspot.mx/search/label/Validaci%C3%B3n%20de%20clientes
- Mishra, Pankaj (December 9, 2010). Local Talent Global Products. Retrieved September 10, 2011, from http://epaper.timesofindia.com/Repository/ml.asp?Ref=RVRCRy8yMDEwLzEyLzA5I0FyMDA0MDA=
- Schalin, Jay (October 31, 2009). Size matters. Retrieved September 12, 2012, from http://www.popecenter.org/commentaries/article.html?id=2253
- Ted (July 2011). Geoff Mulgan: A short intro to the Studio School. Retrieved September 17, 2011, from http://www.ted.com/talks/geoff_mulgan_a_short_intro_to_the_studio_school.html
- Vembu, Sridhar (June 2008). How We Recruit – On Formal Credentials vs. Experience-based Education. Retrieved September 12, 2012, from https://www.zoho.com/general/blog/how-we-recruit-on-formal-credentials-vs-experience-based-education.html

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

More about Zettlekasten
By Pepe Hernandez. January 26th, 2025.

The author of Zettlekasten is Niklas Luhmann (+70 books, 400 academic articles).His Zettlekaste contained over 90,000 ideas. Very good. "Even after his deaths, his ideas were combined to write MORE BOOKS!!"

Zettelkasten means "slip box" of "box of cards".
Each slip or card represent a SINGLE, ATOMIC IDEA that makes sense by ITSELF, and also in combination with other ideas.

Zettlekasten as a Workflow

1. Fleeting Notes
2. Literature Notes
3. Permanent Notes
4. Index Notes
5. Keyword notes

How to take Fleeting Notes in Zettelkasten
Where to write it: a physical notebook.

Fleeting notes from a book
Criteria:
You want to remember the idea permanently.
You want to use the idea in your work

Method:
Write the reference of the book at the top (author, year, name, publisher)
Write all the notes that are compliant with the criteria in consecutive numbers.

Example:
	HOW TO LAERN ANYTHING
	Kaufman, J. (2014). The irst 20 Hours: How to Learnd 	Anythig... Fast. United Stats Publishing Group.
	...
	11 10,000 HOURS TO EXPERT (Ref to Malcom Gladwell's 	2008 Outlier book).
	...

## At the end write a Literature Note.
Choose among your fleeting notes.
Write a paragraph for the ideas selected.
Criteria:
Write in in YOUR OWN WORDS.
Write it in such away that if you read it 10 years later it would MAKE SENSE BYITSELF.
One idea per note.
If you need to define a term for the idea/concept to make sense, CREATE A DEFINITION card and link it.
Include the complete reference for the source you got the idea form.
Include relevant situation.

Example:
Niklas Luhman was a german sociologist who published over 70 books and 400 academic articles (Ahrens, 2017, pp.30). Luhman credited his achievements to his Zettelkasten, which contained over 90,000 ideas that helped him develop topics by knitting together ideas into a cohesive whole. His books wrote themselves, idea by idea (even after his death, his ideas could be combined to publish more books on his behalf).

## Permanent notes
Literature notes ONLY HAVE A CONNECTION with its source (the book, etc.)
Permanente notes are written in the context of YOUR IDEAS AND INTERSTS.
Literature notes must contain a SINGLE IDEA on each page.
The moment you BIND TWO IDEAS they lose the ability to insert ne ideas between them.

## How to connect permanent notes to other permanent notes
- Chronologically.
Example: A note which contradicts findings in a note that contains a fact, study, opinion.
- A bridge note
Your explanation of why those notes seems related to you.
- Topic index.
This is a note which contains links of ideas  that are directly relevant to your topic.
- Index Notes.
An index note represent a cluster of related permanent notes.

## References
https://medium.com/@fairylights_io/the-zettelkasten-method-examples-to-help-you-get-started-8f8a44fa9ae6
<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Moving to DeepSeek
Jan 30th, 2025
by *Agus Rumayor*

I’ve been using AI writing tools like ChatGPT and Gemini to refine my posts—adding context, restructuring ideas, and making content more engaging. But I’ve always dreamed of running a large LLM model on my SBCs (without waiting 5 seconds for every token!). DeepSeek, being open-source, and more efficient is a big step in that direction.

So, for this little experiment, I asked DeepSeek why I should switch from ChatGPT and ChatGPT why I should stay. Here's what they had to say.

## DeepSeek response:

If you’re a tech enthusiast who loves experimenting with AI tools, chances are you’ve already used ChatGPT for writing. It’s a fantastic tool, no doubt—helping with everything from brainstorming ideas to polishing essays. But if you’re curious about trying something new, you might be wondering: What’s the deal with DeepSeek-V3? How is it different, and what can it offer me as a writer? Let’s break it down.

### 1. A Fresh Perspective (and Sometimes, That’s All You Need)
If you’ve been using ChatGPT for a while, you’ve probably noticed its quirks—its tendency to lean toward certain phrasing, its occasional verbosity, or its love for starting sentences with “Certainly!” While these aren’t dealbreakers, sometimes you just need a fresh voice to shake things up. That’s where DeepSeek-V3 comes in.

DeepSeek-V3 is designed to provide a slightly different tone and style. It’s still conversational and helpful, but it might phrase things in a way that feels new or more aligned with your needs. Think of it like switching from your favorite coffee shop to a new one—it’s still coffee, but the vibe is different, and that can be refreshing.

### 2. Tailored for Tech Enthusiasts
One of the coolest things about DeepSeek-V3 is how it’s built with tech enthusiasts in mind. Whether you’re drafting a blog post about the latest AI trends, writing a tutorial, or even brainstorming ideas for a personal project, DeepSeek-V3 has a knack for understanding the tech landscape. It’s like having a writing buddy who gets what you’re talking about, whether it’s machine learning, coding, or the ethics of AI.

For example, if you’re explaining a complex concept like neural networks, DeepSeek-V3 can help you break it down in a way that’s both accurate and accessible—no PhD required. It’s great at balancing technical depth with readability, which is a win-win for your audience.

### 3. Less “Fluff,” More Substance
Let’s be real: sometimes ChatGPT can be a little… wordy. It’s great at generating content, but it doesn’t always get to the point as quickly as you’d like. DeepSeek-V3, on the other hand, tends to be more concise. It’s still thorough, but it’s less likely to pad your writing with unnecessary filler. This is especially helpful if you’re working on something with a tight word count or if you just want to keep things snappy.

### 4. A Collaborative Writing Partner
One of the biggest strengths of DeepSeek-V3 is its ability to adapt to your writing style. If you’re someone who likes to iterate and refine your work, DeepSeek-V3 can be a great collaborator. It’s designed to build on your ideas, suggest improvements, and help you fine-tune your message. Whether you’re drafting a LinkedIn post, a technical article, or even a personal journal entry, it’s like having a co-writer who’s always ready to pitch in.

### 5. The Learning Curve? Practically None
If you’re already familiar with ChatGPT, you’ll feel right at home with DeepSeek-V3. The interface and functionality are similar, so there’s no steep learning curve. You can jump in and start using it right away. The main difference is in the output—DeepSeek-V3 might surprise you with its unique phrasing or approach to your prompts.

### 6. Why Not Use Both?
Here’s the thing: you don’t have to choose. Both ChatGPT and DeepSeek-V3 have their strengths, and using them together can give you the best of both worlds. For instance, you could use ChatGPT to generate a rough draft and then bring it to DeepSeek-V3 for refinement and a fresh perspective. It’s like having two writing assistants instead of one.

### Final Thoughts
At the end of the day, the best writing tool is the one that helps you achieve your goals. If you’re looking for a new AI writing helper that’s concise, tech-savvy, and refreshingly different, DeepSeek-V3 is definitely worth a try. It’s not about replacing ChatGPT—it’s about expanding your toolkit and finding new ways to bring your ideas to life.

So, what are you waiting for? Give DeepSeek-V3 a spin and see how it can elevate your writing game. Who knows? It might just become your new favorite co-writer.

## ChatGPT response:

AI writing tools are evolving fast, and if you're choosing between ChatGPT and DeepSeek, it’s essential to know what each brings to the table. Both are powerful, but they shine in different areas.

### 🔥 Why Choose ChatGPT for Writing?
* 1️⃣ Better at Structuring and Coherence – ChatGPT is great at maintaining a logical flow in long-form writing, making sure ideas connect smoothly.
* 2️⃣ More Natural and Human-Like Tone – Whether you want a formal report, a creative blog, or a casual email, ChatGPT adapts well to different styles.
* 3️⃣ Stronger Editing and Refinement Abilities – It can enhance readability, fix awkward phrasing, and rewrite sentences without losing the original meaning.
* 4️⃣ Context Retention – If you're working on a long piece, ChatGPT remembers key details better, reducing repetition or inconsistency.
* 5️⃣ Better Creative Writing – If you need storytelling, persuasive writing, or engaging marketing content, ChatGPT tends to be more expressive.

### ❄️ DeepSeek’s Strengths in Writing
🔹 More Direct and Concise – DeepSeek leans towards technical and factual precision, making it good for summarization.
🔹 Handles Research-Oriented Content Well – If you’re writing technical papers or extracting facts, DeepSeek might be helpful.
🔹 Less Prone to Hallucinations in Certain Topics – It might be better at sticking to data when accuracy is crucial.

### ⚡ Key Differences in Writing Experience
*****************************************************************************************************************************************************
*+---------------------------+------------+-------------+                                                                                           *
*| Feature                   | ChatGPT    | DeepSeek    |                                                                                           *
*+---------------------------+------------+-------------+                                                                                           *
*| 📝 Writing Flow & Coherence | ✅ Excellent | 🟡 Sometimes abrupt |                                                                                *
*| 🎭 Adaptability to Tone   | ✅ Highly flexible | 🔴 More rigid |                                                                                  *
*| 🎨 Creativity & Expressiveness | ✅ Strong | 🔴 Limited |                                                                                         *
*| 📊 Technical & Factual Writing | 🟡 Good, but verbose | ✅ More direct |                                                                          *
*| 🧠 Context Retention     | ✅ Strong for long pieces | 🟡 Can lose track |                                                                        *
*| ✂️ Editing & Refinement  | ✅ Great for polishing | 🟡 Basic improvements |                                                                       *
*+---------------------------+------------+-------------+                                                                                           *
*                                                                                                                                                   *
*                                                                                                                                                   *
*                                                                                                                                                   *
*****************************************************************************************************************************************************

### 🎯 So, Which One Should You Use?
*For creative, engaging, and structured writing → Go with ChatGPT.*
*For precise, factual, and technical content → DeepSeek might be useful.*
At the end of the day, both have their use cases, but if writing quality, readability, and human-like expression matter to you, ChatGPT is the stronger choice. 🚀

## ChatGPT pushing me away

One thing I totally forgot when I started writing this post is the issue of hallucinations—one of the most frustrating things about ChatGPT. Thanks, ChatGPT, for reminding me of this!. But... will return to ChatGPT time to time because of the sincerity and actually be more concise in this post!

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Multi-layered proxy architecture for my personal cloud
October 8th, 2024
by *Agus Rumayor*

After writing the [Unlocking the power of personal cloud post](https://jagcoop.github.io/posts/Unlocking_the_Power_of_Personal_Cloud/), I felt compelled to dig deeper into the choice of technologies—examining not just which technologies we select, but why, when, and what older methods they are replacing.

First, let me clarify that today, the distinction between a **proxy** and a **gateway** has become increasingly blurred. In many instances, both terms are used interchangeably, and for good reason. As implementations grow more complex, proxies often incorporate robust security features, and gateways frequently employ proxy architectures to handle multiple protocols (HTTP, database, etc.). Therefore, moving forward, we will use the terms "Proxy/Gateway" to refer to technologies that utilize tunneling proxy architectures to secure access to services, regardless of which specific layer (application, network, etc.) is secured.

Traditionally, when we hear "tunneling proxy," our minds might immediately jump to the concept of a **VPN** (Virtual Private Network). VPNs have long been the go-to technology for securing connections between clients and servers, particularly for remote access. They create an encrypted "tunnel" through which data passes, protecting it from interception and unauthorized access. But modern tunneling proxy technologies have evolved to go beyond the scope of VPNs, incorporating more refined and efficient methods of securing communication, while offering additional flexibility for multi-protocol environments.

## The Shift from Traditional VPNs to Modern Proxy/Gateway Solutions
Historically, VPNs were used to secure connections at the network layer (OSI Layer 3), but this approach has its limitations. For one, VPNs operate on a more coarse-grained access control, meaning that once a user is authenticated and connected to the VPN, they can access a broad range of network resources, whether needed or not. This "all or nothing" approach presents a security risk, especially in environments where granular access control is essential.

Modern Proxy/Gateway solutions, on the other hand, offer a more fine-grained control. These systems allow organizations to secure access at the application layer (OSI Layer 7), meaning users are granted access only to the specific applications or services they need. This limits the attack surface and reduces the risks associated with over-permissive access.

Moreover, modern proxy/gateway architectures can also accommodate multi-protocol tunneling, meaning they can handle HTTP, database protocols (such as SQL), and even proprietary application protocols, all within a unified framework. This is a significant improvement over traditional VPNs, which are often limited to securing basic network communication protocols. There are a lot of major trends to search like Software-defined Perimeter (SDP), Zero Trust Network Access (ZTNA), API Gateway, Secure Access Service Edge (SASE) all these concepts combines and some implements each other.

## VPN architecture vs Multi-layered proxy architecture

VPN Architecture
**********************************************************************************************
*                                                                                            *
*                                                                                            *
*                                                                                            *
*                                                                                            *
*                                   xxxx xx x  x x  xxxx           xxxxxxxxx                 *
*                               xxxx                   xx   xx xxxx x  x  xxx                *
*                            xxx                        x xx                xxxxx xxx        *
*               xxxxxx    xxx                          xxx                           x       *
*          x xxx     xxxxxx                           xxx                             x      *
*        xx             x                             x                                x     *
*      xxx                                                                              x    *
*      x                                                                                x    *
*      x                                                                                x    *
*      x                                                                                x    *
*      x              ┌────────────────────┐                                            x    *
*      xx             │                    │                                            x    *
*        xx           │      VPN Client    │                                            x    *
*         xxx x       │                    │                                          xx     *
*               xx    └────────────────────┴──┐                                      xx      *
*                xx                           │   x                                xx        *
*                  xx                         │  xxxx                           xxx          *
*                   xx                        │xx    xx                       xx             *
*                     xxx                    x│       x xxxxx xxx xx x xx xxxx               *
*                       xxx              xxxx │            xxxxx      xxx                    *
*                          xxxxx xxx xxxx     │                 xxxxxxx                      *
*                                             │                                              *
*                                             │                                              *
*                                             │                                              *
*                                             │                                              *
*                                             │                                              *
*                                             │                                              *
*                                 ┌───────────▼─────────────┐                                *
*                                 │                         │                                *
*                                 │                         │                                *
*                                 │       VPN Server        │                                *
*                                 │                         │                                *
*                                 │           │             │                                *
*                                 └───────────┼─────────────┘                                *
*                                             │                                              *
*                                             │                                              *
*                                             │                                              *
*                                             │                                              *
*                          ┌──────────────────┼─────────────────────────┐                    *
*                          │                  ▼                         │                    *
*                          │            Personal Cloud                  │                    *
*                          │                                            │                    *
*                          │                                            │                    *
*                          └────────────────────────────────────────────┘                    *
*                                                                                            *
*                                                                                            *
**********************************************************************************************

Multi-layered proxy architecture
*********************************************************************************************************
*                                                                                                       *
*                                                                                                       *
*                                                                                                       *
*                                   xxxx xx x  x x  xxxx           xxxxxxxxx                            *
*                               xxxx                   xx   xx xxxx x  x  xxx                           *
*                            xxx                        x xx                xxxxx xxx                   *
*               xxxxxx    xxx                          xxx                           x                  *
*          x xxx     xxxxxx                           xxx                             x                 *
*        xx             x                             x                                x                *
*      xxx                                                                              x               *
*      x                                                                                x               *
*      x                                                                                x               *
*      x                                                                                x               *
*      x              ┌────────────────────┐                                            x               *
*      xx             │                    │                                            x               *
*        xx           │          Client    │                                            x               *
*         xxx x       │                    │                                          xx                *
*               xx    └────────────────────┴──┐                                      xx                 *
*                xx                           │   x                                xx                   *
*                  xx                         │  xxxx                           xxx                     *
*                   xx                        │xx    xx                       xx                        *
*                     xxx                    x│       x xxxxx xxx xx x xx xxxx                          *
*                       xxx              xxxx │            xxxxx      xxx                               *
*                          xxxxx xxx xxxx     │                 xxxxxxx                                 *
*                                             │                                                         *
*                                             │                                                         *
*                                             │                                                         *
*                                             │                                                         *
*                        ┌───┬────────────┬───▼──┬────────────────────┐                                 *
*                        │   │    Proxy 1 │      ┼─────────┐          │                                 *
*                        │   └────────────┼──────┘         │          │                                 *
*                        ├────────────────┼──┐             │          │                                 *
*                        │    Proxy 2     ▼  ┼──────────┐  │          │                                 *
*                        ├────────────┬──────┘          │  │          │                                 *
*                        ┼────────────┼───┐             │  │          │                                 *
*                        │  Proxy 3   ▼   ┼───────►     ▼  ▼          │                                 *
*                        ┼────────────────┘        Personal Cloud     │                                 *
*                        │                                            │                                 *
*                        │                                            │                                 *
*                        │                                            │                                 *
*                        └────────────────────────────────────────────┘                                 *
*                                                                                                       *
*                                                                                                       *
*                                                                                                       *
*                                                                                                       *
*                                                                                                       *
*                                                                                                       *
*********************************************************************************************************

To wrap up the discussion, it’s important to highlight the key differences between choosing a VPN architecture and a multi-layered proxy architecture for a personal cloud. Both options offer secure access to your data, but they serve different needs and come with distinct advantages depending on your use case.

1. Security Model
**VPN Architecture**: VPNs secure access at the network layer. When you connect to a VPN, your device becomes part of the private network, and all your traffic is routed through the VPN server. This secures your entire connection from end to end, regardless of what applications or services you use. However, once connected, you typically have access to everything on the network unless additional security measures are in place. This can increase the risk if any component inside the VPN is compromised.

**Multi-Layered Proxy Architecture**: A multi-layered proxy secures access at various protocol layers—typically at the application layer. Instead of securing the entire network, a proxy can be set up to only secure specific services or applications. For example, you can have a proxy that handles HTTP requests, one that manages database connections, and another that secures file sharing. This architecture is inherently more granular, offering fine-tuned security controls that limit access to specific resources and services, which minimizes the attack surface.

2. Granularity of Access Control
**VPN Architecture**: When using a VPN for a personal cloud, the access control is often broad—once authenticated, users generally have access to the entire network, regardless of the specific service or resource they need. This can create challenges for personal cloud deployments where you may want to limit access to only certain files, databases, or applications.

**Multi-Layered Proxy Architecture**: This offers fine-grained access control. Each layer or service can have its own access policies, allowing you to provide precise permissions for each user or device. For instance, you can allow access to a file-sharing service without exposing other resources like databases or web applications. This is crucial for minimizing security risks in personal cloud environments where different levels of access may be needed for different users or services.

3. Performance and Latency
**VPN Architecture**: VPNs encrypt and route all of your traffic through a remote server, which can introduce latency. This overhead may not be noticeable for small-scale personal clouds, but as the number of connected devices grows or the complexity of the data increases, VPNs can slow down performance.

**Multi-Layered Proxy Architecture**: Proxies can be optimized to handle specific types of traffic more efficiently, often leading to better performance. For example, a proxy handling only HTTP traffic can be tuned for that protocol, ensuring lower latency and faster response times for web-based services. In a multi-layered proxy setup, each proxy can be optimized for its role, reducing overall latency and improving performance for each individual service.

4. Complexity of Setup and Maintenance
**VPN Architecture**: VPNs are typically easier to set up and maintain for personal use. Many consumer-grade VPN solutions offer out-of-the-box configurations that require minimal technical expertise. The tradeoff is that you lose some granularity and flexibility.

**Multi-Layered Proxy Architecture**: Setting up a multi-layered proxy requires more technical expertise. Each proxy must be configured separately, and managing access controls at multiple layers introduces complexity. However, this also allows for tailored security and performance optimization, which can be beneficial for more advanced personal cloud setups that require specific controls over different services.

5. Privacy and Anonymity
**VPN Architecture**: VPNs are known for their ability to provide anonymity by masking your IP address and encrypting all of your traffic. For personal cloud users who want to ensure their connection is private and not traceable, VPNs are a strong choice.

**Multi-Layered Proxy Architecture**: While proxies also provide privacy by encrypting traffic and masking the user’s identity, they are generally more focused on securing specific services rather than providing broad anonymity. If privacy from third-party services or ISPs is a major concern, combining proxies with VPN-like functionality may be necessary.

### Final Thoughts: Which Architecture to Choose for a Personal Cloud?
Choose a VPN Architecture if your primary goal is simplicity, broad network access, and privacy for your entire connection. This is often ideal for users who want a basic, all-in-one solution to secure their personal cloud without diving into too much complexity.

Choose a Multi-Layered Proxy Architecture if you need fine-grained control, protocol-specific security, and scalability. This is the better option if you are running multiple services or applications in your personal cloud, and you want to manage access and performance on a more detailed level.

Both architectures have their place in securing personal cloud environments. The decision ultimately depends on the level of control, performance, and security you need for your specific use case. As personal cloud technology continues to evolve, integrating elements of both VPNs and proxy architectures might become the optimal solution, offering the best of both worlds.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Turn GHC errors into links within Emacs' compilation buffer

October 18th, 2024
by *Julio César*

Emacs has a feature that allows to run compilation commands using `M-x compile`, it can run arbitrary commands but as the name implies compiling is its primary utility. Interestingly, whenever there&rsquo;s a compilation error the output indicates the file and line number where the error occurred, the cool thing about `compile` is that we can put the cursor over that line and press `RET` (that is, the return key) to jump into that location in an Emacs buffer.

The way this works is by defining a set of regular expressions that Emacs will use to identify *file location* patterns in the `*compilation*` buffer contents, these are set via the variables `compilation-error-regexp-alist-alist` and `compilation-error-regexp-alist`. The former is a keyed map (an associative list or *alist* in LISP lingo) of regular expressions with the error pattern to match for as the value, the key itself is not important but it should uniquely identify the regular expression associated to it. The second variable, `compilation-error-regexp-alist`, is a list of these keys that should be used to parse the `compilation-mode` buffer contents.

Emacs&rsquo; Haskell support it is what it is, and of course this feature doesn&rsquo;t work out of the box, but, to quickly jump to the offending line of an error message in my source code was a nice feature I wanted to have as part of my workflow.

There&rsquo;s `haskell-mode` which exposes a `haskell-compile` function that behaves pretty much identically to `compile` and that it has regular expressions loaded that makes the error output linking just work, sadly, it tends to become very slow on large buffers, like when there&rsquo;s a lot of compiler output or when there are lots of errors (which is often the case with GHC Haskell anyways).

However, the bright side is that `haskell-mode` already exposes regular expressions that we need in a list variable named `haskell-compilation-error-regexp-alist` so what&rsquo;s needed is to just copy these over to the sources used by the `compile` function, that is the `compilation-error-regexp-alist-alist` and `compilation-error-regexp-alist` variables we alluded to earlier.

Below there&rsquo;s a function that does this:

```elisp
(defun zz/load-haskell-compilation-error-regexp-alist ()
  "Integrate `compile' with Haskell Stack errors.

`haskell-mode' exposes `haskell-compile' as an alternative to `compile' with
regexes that allow linking errors to source files in the compilation buffer.
However, when using it, sometimes behave weirdly, here we copy those regexes to
the variables used by `compile' so that we are able to just use that and have
file links work."
  (let* ((idx 0)
         (regex-key (intern (format "haskell-error-%d" idx))))
    (dolist (regex haskell-compilation-error-regexp-alist)
      (unless (assoc regex-key compilation-error-regexp-alist-alist)
        (add-to-list 'compilation-error-regexp-alist-alist (cons regex-key regex)))
      (add-to-list 'compilation-error-regexp-alist regex-key)
      (setq idx (1+ idx)))))
```

Note that in order to use this, it is not enough to write it verbatim into our Emacs configuration, we must call it within a `(with-eval-after-load 'haskell-mode ...)` block, otherwise the `haskell-compilation-error-regexp-alist` variable won&rsquo;t be defined yet; Emacs Doom users can use the `after!` macro to achieve the same thing:

```emacs-lisp
(after! haskell
  (zz/load-haskell-compilation-error-regexp-alist))
```

Success!


## Enabling error pattern recognition in `vterm` buffers

To top it all off there&rsquo;s a minor mode in Emacs to get the same `*compilation*`-like behavior in the current buffer contents, and of course it works with shell buffers too, this means that if we&rsquo;re using `vterm` and we run a compile command that results in errors then we will be able to jump to the error source just as before, to use this we just need to activate the `compilation-shell-minor-mode`.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# One More Year
December 18th, 2024
by *Agus Rumayor*

It's hard to say when it will end. My family has upheld a 50-year-old (possibly longer—we don't have exact records) tradition of organizing and celebrating the traditional posadas here in Mexico.

## How Did It Begin?
When my grandparents moved to Zacatecas, they settled in a neighborhood filled with young families. Every afternoon, after school, one kid—the one who owned the soccer ball—would yell out to gather the neighborhood children for a game. This impromptu event became a signal for all the moms to visit each other, exchange favors, chat about their kids (or share gossip), and knit together for new family members.

During this time, a few families decided to start celebrating the nine nights of posadas—a tradition that commemorates Mary and Joseph’s journey seeking shelter in Bethlehem. In those early years, only two or three families participated. Their children, about 4–7 per family, would sing, pray, and receive small treats like peanuts and winter fruits at the end of the night.

## The Tradition Shines
By the late 80s and 90s, the tradition had grown beyond just our family and neighbors. Two things made this possible:

Many of the original children grew up, started their own families, and brought them back to the posadas.
Nearby working-class neighborhoods began joining the celebration.
At its peak, the posadas drew crowds of about 300 people. So many families wanted to host that we had to pair two families for each night. These nights became full of singing, praying, piñatas, fireworks, candy, and gift-giving.

## A Modern Posada
The way we celebrate has evolved over the years, but the core elements remain. Here’s how we celebrate today:

### The Prayers
The prayers during the posada are split into four parts:

1. The Rosary
We start with the rosary, offering intentions such as gratitude or seeking support during difficult times. After each mystery, we sing Christmas carols.

2. La Novena
This is a special daily prayer that reflects on Mary and Joseph’s journey as they carried and cared for baby Jesus.

3. La Letanía
Traditionally prayed after the rosary, we now recite it after the novena while walking through the streets. To this day, we pray it in Latin.

4. Pedir Posada
This is the highlight of the night: a beautiful call-and-response song reenacting Mary and Joseph’s request for shelter.

### The Celebration
After the prayers, the hosting family serves dinner to all attendees and hands out small gifts to the children. While we still include a piñata with seven points (symbolizing the seven deadly sins), managing it with over 100 people is a logistical challenge these days!

## Looking Forward
As each year passes, we wonder how long we can continue this cherished tradition. Our family is now in its third generation of hosting posadas, but the challenges of maintaining it are becoming more evident. Many of my cousins have moved away, and the meaning of this tradition has shifted for each of us. For some, it’s rooted in the joyful memories of childhood, while for others, it’s about the spiritual connection and the act of prayer that remains at its core.

It’s not easy to sustain a tradition when its essence—prayer, sharing, and community—is at risk of being overshadowed by nostalgia or convenience. Yet, for now, we take pride in carrying it forward, gathering our community, and celebrating this beautiful piece of our heritage.

I hope I can write another One More Year post again, continuing to honor the legacy my grandparents started and keeping alive the spirit of posadas for as long as we can.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# A new approach for generating products: to publish small products in less than two weeks.
By Pepe Hernandez, Januar 19th, 2025.

## The ROVIO style. Repeat until you have success (From 1 to 52 to arrive at Angry Birds).

In the past, we worked on big and long-term projects.
We learned a lot from different perspectives.
However, those ideas ultimately died, and we don't have any products that generate passive income.
The Lean Startup Approach emphasizes looking for problems, pain points, and jobs to be done. In summary, it's about identifying opportunities and transforming them into products.
How many ideas do we need to be successful?
ROVIO developed 51 games before creating Angry Birds.
"This remarkable story underscores the crucial lesson for every entrepreneur: success rarely happens overnight. It takes dedication, resilience, and the willingness to experiment, even when faced with countless rejections."

Source: https://www.jsmorlu.com/business-success-stories/from-bankruptcy-to-global-stardom-what-we-can-learn-from-the-founders-of-angry-birds/

## We need to develop projects faster.
Since our past projects took months or even years, we must take a different approach.
Using Coding Skills to Generate Passive Income
Alex found this conference: "Using coding skills to generate passive income".
It tells the story of Corey Zue, a South African developer who quit his job as CTO of a startup to become an indie product developer.

Among the products he developed are:
- SaaS Pegasus
- Scriv
- PlaceCard Me
- Photos New Tab
- SaaS Starters
- Chat Stats

Corey Zue is now earning more passive income than he did as a CTO.

Alex, Arturo, Karina, and Toño talked with Hernán Wilkinson, founder of Ten Pines, a well-known software cooperative in Argentina. Among other things, Alex asked Hernan about why he is not creating software products but selling software services (outsourcing). Wilkinson shared his perspective:
	"I can only think of products for software developers. And if one 				group doesn't like paying, it's software developers."

Ten Pines focuses on offering software development services to other companies. They haven't ventured into developing software products, believing it's nearly impossible to monetize products aimed at software developers.

Less than a month later, Alex discovered Corey Zue's conference about getting money selling products to developers. Alex changed his mind:
It is possible to sell software products to developers.
We need to accelerate the speed of our experiments.
How can we arrive at this mythical 52nd (following the ROVIO principle: do it until you have success) product and have success? 

Developing smaller products is the way.

## More Inspiration
Another insight came from a Stack Overflow blog post. It featured hundreds of software product projects generating over $500 per month. This reinforced Alex's belief that such success is achievable.
Find the list here: https://www.500mrr.com/Year-2024. 

## A List of Ideas
Last Tuesday, Juan, Leo, Alex, and I reunited to discuss some product ideas for Jag Cooperative. I am adding a smaller list here.
- A JSON Resume for Teams
- A solution using AHP (Analytic Hierarchy Process) to compare different ideas (see Leonel's thesis).
- Open Badges
- Blockchaing certificate services for independent course makers
- NFT certificates for artwork
- Flow Metrics software
- A GitHub interface with SSH support
- A GitHub Configuration Management Tool
- Photoinvoicing
- Banking core software (similar to Mambu)
- Personal accounting software for independent workers
- Criteria for Developing New Products

## Guidelines for choosing among ideas
When considering new products, we should adhere to the following guidelines:
- Focus on tools close to the command line (e.g., Text-to-Something tools like SketchMiner). See Alex's blog post on Text-to-X tools: Awesome List of Text-to-X.

Note. This is a draft. I hope a historical draft of the future of Jac.Coop.



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">

# Flight Levels vs PMI: The Case for Simplicity in Organizational Project Management
November 6th, 2024
by *Pepe Hernandez*

I am wondering why I am resistant to complex methods. Complexity is a function of the number of elements in a system. The more elements, the more complexity. I like simpler systems. I tend to have low or no trust in complex solutions. The first question is, how can you be sure it will solve your problem? How do you know that without trying the solutions for a certain time? 

Given Gall's Law ""a complex system that works is invariably found to have evolved from a simple system that works".

Why not try first a simple system. 

Eliyahu Goldrati points out that admiration for complexity is an obstacle to good thinking. Love for complexity is bad in this context. If you compare PMI's Organizational Project Management model with Flight Levels, you will detect rapidly the complexity of PMI's approach.

Simplicity is undervalued. Loving complexity creates more intricate systems. Goldratt thinks that simple solutions truly can solve problems. Simpler does not necessarily mean easier. The Flight Levels Model was developed using principles of Systems Thinking, Lean Methodologies, and the Theory of Constraints. 

Steve Jobs said that simple can be more complicated than complex: You have to work hard to get your thinking clean to make it simple. But it's worth it in the end because once you get there, you can move mountains.

As I read the framework, I compared every element of the PMI approach with Klaus Leopold's Flight Levels model. The PMI model includes 10 knowledge areas. Klaus Leopold has three levels and 5 activities for achieving business agility. This simple comparison shows that Flight levels are a simpler model to understand and implement, even though their creation took years for Leopold. He was an advocate and pioneer of the Kanban Method in Knowledge services 14 years ago. 

While comparing the models, I remembered Ockham's principle: "The simplest solution is often the correct one." 

There are some variations of the Ockham principle:
It is vain to do with more what you can do with less.
An explanation of a fact must be just enough.
Lastly, the simple solution is the correct one most of the time.

Flight Levels has fewer elements than the PMI's Organizational Project Management Model. Following the Ockham principle, this solution is more likely to be right.

Another thing that I dislike about the PMI model is that it seems to be a framework for managing a large number of projects. The lean agile principles say that you must limit your Work in Progress to obtain better performance and increase predictability.

Antoine de Saint-Exupéry, Airman's Odyssey: "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away." I think Flight Levels is just enough.

As David Anderson pointed out. Being bureaucratic adds value? Certainly not. You use bureaucracy to achieve a goal. You use bureaucracy because it is a means for something else. Why not use a tool that requires less overhead, less time, and fewer resources if you achieve the same with both. 

Less is more.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">

# About the need to pay you dues... Learning BMP diagraming
By Pepe Hernandez, December 1st, 2024

## My first BPM sketchminer experience
We were in La Vendimia. An italian style caffeteria in the Alameda in Zac. Good memories. Were were happy, and we didn't know. Well...
La Vendimia had a coworking space. That was the place where several world class engineers were coached by Alex. I will talk about it in other post. Meanwhile I remember Alex we were mapping a process on sketchminer.ai
It was different from what we've done other times, using bizagi. Another tool Alex had show us some time before.
That time was different. 
We were focused on the process, not in finding the right option in the tool bar.
You write a line, and it immediatly were drawn on the righ side as a process in the BMP (Business Process Management) format.
Alex told me. This is the only thing that we should know about Process Management. I our class of BPM we must had learned this.

## It is so easy to diagram in sketchminer... or NOT 
This type of tools are called Text to Diagram tools. It is one of the things that Alex likes to collect. https://elviejo79.github.io//2020-02-02-Awesome-list-of-text-to-X/ 
I fall in love with sketch miner immediately.
I though it will be useful soon or after.
It looks easy to map a BPM diagram.
Not so fast. It has its tricks.

## Pay your dues
I worked at Kueski for two years.
The first time I needed to work on a process I remember sketchminer.ai
The diagram was not too long, but it was a diagram with a pair of cycles.
I couldn't diagram what I wanted.
I though it was going to be easier, because in the sketchminer.ai page there are a lot of examples of diagrams. A lot of process diagrams from different domains.
But if you review the text that generates the diagram, you don't understand.
I went with Alex again. He told me "You have to pay your dues before".
Go to Leanpub, but the PDF booklet from the Author. Cesar Pautasso. Do ALL the exercises. Type them in the tool. 
It will take you a pair of hours.
The you'll be ready.

After doing so, I was ready.

Knowledge enter through the fingers. That's true for developers. Developers learn by writing code with its fingers. You have to write to learn, as I said in my preious post (https://jagcoop.github.io/posts/You_Need_To_Write_Here_is_Why/) 
Alex has a developer mindset. He learns by coding. He learns by writing. He learns by doing. 

## The most personal, is the most universal. The story repeats.

	"The most personal, is the most universal". -Stephen Covey.

Same story repeats with a colleagues in my last job as Product Manager.
I recommended the tool to other pears.
I wasn't successful.
The tool looks easy, well it is, but not at all.
A very intelligent guy, a PhD, tried to use it.
She couldn't.
The Engineering Head tried too.
He couldn't.
I said to them, "You have to pay your dues".

They didn't do it. 

Why I could not convince them?
The standard was a diagramming tool from Google, and FIGMA. 
They had invested in those tools, didn't want a new tool.
For the PhD, she didn't want to use a pair of hours for a simple diagram.

I paid my dues, I have the super power. They didn't. 

I think this is a pattern for people who sees sketchminer. They crash with a wall (not a big one, just a book and two hours). People are not used to pay their dues.

## Coming back to sketchminer.ai
In my work as a Product Manager, I wrote "problem specifications", and the "product specifications" of initiatives using several tools. One of them was sketchminer.ai. It helped me to map and describe the process without wasting too much time diagraming it. From your mind (through text) to diagram.

Now, I am coming back. I am offering an online class about BPM.

I discovered a second book from the author of skecthminer. ai. I immediately bought it to improve my skills. The book year of publication is 2023. You can bought both of them for 20-50 USD (It depends how much you want to pay for them. This is a feature of the Leanpub service).

I review the book, made a 20 slied page intro presentation, and took the book again. 

I will use flipped learning with my class. Theory off-line. And we will do the practice in class.

Students will be paying their dues in class. All exercises from the book. 

I am sure they will have the power. No doubt about it.


--------
Notes.
- By the way, from all the list, sketchminer is the favorite for Alejandro. And its my favorite too. 
- Today, while I review the list I remember the texttomindmap tool, and mermaid. I'll make a review of both later. 



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Creating Software AI Products, the AI Product Management Way.
By Pepe Hernandez. December 13th, 2024

## A new hope for my thesis topic

Today Alex came at 5.00 with a WhatsApp message: Look at this post, Andrew NG thinks that your thesis theme is good: Product Management with AI.

Andrew NG! What did he said? I said outloud. While I have been studying the PhD, I have had several doubts about my topic. In fact I, since the first intent, I have  tried with five different topics. 

I open the blog post from Andrew NG and, and start reading. When Alex recommend something, I am 99% sure the recommendation is good.

-------------------

## Andrew NG thinks AI is enabling Product Managers to make a better job

In his recent blogpost, Andrew NG talks about new patters in the Product Management discipline due to the enabling AI tools. He refers to the AI Product opportunities. The tool is an AI tool, the product is an AI product. This change of the market, and the change of the tools enables new practices.

NG asserts that "AI Product Management is evolving."

	"The growth of generative AI and AI-based developer tools has created numerous opportunities 	to build new kinds of things, among them AI applications". 

This new way of creating things is driving shifts in best practices in Product Management, because WAHT IS POSSIBLE TO BUILT has shifted. 

Note. I like the definition of Andrew NG (Product Management is the discipline of defining what to build to serve users).

### 1. Use concrete examples to specify AI products.

When a requirement is vague, and general, Artificial Intelligence can generate anything. To have better results, we need to be more specific. By providing examples or scenarios, AI can generate something that includes the based scenarios. The more scenarios, the better the outcome of AI tools. 

Note. By the way, last week Alejandro García wrote about how examples, or scenarios are the base of TDD (Test Driven Development), and how Bertrand Meyer is skeptic about them. Bertrand Meyer prefers a formal specification (Design By Contract). Alex reflects about this two points of view, and arrive to the specific cases where each of them is a better approach, including when to use both at the same time. Check the blogpost here -> https://jagcoop.github.io/posts/tdd_cloud_wilkinson_vs_meyer/ 

A PM can literally take pictures, and write notes about what is happening. The AI can identify the scenario, and can propose better prototypes that fit the scenarios provided.

	"Using examples (such as inputs and desired outputs) to specify a product has been helpful for 	many years, but the explosion of possible AI applications is creating a need for more product 	managers to learn this practice."-Andrew NG 

Example:
If someone request "a vision system to detect pedestrians outside our store" it is to vague. But if a PM collects a handful of pictures and make some notes on it with the desire output, the meaning "detect pedestrian" becomes more concrete.

### 2. Asses technical feasibility of LLM-based applications by prompting.
PMs can prompt LLM to see if an idea is feasible without the need of some software engineer to help them to check. When the PM arrives with a feasible idea with the SW Engineers. PMs can do basic feasibility at a basic level, than before. 

By the way, Andrew NG has the better Python course for AI (recommended from Nohemi. She has taken  several python courses to learn, and she thingks this is bthe best). It is on my list of things to do in 2025. You can find it in the following link https://tinyurl.com/2jc7r4eb 


### 3. Prototype and test without engineers.
There are several AI tools, that NG recommends: Replit, Vercels, V0, Bolt, and Anthropic's Artifacts. These tools allow OT technical users to create prototypes, some coding can helps a lot. Technical, and not technical users use it to:
- prototype
- get user feedback
- iterate quickly

A final though from Andrew NG, implicitly says that Product Management is a useful and evolving discipline "I find this discipline fascinating, and will keep on sharing best practices as they grow and evolve.". 

### Who is Andrew NG?
Andrew NG is a computer scientists and tech entrepreneur focusing in Artificial Intelligence, and Machine Learning. He is cofounder of Google Brain, former Chief Scientists at Bauidu, associate professor of the Stanford AIL Lab, and cofounding Coursera, and DeepLearning.AI. His goal is to democratize deep learning teaching over 8 million students through his online courses!!!! 
Alex, Karina, Arturo, among other created the Data Gallos 8 years before. Their objective was to acquire Data Science skills. Since then, they follow Andrew NG, and their opinions carefully. Andrew is a great educator. Alex, you can write a story about it...
See more details at the Wikipedia page... https://en.wikipedia.org/wiki/Andrew_Ng 

-----------------------

## My third PhD trial. Artificial Intelligence, and Product Management
As I said, this is my third intent to study the PhD. I had not success with the first two. I will add a post with the three previous thesis proposals later. Meanwhile, lets talk about the third intent... 

### 3.1 AI aided Sw Development
The general hypothesis was that AI will create super developers that will thrive in the AI-Software world. Those who uses complex machines and algorithms, will thrive (I am referring to Cal Newport advice in Deep Work). My proposal is related to the use of AI for increasing my abilities as Sw Developer. The name for the proposal was "AI aided Sw Development".
The proposal tried to answer the questions
- "How a common outdated sw engineer, could perform as a professional sw developer using artificial intelligence tools, like chatgpt, GitHub copilot, amazon whisperer, among others...
- How a professional sw developer could increase his productivity by 10x using the same AI tools...
- How a professional sw developer could perform as a small sw team...

The thesis Committee accepted my proposal, but during the first year I changed my mind... Some factors influenced me to take such decision...
1. The topic was proposed by me. 
2. My thesis director had no much time for me.
3. My thesis codirector was not interested in the topic.
4. I started to think about some topic aligned with my thesis directors, and me.

So I deferred the commitment, and thought about what could be a good topic. I asked Alex again. Alex asked me "Wasn't there a single PhD-worthy problem that you, and Perla faced while worked in Kueski?". 

As a Product Manager I had many problems... I thought it could be a good idea. 

### 3.2 A common topic Product Managers Problems 
So I came back with my thesis co-Director, Perla Velasco, and expose the question of Alex.
Perla, and I thought. What problems did we face in Kueski as Product Managers? I previously asked a pair of PMs and Software Engineering Managers. The answer were not satisfactory. 

Perla, had recommemnded to me an article a pair of months ago, about problems faced by PMs. It was published on the Empirical Software Engineering. It is a well written academic article. I liked the form, and the content. Since both of us were colleagues in a Fintech for two years, both performing Product Manager roles, this was the common theme we were looking for.At the end of the article, identifies solutuions strategies as a subsecuent work for her team. Look for the solutions to those problems could be a good idea. 

I linked the Product Manager's problems, and AI with the concept. "Learn from the teachers, not from the students". So I wanted to know what great teachers thinks about the Daily Product Managers Problems. Who are the great teachers? Well, the world topic experts, and authors of books. Those who all the PMs follow in order to learn good practices. A clear disadvantage is that experts are not easy to reach (this is an assumption). Why not ask AI, as if AI represent the thought of theses experts. Voila! 

I studied previously, how to build prompts, and I know that you can ask an LLM like CHATgtp to think like a specific Great Teacher, ask them a questions, and specify the format of the output. This is a basic pattern of Prompt Engineering... While I was writing the new thesis proposal, I found that Springer had writen an second article "Strategies for Dealing With Software Product Management Challenges". There Springer got solutions strategies provided by Product Mangers with experience for the top 5 problemas of her previous article. 

The good news were that I had a base line, the problems on one side, and the solution strategies on the other side.  

I need to refine the idea, the specific terms to look for, and the proposal. 

### 3.3 Finding the right concepts for my proposal
I came to Alex again, how would you name an AI fed with the public knowledge of experts? 
Alex told me, it could be Artificial Intelligence Agent, or Digital Twins. At the end of summer I had the name for my proposal "Solution strategies generated by Artificial Intelligence Agents to common problems in Software Product Management."

I had a review from my thesis Director, and co-Director. They accepted the proposal, but questioned in order to refine the idea:
- What would answer an Artificial Intelligence Agent to my question. What answer are alike, what are different, and what is the rationale for each answer.
- Choose a small scope. Focus only on five problems. 

They also set a deadline for a Systematic Literature Review. I still working on it. It will be a topic for another post...

#### A direct experiment with CHATGPT. Whad CHATGPT answer to the promt "What are the top 10 solution strategies, for the top 5 problems detected on the article of Springer?"
I jump directly to a "customized LLM" with knowledbe of a specific expert. But, general LLMs Agent ask to prompts without needing some feedback. Perla told me, why you dont ask directly to LLMs and verify if the solution strategies to common problems are the same. 

I did it. Some answers are the same, most of them. And somee are different. There are two cases with the different ones. First, solutions strategies proposed by Product Managers that were not metioned by LLM Agent (for this case CHATGPT version 4.0). Second case, the solutions strategis proposed by ChatGPT, and not metioned by Product Managers with experience. A third questions arises, what is the rationale behind each solution strategy in each case?

My thesis proposal focus on an experiment (an output), not an outcome (a solution). Is there a need for the output. Is it the output what is needed? It is better than other options? Which other options do you have? Have someone worked on this problem? Is it an important problem? 

Well, Andrew NG thinks the theme/problem is right. 

### 3.4 AI tools that supports Product Management practices
In Academic Research you need to know what others said about your idea. "Nothing is new under the sun", said the Ecleasiastes. So, I looked for customized LLMs as a first approach, then i complement with tailored AI agents, then passed to domain specific. One of my proffesors said that we need to clarifly what is, and what is not. At the end we generalize to AI tools that support Product Management.

I design an experiment to map this three options. I could get product management practices from experts. But then a philosophical questinos arises. 


### 3.5 Is not about gathering information, is about developing skills.

---------------------------
A philosophical Question. The problem is not to identify a good practice, but really develope expertise on the practice.

Perla said, I think the problem is not the information gathering.
If you build your prompt right, then you will get an acceptable answer.
We teach students Software Engineering good practices. And they build crappy software. 
How can a PM develope expertise?

I thought, the problem is that students of Softwre Engineering have limited practice during college. If they build some kind of software or solution, it will be the first one. 
One thing is to know something, another thing is to really understand it, and other thing is to dominate the practice at a proeficient level.
Knowing wicha are the goood practices for a software product manager is no enough to help them dominate the practices.

Then, our research questions refined. Is there some AI toos that supports knowing, understanding, and developing product management practices?

I found none yet. If I look for AI tools that supports acquiring software product management practices you dont find any article.

Ok, I though, lets go with a wider scope. 

AI tools that support product management practices, as the main questions for the literature review. And then the questions about knowing, understtading and develop skill on a specific practices.

Now, I am at that poing. I will continue writing about it.

-----------
Resume
The AI topic como from the power of digital tools mastered of guided by humans.
The Product Manager problems, comes from the shared experience of being a PM at a Fintch.
The creating of the digital twin, or a customized exepert come from two ideas of Alex.
- Follow the teachers, not the students
Ellaborating a good prompt, will get a good answer solutions strategies for daily productm management problems.
We can do a comparision between both of them. This can be a good article.
Creating a customized, tailored, domain specific, AI agent, or digital twin
The CHATBOT is the most popular way to interact with a LLM. 
If there is a gap on the learning of skills for knowledge domain, what alternatives can you use that could take advantage of AI, to allow Software Product Managers to develop expertise.

----------
What is next?
- Finish the Protocol
- Finishing the SLR
- Detect from 1 to 3 possibles journals that could evaluate the SLR
- Refine it until it is published

------------
Other ideas of post derived from here:
- The experiment of Springer vs CHATGPT
- The experiment of Springer vs customized CHATGPT (Marty Cagan, or other expert)
- The experiment of CHATGTP vs customized CHATGPT
- The DATA Gallos history.
- Maglyas, and Springer mapping of the problems.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Prompt Engineering 101
By Pepe Hernandez
February 18th, 2025

I recently took the Prompt Engineering Course of Platzi with Carlos Alarcón. This is a collection of notes from the class. I hope it is helpful to you. 

## What is prompt engineering?
Prompt engineering consists of a set of skills for interacting with large language models (LLMs) such as ChatGPT. Interacting with these artificial intelligence tools involves using text as input, which the tool generates as output, which could be an image (as with DALL·E 2) or text (as with ChatGPT).

## Generating Prompts
Creating prompts or input texts is essential to guide an AI tool toward generating specific outputs. 
This is a basic Example:

"Act as an expert in art history (context is part of the input) and contrast and compare Leonardo da Vinci's paintings (specific task to perform). Provide the response in a numbered list format (output format).

These models do not deeply comprehend their responses. They generate outputs with a high probability of coherence based on previous text.

## What are some limitations of LLMs? LLMs have some constraints, such as:
- Difficulty maintaining context over long conversations
- Vulnerabilities and biases
- Limit on the number of words
- Input Restrictions

## What are different Training Methods?

- Zero-shot: Performing a task without prior examples. Example: "Give me 10 spelling questions for a 7-year-old child."

- One-shot: Provide a single example before the task. Example: "Give me 10 questions for a 7-year-old similar to: 'Spell the name of an animal that barks.'"

- Few-shot: Provide multiple examples before the task. Example: "A software architect defines microservices architecture as '...'. Based on their words, define the three main characteristics of a microservices architecture."

## How does Chain-of-Thought Prompting work?
Chain-of-Thought (CoT) Prompting guides the model to break down a problem into intermediate reasoning steps, leading to a more structured and accurate response.

### Example: Math Problem Using Chain-of-Thought Prompting
Prompt: "A farmer has 3 fields. Each field grows 5 rows of crops. Each row contains 4 plants. How many plants does the farmer have in total?"

#### Without Chain-of-Thought Prompting (Direct Answer)
"The farmer has 60 plants."
✅ The answer is correct, but there's no reasoning provided.

#### With Chain-of-Thought Prompting (Step-by-Step Reasoning)
*"Let's break this down step by step:
The farmer has 3 fields.
Each field has 5 rows of crops.
So, the total number of rows is 3 × 5 = 15.
Each row contains 4 plants.
So, the total number of plants is 15 × 4 = 60.
Thus, the farmer has 60 plants in total."*

## Which Complex Output Formats can ChatGPT generate? LLMs can generate more structured text formats, such as:
- Tables: "Generate a table with the following columns about..."
- Mind maps using Markdown
- Outline format
- JSON format
Experimenting with output formats and refining results through iteration is a good idea.

## Is there a harmful use of the Role-Playing Techniques?
There are role-playing techniques where ChatGPT can be instructed to behave as a specific character, such as a hacker, terrorist, or unethical person. Security teams actively monitor these behaviors to block them.

## What is the difference between Knowledge Integration vs. Knowledge Generation?
Knowledge Generation: Creating a response based on a prompt about a specific topic.
Knowledge Integration: Enhancing a response with additional input information.

## How to adjust Model Behavior?
The parameters top_p and temperature can be adjusted to control the diversity and Creativity of responses:
Conservative approach: Temperature = 0.5
Creative approach: Temperature = 1.0

### Adjusting Model Behavior: top_p and temperature
Large language models allow users to control the diversity and Creativity of responses using the top_p and temperature parameters.

#### Temperature – Controls Creativity
The temperature parameter determines the randomness of the model's output.
A higher temperature (e.g., 1.0) makes responses more creative and varied but less predictable.
A lower temperature (e.g., 0.1) makes responses more focused and deterministic, favoring the most probable words.
##### Example of temperature Effect
Prompt: "Write a sentence about the moon."
Temperature = 0.1 (conservative, predictable)
"The moon orbits the Earth and reflects sunlight."
Temperature = 1.0 (creative, diverse)
"The moon, a silent guardian of the night, paints the sky with silver whispers."
top_p – Controls Word Probability Selection (Nucleus Sampling)
The top_p parameter (also called nucleus sampling) determines how many word choices the model considers.
A higher value (e.g., 1.0) allows the model to choose from a wide range of words, making responses more diverse.
A lower value (e.g., 0.3) restricts choices to only the most probable words, making responses more focused and safe.

##### Example of top_p Effect
Prompt: "Describe a sunset."
top_p = 0.3 (focused, safe choice of words)
"The sunset paints the sky with hues of orange and red as the sun dips below the horizon."
top_p = 0.9 (more varied and expressive choices)
"The sunset, a fiery spectacle, drenches the sky in molten gold and crimson waves, bidding farewell to the day."

#### How to Use temperature and top_p Together
If both are set high (temperature = 1.0, top_p = 1.0), the output will be highly creative but potentially less coherent.
The output will be very structured and predictable if both are set low (temperature = 0.2, top_p = 0.3).
A common practice is to adjust one parameter at a time:
If you increase temperature, lower top_p to maintain coherence.
If you lower the temperature, you can increase top_p to allow for some variety.

## Additional notes
- "Do you understand your purpose?" This refers to rephrasing your request to ensure alignment with your intended message.
- A notable example in Lesson 18 covers the creation of a play, including the theme, characters, and main ideas.
- Summarizing Content. ChatGPT can summarize a URL or a PDF!. Example: "Summarize this link with the following characteristics..."

## How to configure the Text Writing and Style Editing?
You can ask CHATgpt to:

- "Act as a text editor."
- "Write an article on artificial intelligence for beginners."
- "Change the tone to make it more academic or formal."
- "Provide a list of references on task automation using APA format."
- "Adjust the temperature and top_p settings."

You can input a text fragment (from a book, article, or speech) and request a rewrite in a different tone or style:
- More formal
- More modern
- More academic
- More sarcastic
- More comedic
- More dramatic

## How can you ask ChatGPT to be your tutor?
- "Be my tutor."
- "Be my basic PyTorch instructor."
- "Teach several lessons and include exercises."

## How do you ask CHATGPT to be your Personal Assistant?
- "Act as my personal assistant."
- "Organize my calendar."
- "Create a meal plan based on a specific diet."
- "Generate a meal plan using ingredients that can be prepared with a Thermomix."
- "Create a to-do list for [task], considering that I usually do the following..."
- "Write an email with a cheerful yet professional tone."

This first course allowed me to ask better questions about CHATgpt. I will post more basic techniques soon.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Psychological Safety 
September 23th, 2024
by *Pepe Hernandez*

**How to identify and develop high-performing teams? This article helps us create psychological safety faster, better, and more productively.**

#ThePerfectTeam #PsychologicalSafety #ShowVulnerability #SocialSensitivity #HighPerformingTeam

Rozovsky and her study group at Yale School of Management. Instead of being a support group, it was a source of stress. Everyone was fighting for power. Rozovsky decided to join another group. The new group aimed to analyze real business cases. They immediately clicked. In a competition, they were asked to replace a student-run café. In the end, they decided to create a mini gym with two stationary bikes and three treadmills. They won the competition.

How can two groups be so different—one with a stressful atmosphere, and another warm and fertile for generating ideas?

Traditional productivity studies focus on the individual. However, most work is done in teams. Even more so, in the last 50 years, human interaction has increased by over 50%, occupying 1/3 of work time.

In 2012, Google embarked on the Aristotle Project, studying hundreds of individuals. Rakovsky joined Google as part of the Aristotle Project. There were vastly different patterns in high-performing teams. After a year of analyzing 100 teams, they couldn’t find a clear solution. In the end, they tackled the problem by focusing on psychological safety.

What did they study?

What distinguished good teams was how members treated each other. They found two key characteristics:
- **“Equality in the distribution of speaking turns”**: As long as everyone has the opportunity to speak, it's fine. If one person dominates the conversation, collective intelligence drops.
- **“High social sensitivity”**, meaning members were good at sensing how others felt based on tone of voice, expressions, and other non-verbal cues.

**Tips**: Talk more about emotions and how we feel. Google also keeps statistics on this. Why not spend time with people who care about me?

In these teams, there is greater psychological safety: **“a sense of trust that the team won’t embarrass, reject, or punish anyone.”** Talk to your teammates about difficult or sad things. Speak about insecurities, fears, and aspirations in a more constructive way.

Sakaguchi, a former police officer and electronics salesman, was in charge of successfully coordinating a team of engineers at Google. However, when he switched teams, he didn’t achieve the same results. A satisfaction study revealed that many people were dissatisfied because there was no **TRANSPARENCY** regarding the contribution and role of team members. To break the ice, Sakaguchi revealed he had advanced-stage cancer. Everyone was shocked. How could Sakaguchi still be there in such a condition? It was because of the fulfillment of helping the team.

Today’s winners succeed because they have the clarity to discard yesterday’s conventional wisdom and seek the new and innovative...

**REFERENCES**:  
[https://www.nytimes.com/es/2016/03/16/espanol/la-busqueda-de-google-por-el-equipo-perfecto.html](https://www.nytimes.com/es/2016/03/16/espanol/la-busqueda-de-google-por-el-equipo-perfecto.html


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">
# An Agendashift Exercise for Planning my PhD semester
By Pepe Hernandez. December 31th, 2024

## What is Agendashift
Agendashift started as a change management model, and in reality, it is a change management model, but it is also a different type of model. It is an engagement model. It can help at every scope and every level to “develop strategy **together**, pursuing strategy **together**, put outcomes before solutions, working backward (from right to left) from key moments of impact and learning.”

Agendashift is a framework created by Mike Burrows. He started as an IT professional who worked on IT and innovation projects for the government of the UK. Then he became an evangelist of Kanban, a consultant, and author; he wrote Kanban from the Inside, Agendashif, Right to Left, and Agendashift 2, and is currently working on "Organizing Conversations: Preparing Gropus to Take on Adaptive Challenges (2024)". Now, his framework is a reference in the change management area. You can see more details in Agendashift webepage. 
=======
Agendashift is a framework created by Mike Burrows. He started as an IT professional who worked on IT and innovation projects for the government of the UK. Then he became an evangelist of Kanban, a consultant, and an author; he wrote Kanban from the Inside, Agendashif, Right to Left, and Agendashift 2, and is currently working on another book project. And now, his framework is a reference in the change management area. You can see more details in Agendashift

Agendashift uses generative patterns, operating on and through an agenda for change. The two patterns are:
- IdOO (Ideal, Obstacles, Outcomes)
- Right-to-Left Strategy Deployment

- I have used it several times. I use it to help small companies scale (https://kanbanor.blogspot.com/2020/06/elaboracion-de-un-plan-de-escalamiento.html). 
- I use it to discover new ways to be more efficient and achieve a more significant impact on teams, for example with the SW Development Area (https://docs.google.com/document/d/1BAicaoqL6XAEPwJtERB6Z8aNneb5SWJbfH-TtDbKkn0/edit?usp=sharing)
- I have used it to find company challenges and create an appropriate conversation environment. For example, with the plannin area of the Secretary of Education.

Now, I am using this for personal purposes. Advance in my PhD. I have a big challenge this semester, starting with Agendashift.

Agendashift has five core activities:
1. Discovery. I want to understand where I would like to go this semester.
2. Exploration. Identify opportunities for change, exploring outcomes in more depth.
3. Mapping. Visualizing plans, priorities, understanding relationships between outcomes
4. Elaboration. Options were generated, framed as hypotheses, and experiments were developed, keeping the change process fed with ideas and informed by results and experience.e
5. Operation. The organizational infrastructure required for change.

In this exercise, I will develop the **Discovery** core activity.

The following exercises are needed for the **Discovery** core activity:
- Celebration-5W
- A two-part True North exercise: Ideal, then Obstacles
- Good Obstacle, Bad Obstacle (I let this for another post)
- Practice Outcomes
- 15-Minute FOTO (Lite)
- Plan on a Page

By the way, you can learn and practice these tools directly from Mike takin the "Leadig with Outcomes" workshop.

## Celebration 5W

 **********************************************************************************************
 * +----------------------------------+             +----------------------------------+      *
 * |              Who                 |             |            What                  |      *
 * |                                  |             |                                  |      *
 * | Who is celebrating with you?     |             | What are you celebrating?        |      *
 * |                                  |             |                                  |      *
 * | Organizational scope/identity;   |             | key accomplishments, objectives, |      *
 * | others involved or supporting.   |             | goals.                           |      *
 * |                                  |             | your next big breakthrough.      |      *
 * +----------------------------------+             +----------------------------------+      *
 *                         +----------------------------------+           ^                   *
 *                         |               Why                |           |                   *
 *                         |                                  |    Tip: Start Here            *
 *                         | Why is this important?           |         and work anticlockwise*
 *                         |                                  |                               *
 *                         | Distilled essence of WHY the     |                               *
 *                         | whole endeavour                  |                               *
 *                         | (Not just the celebration).      |                               *
 *                         +----------------------------------+                               *
 * +----------------------------------+             +----------------------------------+      *
 * |             Where                |             |            When                  |      *
 * |                                  |             |                                  |      *
 * | Where are you celebrating?       |             | When are you celebrating?        |      *
 * |                                  |             |                                  |      *
 * | A venue that makes a statement   |             | Timeframe required for this      |      *
 * | babout how this work is valued.  |             | significant and business         |      *
 * |                                  |             | relevant challenge.              |      *
 * +----------------------------------+             +----------------------------------+      *
 **********************************************************************************************


- What: Systematic Literature Review sent
- Who: Pao, My Children, My Parents, Siblings, Viejo, Jani.
- Where: Mérida / Zacatecas (two events). Online.
- When: January 31st, 2025
- Why: It's a life challenge. There is a commitment. If I don't finish by now, the debt will ascend to 360,000 MXN pesos. It is growing 20k pesos per month.

##The True North
This is like a Change Agent credo of the Agendashift framework. We accept that there always is a better way to work. It also reminds me of the concept of Ideality from TRIZ. Ideality is the utopic system or state with infinite benefits, zero costs, and zero undesired effects. The following text is the True North credo...

	“Imagine...

	Everyone able to work consistently at their ideal best:
	Individuals, teams, between teams, across the organization and beyond
	Right conversations, right people, best possible moment
	Needs anticipated, met at just the right time

	https://www.agendashift.com/true-north.”

Agendashift framework uses three questions so you can relate the True North: “Everyone (You), be able to work consistently at their (Yours) ideal best...”  The intent is to answer the questions with familiar stories to bring to the surface moments where you perform at your highest (as a person)...

### Question 1: What's that like when that’s working at its ideal best for us?
My first story concerns the one-week divulgation article sent for an IEEE proceedings magazine. I participated in the CIMPs (13th International Conference on Software Process Improvement 2024)  realized in Mérida, Yucatán. I participated in facilitating a Workshop with two physical simulations to teach Flow Systems. This is an academic invitation. When you participate and donate your time and effort, you have the right to send an article for free for publication in the IEEE proceedings magazine of the symposium. I didn't know that. So, I wrote an article about one of the two simulations in three days. There were two reviewers of the article. Alex that is also a Kanban Trainer. And Alejandra Romero, who is currently part of my PhD committee.  In just one week, we had an article finished. An article with excellent quality. Every one of us was “working consistently at our ideal best.”


### Question 2: When that’s happening, whose needs are we meeting? What new stories could you tell? As a PhD student and as a beneficiary of a scholarship from the CONAHCYT, the main stakeholders of the PhD are the CONAHCYT, the PhD Program, the Thesis Committee, the Thesis Director, the JCR magazines backed up by MDPI, my coworkers, society, and Me as a student.

I will debrief the needs of each stakeholder:
a. Scholarship provider (CONAHCYT -> Science, Technology, and Humanities Council)
	i. Maintain academic or performance quality by the criteria established in the Call for 	Applications or the agreement that originated the scholarship.
	ii. Maintain the academic quality or performance outlined in the Study Program or the approved 	project, always respecting the academic and administrative regulations established by the 	institution, company, or organization where the studies or projects are conducted during the 	scholarship period.
	iii. Comply with the regulations and monitoring procedures established by CONAHCYT.
	iv. Immediately notify CONAHCYT upon obtaining the degree.
	v. Maintain a minimum GPA of 8.0 or equivalent during the academic period and avoid failing 	any subjects.
	vi. Keep personal information updated in the CVU.
	vii. Exercise the right to submit requests to CONACYT public officials in a respectful and 	written manner.

Reglamento de Becas del Consejo Nacional de Humanidades, Ciencias y Tecnologías. https://www.dof.gob.mx/nota_detalle.php?codigo=5694891&fecha=10/07/2023

b. DITA (Technology and Engineering Applied PhD program) requirements:
	i. 4 international conferences with extended abstracts or full articles, one per year.
	ii. 2 JCR articles.
	iii. TOEFL score of 550.
	iv. The thesis must be checked for plagiarism, ensuring no more than 14% similarity, supported 	by a certificate (several available platforms).
	v. Finish a Thesis Project with the following structure:
		- Chapter 1: Introduction. A large portion of the information comes from the research 		proposal.
		- Chapter 2: State of the Art. This is the systematic literature review of your 		research project.
		- Chapter 3: Doctoral Project. This includes your proposal and the work you have 		conducted.
		- Chapter 4: Evaluation and Results. As the name suggests, explain what, how, and why 		you evaluated your work. It is recommended that the metrics and indicators used be 		justified thoroughly. Results should compare what was achieved to one or more 			references from Chapter 2.
		- Chapter 5: Conclusions and Future Work. In the conclusions, highlight the 			contributions of your research and how you fulfilled the defined objectives and tested 		the hypotheses. Future work outlines how the study could be continued and its 			potential applications.
c. JCR Journals
	i. Each journal has its rules.
d. Society Requierements
	i. I need to do some social work or work for the program to obtain a letter to approve this 	requirement.
e. My Requirements
	i. Finis all mentioned requirements before 4 years.
	ii. Each semester liberates something to publish.
	iii. Develop my skills to apply for the Researching National System.

### Question 3: What stops that? What gets in the way? This question allows you to identify the main obstacles to overcome to achieve the “Key Accomplishment,” in my case, the PhD grade.

But for now, I am thinking of the Systematic Literature Review. In that order, I need an article sent to a Journal.

What prevents me from sending that SLR to a Journal Magazine Committee for review?
- The style of my Thesis Director and mine was not compatible.
- I don’t have the format of the journals
- The Research Protocol is not finished.
- SLR is not finished.
- My PhD Thesis Director is unfamiliar with my topic (long story).
- I sometimes help my wife with her restaurant (Christmas dinners, I buy a good part of the restaurant , and I help on weekends)
- I have four kids
	- Right now, they are on their Christmas vacations
	- My four kids participate in swimming competencies all year long (this year there were more 	than 10 events. Almost one per month.
- I write blogposts for JAG.coop
- I am a part-time teacher (Ibaktor, URL).

Note the root cause:
- I am at 100% full-time. I don't have slack.
- The money is not enough for our family expenses.

Note. More companies die for indigestion than for starving. - Scaling Up. Hamish.

The True North finishes with the identification of the existing obstacles that you need to overcome to point out the True North...  Then, you need to transform those obstacles into outcomes to start working. The 15-minute FOTO is the tool that Agendashift provides for this purpose.

15-minute FOTO (From Obstacles To Outcomes) uses clean language. Clean language is free of assumptions, opinions, and questions. Clean questions aim to be understood by inquiring wholeheartedly without judging, giving an opinion, or pushing the respondent to follow a specific idea. Clea questions are used as a psychological therapy tool.

Questions are presented in the 15-minute FOTO.  The first question transforms the obstacle into an outcome. That is incredible and very logical. What would you like to have happen?

## 15-minute FOTO


 *********************************************************************************************************************
 * 15-minute FOTO                            From Obstacles To Outcomes - as many as you can generate in 15 minutes, *
 * aka the And When X... game                using only clean questions and (for the X's) words previously generated *
 *                                                                                                                   *
 *                                                                                                                   *
 *                                                                                                                   *
 * * One obstacle in                 +--------------------+          +----------------------+                        *
 *   play at any time                |What obstacle might |          |What would you like   |     Obstacles          *
 *   --------------------------------+be in the way of X? +----------|to have happen        |------------------------*
 * * Generates as many               |                    |          |                      |     Outcomes           *
 *   outcomes as you can             +--------------------+          +----------------------+                        *
 *                                                                                                                   *
 * * Start small, go deep                                                                                            *
 *                                                                                                                   *
 * * Help each other enjoy a                                                                                         *
 *   positive conversation                                                                                           *
 *                                                                                                                   *
 *                                         +-------------------------------------+                                   *
 *                                         |  What kind of X?                    |                                   *
 *      +----------------------------------+                                     +----------------------------------+*
 *      |      Where does X come from?                                                                              |*
 *      |                                     What is happening when X?             And when X, then what happens?  |*
 *      |                                                                                                           |*
 *      |      What happens before x?                                                                               |*
 *      +----------------------------------+  Is there anything else about X?    +----------------------------------+*
 *                                         |                                     |                                   *
 *                                         +-------------------------------------+                                   *
 *********************************************************************************************************************


### Do the 15-minute FOTO for the first Obstacle

**Obstacle 1: I don't have the template for the journals I want to send my SLR.

#### What would you like to have happened?
I would like to **“Have the journal and the template.** <- FIRST OUTCOME.

#### Then, what happens?
Then, I share my template with others.
Then, I finish my RSL.
Then, I have a Table Read <The draft article> to meet with my Thesis Director.
Then, I make my validation (the validation checklist)
Then, I get the sign of my Thesis Director and my Committee
Then, I send it to the JCR magazine
Then, I receive feedback
Then, I adjust
Then, I re-send the article
Then, I pay for the publication
Then, I have one of the requirements of the PhD program
Easy and logical.

#### That's correct; where does the template come from?
Option 1. The template comes from the MPDI site.
Option 2. I get the template from similar articles.

W#### What happens before Option 1?
I look into the DPI.
I look on Google.
I look in Reddit.
I have the template.

#### What happens before Option 2?
I create a general search string.
I run the search string using the general search option in MDPI.
I establish the inclusion and exclusion criteria.
I select from 1 to 5 articles.
I read the articles.
I create the template.
I share the template with my PhD Thesis Director.

#### What happens when I have the template?
I continue with the SLR.

## Outcomes generated ordered by logical steps

### Step 1. Look for a JRC backed up
Is there a JCR magazine existing in the MDPI?
Look in the MDPI database.
Are there articles that look similar to your idea article? - Luis Octavio.
Send Articles to Luis.
Obtain the format or stylesheet for MDPI.
See the stylesheet of MDPI.
See several articles and extract the format.
I have three journal options for sending my SLR.
Validation checklist
Log of the process

#### The Validation checklist
Make a table read.
Show this to Jani.
Adjust.
Send to Jani for signing.
Send to Sodel for signing.

### Step 2. The Meta Exercise.
Found Perla’s algorithm for a Systematic Literature Review
Write the method in a Checklist

### Step 3. Planning. Do the protocol:
Finish the QnDReview
A silent meeting with Jani with the <Table Read>
Prepare the <Table Read> for the standup meeting
Use the checklist to extract the data
Identify the data I want to extract
Read the articles
Go to the Protocol.
Go to Sr. Accelerator and update the method.

### Step 4. Perform the Data Extraction.
A silent meeting with Jani with the <Table Read>
Prepare the <Table Read> for the standup meeting
Use the checklist to extract the data
Identify the data I want to extract
Read the articles
Go to the Protocol.
Go to Sr. Accelerator and update the method.

### Step 5. Reporting
Write it in the JCR format
Make the Validation

## Plan on a Page

 *******************************************************************************
 * +------------------------+------------------------+------------------------+*
 * |                        |                        |                        |*
 * |  Short term            |  Medium Term           | Long term              |*
 * +------------------------+------------------------+------------------------+*
 * |  + Urgent outcomes     |                        |                        |*
 * |                        |  + Intermediate        | + Ambitions            |*
 * |  + Action areas        |    Objectives          |                        |*
 * |                        |                        | + Goals                |*
 * |  + Areas of immediate  |  + Signs that you're   |                        |*
 * |    opportunity         |    winning,            | + Aspirations          |*
 * |                        |                        |                        |*
 * |                        |                        | + Values               |*
 * +------------------------+------------------------+------------------------+*
 *******************************************************************************


### Short Term (Here you have urgent outcomes, action areas, areas of immediately opportunity)
- Have MDPI template
- QnD Review
- Each with its validation step (following the Validation Checklist)
...

### Medium Term (Here you have intermediate objectives, signs that you are winning)
- Protocol document
- SLR document
- Each with its validation step (following the Validation Checklist)
...

### Long Term (Ambitions, Goals, Aspirations, Values)
- My Phd Finished
....

## Next Ideas
Using Cynefin to MAP the outcomes. Explain Cynefin.
Good Obstacle, Bad Obsacle exercise.

As you can see, you can plan very well using this framework.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Real Life Drama movies as a training and teaching method
By Pepe Hernandez, December 26th, 2024.

Yesterday Alex told me. Somebody is teaching recursivity like you taught in high school.
https://youtu.be/Q83nN97LVOU?si=5OA2E9EIH9Q_bLMS

I said, joking, "If someone sees you doing something, surely they will copy you." 

Yes. I used to watch movies with my students to teach them something.
I started as a teacher in a basic school in ninth grade.
I teach algebra as a substitute teacher for the last semester of the third secondary grade.
Here in Mexico, we have the primary school, six years (from 6 to twelve years of age)

That reminds me that I need to list the movies I like to teach something. I also need to include real-life films and some series. 

I remember three places where a movie has been helpful. 

My preferred genre is a drama based on actual story movies.

## Movies for teaching in Highschooll.

1. Pirates of Silicon Valley: The story of Bill Gates, Steve Jobs (and Wozniak) stealing the ideas of Bell Labs and creating both technological empires. The History of computing is a critical topic in our technological life.
2. The Social Network is also a digital era and business story. They could see Zuckerberg's legal disputes against Bardo Sabering and the Winklevoss twins. You can learn from digital History.
3. Moneyball. It shows the importance of understanding a problem and how the paradigms are wrong. When someone is obsessed with truly understanding the world, it could change an industry. Billy Bean and Paul De Podesta changed the baseball world with a better economic model. Moneyball is a classic of the power of the right measure for success in an industry.
4. Inception, to teach the concept of recursivity to students in the programming class.

## Real Life Movies
1. Soul Surfer
2. The woman and the sea
3. The perfect game
4. Ford vs Ferrari
5. Rush
6. The hours
7. Hidden Figures
8. Everest
9. The imitation game
10. The Darkest Hours.
11. Oppenheimer.
12. The man that knows infinity.
13. Schindler List
14. One Life
15. Deep Horizont
16. Only the brave
17. Young woman and the Sea
18. NEW Radical (A basic school in Matamoros México teacher used unconventional methods to motivate his students)
19. A million miles away (The story of the usa-mexican Jose Hernandez. How he became the an astronaut.)


## Sport movies based on a true story
1. Invincible
2. Remember The Titans
3. When the Game Stand Stall
4. The perfect game 
5. Moneyball
6. Invictus
7. Greater.
8. American Underdog. The story of Kurt Wagner.
8. Soul surfer.
10. Jacky Robinson true story
11. McFarland
12. Coach Carter
13. Glory road
14. Moneyball
15. The Gabby Douglas Story
16. Unbroken
17. The miracle season

## Series
1. The Last Dance
2. Chernobyl
3. The Play List
4. The Billion Dollar Code
5. Bad blood

## Recommended for Kanban Training
1. Rocket sing
2. The Red Army
3. Invictus
4. Gandhi

You can use the same movie to teach something different. For Example, Moneyball can be used to teach tribal behavior or to understand how to manage a team.

## Risk Management Movies
1. Everest
2. Chernobyl

## Intellectual Property
1. The Founder
2. The million-dollar code
3. The playlist
4. The Dropout
5. We crash -> Related to the startup WeWork


I would update the list. If you have a recommended movie, please.
<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Requirements elicitation in the Age of AI 
October 4th, 2024
by *Karina Chaires*

One of the greatest challenges in software development has always been defining clear and precise requirements. It is essential to have a thorough understanding of what needs to be built before jumping into the coding process. According to Wiegers[Wiegers](https://en.wikipedia.org/wiki/Karl_Wiegers), a requirement is a specification that describes some functionality, attribute, or quality factor of a software system. It may also describe any constraints on how the system is built.

At first, defining requirements may seem like a simple task, but in reality, poorly defined requirements can lead to significant frustrations and setbacks in a project. There are many well-established methods and a wealth of literature on how to properly manage this process. Below, I'll highlight some of the key requirements that, in my opinion, you should consider.

### Key Requirement Types

**Business Requirements**: These outline the goals of an organization.  

**Business Rules**: Policies, guidelines, or regulations that define or restrict aspects of the business. While not software requirements themselves, they often give rise to various software requirements.  

**Constraints**: Limitations imposed on the options available to developers for designing and building a product.  

**Functional Requirements**: Descriptions of behaviors that a system will exhibit under specific conditions.  

**User Requirements**: Goals or tasks that specific user groups must be able to achieve with a system or desired product attributes.

### Deliverables and Artifacts in the Requirements Process

Once the different requirements have been identified, the next step is to produce a series of deliverables that serve as documentation throughout the project. Some common artifacts generated during the requirements process include:

**Artifacts produced during the requirements process**:

- **Business Requirements**  
 - Background  
 - Business Opportunity  

- **Scope and Limitations**  
 - A table outlining the project's scope and limitations  

- **Business Context**  
 - Customer profiles  
 - Customer priorities  
 - Business model diagram  

- **Design and Documentation**  
 - General system structure  
 - Prototypes  
 - Table detailing functional requirements and constraints  
 - Context diagram  
 - Container diagram  
 - Component diagram  


### Moving Towards the Future with AI

Defining requirements is a process that can be either highly abstract or extremely detailed, but the ultimate goal is to be clear about what needs to be done before executing it. In this new era, where artificial intelligence plays a significant role in all areas, it’s possible that AI will eventually solve this issue, eliminating the need to “read the minds” of stakeholders. That’s something we’ll find out in the future. In the meantime, we must continue applying best practices to develop software effectively.

However, until that time comes, it's important that we continue to apply established best practices in software development. Proper requirement management is crucial for building successful systems that meet both business needs and user expectations.


While tools and methodologies have evolved, the human element remains critical. Clear communication, regular feedback loops, and a deep understanding of business objectives ensure that requirements are not only defined but refined throughout the project's lifecycle. As AI tools begin to assist in automating aspects of requirement gathering, the role of developers and stakeholders will shift towards validating and contextualizing those requirements to ensure alignment with the project's goals. By blending human insight with emerging AI technologies, teams can create more efficient, accurate, and adaptable software solutions that better meet user and business needs.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Simple example of liveview 1.0.1

January 04th, 2025
By Miguel Iñiguez

# What is LiveView?

> "LiveViews are processes that receive events, update their state, and render updates to a page as diffs.
> The LiveView programming model is declarative: instead of saying once event X happens, change Y on the page,
> events in LiveView are regular messages which may cause changes to the state. Once the state changes, the
> LiveView will re-render the relevant parts of its HTML template and push it to the browser, which updates the page in
> the most efficient manner.    
>      -- [Phoenix LiveView Documentation](https://hexdocs.pm/phoenix_live_view/welcome.html) 

# Example
1. Create a new project
```console
mix phx.new todo_live --live --no-ecto
```

2. Start the server
```console
cd todo_live
mix phx.server
```

3. Create a new LiveView file ```lib/todo_live_web/live/todo_live.ex```
```elixir
defmodule TodoLiveWeb.TodoLive do
  use TodoLiveWeb, :live_view

  def mount(_params, _session, socket) do
    {:ok, assign(socket, tasks: [], new_task: "")}
  end

  def handle_event("add_task", %{"task" => task}, socket) do
    updated_tasks = socket.assigns.tasks ++ [task]
    {:noreply, assign(socket, tasks: updated_tasks, new_task: "")}
  end

  def handle_event("update_task", %{"value" => value}, socket) do
    {:noreply, assign(socket, new_task: value)}
  end

  def render(assigns) do
    ~H"""
    <div class="todo-list">
      <h1>Todo List</h1>
      <form phx-submit="add_task">
        <input type="text" name="task" value={@new_task} placeholder="Add a new task"
               phx-keyup="update_task" />
        <button type="submit">Add Task</button>
      </form>
      <ul>
        <%= for task <- @tasks do %>
          <li><%= task %></li>
        <% end %>
      </ul>
    </div>
    """
  end
end
```
4. What does the code do? 

* mount/3: Initializes the state with an empty list of tasks (tasks) and a field for the new task (new_task).
* handle_event/3:
    * "add_task": Adds the new task to the list.
    * "update_task": Updates the text field as you type.
* render/1: Generates the dynamic HTML with the current state. 

5. Add new LiveView route ```lib/todo_live_web/router.ex```
```elixir
scope "/", TodoLiveWeb do
  pipe_through :browser

  live "/todo", TodoLive
end
```

6. Add a basic style ```assets/css/app.css```
```css
.todo-list {
  max-width: 500px;
  margin: 0 auto;
  text-align: center;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  margin: 5px 0;
  padding: 10px;
  background: #f4f4f4;
  border-radius: 5px;
}

```
<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


     **A Single Text File Is My Productivity Hack**

October 22nd, 2024
By Alejandro Garcia

We are living in the new dark ages. In the future, when our Cyborg descendants are trying to make sense of the early 2000s
They will have a tough problem finding evidence because files get lost or even more frustrating.
The tools that could read the file.
Stop working.

I'm terrified of storing my notes in file formats that might become obsolete in the next decade.
These are my most private thoughts, a snapshot of my growth.
Maybe they are worthless to the rest of the world, but they are valuable to me.

That is why I type my notes in plain text.
However, having many small files creates challenges with organization, searchability and formating.
So in 2020, when I read this post: [My productivity app is a never-ending .txt file](https://jeffhuang.com/productivity_text_file/)
I was inspired to try it myself.

Being an Emacs and Bash user immediately resonated with me.
So the idea is that you write your notes in a long text file,
and then you need to search for something it's as simple as doing a `grep` of your text file.

What I like about the single-text file method is that it doesn't require anything.
Just open a text file.
Write the date in one line and write your note next to it, and you're done.

However, over the years, I have settled on a couple of "hacks" that make this even better.
My tricks are:

- Use jrnl
- Create a shortcut on your keyboard to add notes.
- Use a variant of the Getting Things Done organization method.

Let's see these tricks.

# Use `jrnl`

[Jrnl](https://jrnl.sh/en/stable/) is a command-line app that formats and searches your text file.

For example, if I have an idea that I want to share with @Agus (he is another member of our cooperative).
I would write in the command line:

``` bash
jrnl Ask @Agus How can I recycle pet plastic for my @3d-printer
```

This instruction will append the following entry in my ~/jrnl.txt file.

``` bash
$ tail -1 ~/notes/jrnl.txt
[2024-10-22 01:20:15 PM] Ask @Agus How can I recycle pet plastic for my @3d-printer
```

As you can see, the current date and time have been prepended to our note.
Now, let's suppose: I'm meeting @Agus in person, and I want to remember everything I would ask him.
The command is:

``` bash
$ jrnl @Agus
┏━━━━━━━━━━━━━━━━━━━━┓
┃  16 entries found  ┃
┗━━━━━━━━━━━━━━━━━━━━┛
2023-09-10 07:07:07 AM @agus about the naked objects pattern, maybe search for
a video example and develop it in Eiffel
.
.
.
2024-10-22 01:20:15 PM Ask @Agus How can I recycle pet plastic for my
@3d-printer
```

Observe that the search is case insensitive, so it will return me entries with @Agus and @agus equally.
We can search by either having one OR two tags:

``` bash
$ jrnl @agus @nohemi
┏━━━━━━━━━━━━━━━━━━━━┓
┃  18 entries found  ┃
┗━━━━━━━━━━━━━━━━━━━━┛
```

Also, we can search by entries that have both tags (and).

``` bash
$ jrnl @agus -and @3d-printer
┏━━━━━━━━━━━━━━━━━┓
┃  1 entry found  ┃
┗━━━━━━━━━━━━━━━━━┛
2024-10-22 01:20:15 PM Ask @Agus How can I recycle pet plastic for my
@3d-printer
```

We can also search by date.

``` bash
$ jrnl -on 2024-10-22
┏━━━━━━━━━━━━━━━━━┓
┃  1 entry found  ┃
┗━━━━━━━━━━━━━━━━━┛
2024-10-22 01:20:15 PM Ask @Agus How can I recycle pet plastic for my
@3d-printer
```

We can see what tags we have:

``` bash
$ jrnl --tags
┏━━━━━━━━━━━━━━━━━━━━━┓
┃  526 entries found  ┃
┗━━━━━━━━━━━━━━━━━━━━━┛
@racket-con          : 31
@ideas               : 25
@til                 : 23
...
```

You can run all those commands and get even Json, and then use other tools like `jsonata` or `jq` to do some further processing.

``` bash
$ jrnl @agus -and @3d-printer --format json
┏━━━━━━━━━━━━━━━━━┓
┃  1 entry found  ┃
┗━━━━━━━━━━━━━━━━━┛
{
"tags": {
"@3d-printer": 1,
"@agus": 1
},
"entries": [
{
"title": "Ask @Agus How can I recycle pet plastic for my @3d-printer",
"body": "",
"date": "2024-10-22",
"time": "13:20",
"tags": [
"@3d-printer",
"@agus"
],
"starred": false
}
]
}
```

All in all, `jrnl` has been the most user-friendly way to keep a long text file as my notes document.

# Create a keyboard shortcut

My next hack is to create a shortcut that opens your text editor with the notes file already opened with a text line.
You can ask ChatGPT how to do this for your operating system.

## Create a script to open the text file

In my case, using the Ubuntu operating system with the `gedit` text editor is as simple as:
creating a script `nano ~/append_datetime_to_jrnl.sh`

``` bash
#!/bin/bash
# Script to append the current date and time to jrnl.txt and open it in gedit
current_date_time=$(date "+%Y-%m-%d %H:%M:%S")
echo "$current_date_time" >> ~/notes/jrnl.txt
gedit ~/notes/jrnl.txt
```

Then make the script executable: `chmod +x ~/append_datetime_to_jrnl.sh`

## Assigen a the script to a keyboard Shortcut

Go to Settings -> Keyboard -> Custom Shortcuts.
Click Add Shortcut.
Set the Name to something like Append Date/Time to Journal.
In the Command field, enter the path to your script:
bash
Copy code  "/home/your-username/append_datetime_to_jrnl.sh"
Replace your-username with your actual username.
Set the desired keyboard shortcut by pressing the keys you want to use (e.g., Ctrl + Alt + J).
Click Add.

# Using the Getting Things Done method
Finally, the GTD method, popularized by David Allen, has many techniques for organizing oneself.
However, the core of the method is to have several lists of activities depending on the context.
for example an

@home
: is to write things that you intend to do when you are at your home

@agus
: is to write lists of things you want to discuss when seeing Agus.

@email
: to write emails that you would like to write.

@some-day
: is to write projects or dreams you would like to tackle someday.

As we have seen with `jrnl`, it is straightforward to implement all of these lists as a single text file with tags.

# Bonus tip: I Love Me list

My friend and supervisor, Paul M. Jones, taught me to keep the @I_love_me list.
The idea is to write down your accomplishments, personal and professional.
This list is essential.

Sometimes, we are sad and need a little shot of our "self-esteem."
It's just a matter of writing `jrnl @I_love_me` and reading about the things we have done in the past to find perspective.

The list also has a professional value.
When is time for your yearly review at work.
And you need to remember your accomplishments is as simple as:

``` bash
jrnl @I_love_me -and @work -from 2024-01-01 -to 2024-12-31
```

# Conclusion

A simple text file, with `jrnl` and some habits inspired by the GTD, has been my best note-taking application.
This method will continue to work in the next 40 years.
Or when it's time to merge our conciousness with the great computer in the sky, I'll have my notes ready ;-)

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# The importance of Software Industry in the World.
By Pepe Hernandez. January 27th, 2025

After the essay of Mark Andreessen in 2011 "Why Software is eating the World", many things had happened.
In 2011, the most successful companies were software driven...
https://a16z.com/why-software-is-eating-the-world/


Pixar led the industry over Disney (Disney had to acquire Pixar to stay relevant)
Google led the marketing industry
Zynga led the game market with Farmville
iTunes, and Spotify led the music market
Amazon, led the retail market.
Amazon, led the book market.
The book market transformed to digital.
Every financial transaction is done by software. 
The leading software companies in the world are American.

Andreessen identified several challenges at that time:
- 2010's were hard economic times. Stronger companies grew from this times.
-Many people in the US, and around tow or lack the educations and skill required to participate in the great new companies coming out of the SW revolution.
- A lot of companies were born in that years, but showing true value for customers, was not easy.

Andreessen mention a pair of thoughts about software industry.
1) Other companies needed to understand what successful SW companies were doing.
2) He was sure about how key SW companies would thrive

In 2019 Tarry Singh, Former contributor of Ford published a derived article from the Andreessen article "Software Ate the World, Now AI is Eating Software)

Nobody understood Andreessen in his 2011 essay. 
Singh argued that "Little envision that the same software industry could be at risk of being eaten".

From 2011 to 2019, AI maturity, and important factors were solved to overcome the constraints.
- Cost of Cloud Storage
- Big data sources (data lakes, from example)

Examples of successful AI applications
- AI-startups in the transportation crated value by optimizing shipments.
- Code completion tools, like Tab Nine, TypeSQL, and BAYOU....
-- Tab Nine learned from 2 million files from the code repository of GitHub
One Tab Nine achieved that, Jacob Jackson realized the parallelisms between code and natural language and created GPT for Open AI.




https://www.forbes.com/sites/cognitiveworld/2019/08/29/software-ate-the-world-now-ai-is-eating-software/

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# TRIZ Applied to an Academic Problem
By Pepe Hernandez, 2024

## Introduction  

This work addresses the challenge posed by the professor regarding the integration of elements or topics related to the **Technology and Innovation Management** class into our doctoral thesis project. Among the alternatives provided, we had to answer the question:  

### How can Technology Management be used to propose an improvement to our projects?  

- Incorporate technology management elements to enhance our projects  
- Propose a new research line  
- Use tools such as AI  
- Employ various experimental methods  

I chose **option c: "use a tool."** The selected tool is **TRIZ**. The approach to using TRIZ is to **systematically address** the fundamental research questions outlined in my research proposal.  

But what is **TRIZ**, and how can it be useful in the context of this class?  

> *"To solve problems that require thinking outside the box, we have historically relied on talented thinkers. This is not a replicable systematic process and is solely based on individual thinking—an approach limited by personal knowledge, experience, inspiration, and luck."*  
> — *Gordon Cameron, 2010*  

### What is TRIZ?  

**TRIZ** is a **Russian acronym** that stands for **"Theory of Inventive Problem Solving."** It was developed by **G. Altshuller** between **1946 and 1985** in the USSR. By the **1980s**, TRIZ had expanded globally, and in the **late 1990s**, it was incorporated into **Six Sigma** and other quality disciplines.  

Altshuller stated:  
> *"You can wait 100 years for enlightenment, or you can solve the problem in 15 minutes by applying these principles."*  

Through the study of over **200,000 patents**, Altshuller discovered, among other things:  

- The **solutions** to problems and their resolutions **recur** across multiple industries, services, and products.  
- The **classification of a problem** predicts its solution.  
- Innovations use **scientific effects** outside the field where they were originally developed, which anticipates **cross-functional usefulness** through **benchmarking**.  

### Tools for This Exercise  

In this exercise, I will use **three powerful tools** to analyze and refine my doctoral research proposal:  

1. The **General TRIZ Framework**  
2. The **Nine Windows** technique  
3. The **Problem Zones** or **5W + 2H** method  

---

### General TRIZ Framework  

**Edward de Bono**, in his book *Six Thinking Hats*, presents a technique that serves as a **starting point for creativity**. It involves compiling a **list of creative problems** by generating **"How can I...?"** questions.  

This approach helps our minds gather ideas quickly. To contextualize the exercise, a **focus area** is established. Examples of focus areas include:  

- Recent problems  
- Your workplace  
- Everyday life  
- Continuous improvement  

Using the **focus of this study** as an example, we formulate our **TRIZ** question:  

#### **Key Research Question**  

> *"How can I increase the productivity of independent software developers so they can compete with super-developers using AI-powered tools like ChatGPT, Amazon Whisperer, or GitHub Copilot?"*  

---

### Contradiction in TRIZ  

To begin with TRIZ, we must **start with a contradiction**. A problem can be framed as a **contradiction**. Examples:  

- *How can I sleep and not sleep at the same time?*  
- *I want my coffee hot, but I also want it cold.*  

A **contradiction** is often associated with a **tradeoff** in English.  

For our exercise, to define the contradiction, we need to identify the **key elements** in the original question:  

#### **Key Elements of the Problem**  

- **Increase productivity:** The main goal is to improve the efficiency and effectiveness of developers.  
- **Independent software developers:** These are the subjects of the problem who need to compete in a highly technological environment.  
- **Use of advanced AI tools:** The "super-developers" leverage tools like **ChatGPT, Copilot, or Whisperer**, setting a high standard of competition.  

#### **Refined Contradiction**  

> *"How can I increase the productivity of independent software developers so they can effectively compete in an environment dominated by super-developers using advanced AI tools—without incurring prohibitive costs or requiring an unattainable level of technical skills?"*  

                  +---------------+  +---------------+                   
                  |               |  |               |                   
                  |    General    |  |    General    |                   
                  |    Problem    |  |    Solution   |                   
                  |               |  |               |                   
                  +-------^-------+  +-------+-------+                   
                          |                  |                           
+--------------+  +-------+-------+  +-------v-------+  +---------------+
|              |  |               |  |               |  |               |
|   Problem    |  |    Specific   |  |   Specific    |  |  Selection    |
|   Analysis   +-->    Problem    |  |   Solution    +-->  & Evaluation |
|              |  |               |  |               |  |               |
+--------------+  +---------------+  +---------------+  +---------------+


	      Figure 1. General algorithm of TRIZ. Source: Phillips.

## TRIZ and Its Applications  

TRIZ is used in multiple companies around the world for **solving invention-related problems**. The previous diagram was obtained from a review of a **masterclass by Philips**, where the methodology is promoted  (*Masterclass: How to Solve Your Technical Problems Using TRIZ | Philips Engineering Solutions, 2019*).  

TRIZ is based on the assumption that:  

> **"Someone, somewhere, has already solved your problem—just in a different field."**  

Creativity consists of **finding that solution and adapting it** to the specific circumstances of the problem.  

### TRIZ Problem-Solving Process  

1. **Problem Analysis** – Identify and understand the problem.  
2. **Generalization of the Problem** – Abstract the issue into a broader context.  
3. **Search for Solutions in Other Fields** – Investigate how similar problems have been solved elsewhere.  
4. **Adapt the General Solution** – Apply the identified solution to the specific problem.  
5. **Evaluate the Alternatives** – Assess the effectiveness of the adapted solution.  

If **undesired effects** arise, the analysis must be **refined or redefined**.  

If a **new problem emerges** from the evaluated alternative, a **new TRIZ iteration** is necessary.  

---

### **The Concept of Idealization in TRIZ**  

A guiding principle in TRIZ is **idealization**. The **equation that defines idealization** in TRIZ is:  

\[
\text{Idealization} = \frac{\sum \text{Benefits}}{\sum \text{Costs} + \sum \text{Harms}}
\]  

This equation helps to **easily determine** whether a solution improves a problem compared to the baseline.  

---

## **Exercise 2: General TRIZ Framework**  

### **Analysis and Solutions for Increasing Software Engineers' Productivity**

##### **Specific Problem**  
➡ **Increase the productivity of independent software engineers** so they can **compete against more specialized engineers** equipped with **support tools such as artificial intelligence tools.**  

#### **General Problem**  
➡ **How to increase the productivity of knowledge workers** to **compete against better-equipped and more skilled workers?**  

#### **General Solution**  
Peter Drucker proposes **four key points** to improve the efficiency of knowledge workers:  
- **Focus on the task at hand.**  
- **Consider the knowledge worker as an investment**, as they are a means of production.  
- **Knowledge workers are responsible for their own contribution.**  
- **Quality is as important as quantity.**  

#### **Specific Solution**  
To **increase the productivity of independent software engineers**, applying **Drucker’s general solution:**  

##### **1. Focus on the task at hand → Focus on outcomes**  
Josh Seiden defines **outcomes** as a **change in the behavior of people or elements in the system we are working on.**  

##### **2. The worker is an investment → Treat independent professionals as service providers**  
David Anderson states that, **as independent professionals, we offer services to others, and these services must be managed accordingly.**  

##### **3. Workers are responsible for their own contribution**  
Each independent worker should:  
- Define **what they offer and the quality criteria** for their service.  
- **Continuously improve** their services and skills.  

##### **4. Quality is as important as quantity → What is the optimal service quality?**  
A **2004 study by Ramírez and Nembhard** analyzed **23 productivity models** and created a **taxonomy of 13 dimensions** grouping the metrics used in each model. Their findings include:  
- **71% of the models** define productivity in terms of **quantity.**  
- **Only 21%** explicitly consider **quality.**  
- Each model examined **only uses 2 or 3 productivity dimensions.**  

This raises a **key research question** for our study:  
➡ **What are the relevant productivity metrics for independent software developers?**  

#### **Summary: Key Insights from TRIZ for Our Doctoral Thesis**  
The **TRIZ methodology** helped us identify **two key areas** to advance in our doctoral research:  
1. **Focus on tasks and outcomes.**  
2. **Define the interfaces of independent developers as a microservice.**  
3. **Establish quality metrics related to the service.**  
4. **Identify productivity metrics relevant to independent software developers.**  

## **The "Nine Windows" Tool in TRIZ**  


               Past System   Present System   Future System  
            +--------------++---------------++--------------+
            |              ||               ||              |
    Supra   |              ||               ||              |
    System  |              ||               ||              |
            |              ||               ||              |
            +--------------++---------------++--------------+
            +--------------++---------------++--------------+
    System  |              ||               ||              |
            |              ||               ||              |
            |              ||               ||              |
            |              ||               ||              |
            +--------------++---------------++--------------+
            +--------------++---------------++--------------+
            |              ||               ||              |
    Sub     |              ||               ||              |
    System  |              ||               ||              |
            |              ||               ||              |
            +--------------++---------------++--------------+
		  Future 2. Nine Windows Architectura.
                    Source: The Innovator's Toolkit  

The **"Nine Windows"** tool in **TRIZ** is a technique used to **expand the perspective of a problem** and explore **more comprehensive solutions.** It consists of a **3x3 diagram,** where:  
- The **columns** represent **different moments in time** (**past, present, and future**).  
- The **rows** represent **different system levels** (**system, subsystem, and supersystem**).  

By analyzing a problem through these **"nine windows,"** we consider a **broader context,** its **possible evolution,** and **interactions between system components.**  
This methodology helps us **identify non-obvious solutions** that might be missed if we only focus on the **immediate problem and its current scale.**  

### **Figure 3. Example of the Nine Windows application.**  


               Past System   Present System   Future System  
            +--------------++---------------++--------------+
            |              ||               ||              |
    Supra   |  Forest      ||    Ikea       ||  Forest      |
    System  |              ||               ||  Stewardship |
            |              ||               ||  Council     |
            +--------------++---------------++--------------+
            +--------------++---------------++--------------+
    System  |              ||               ||              |
            |  Tree        ||   Table       ||  Recycling   |
            |              ||               ||              |
            |              ||               ||              |
            +--------------++---------------++--------------+
            +--------------++---------------++--------------+
            |              ||               ||              |
    Sub     |  Sapling     ||   Wood        ||  Soil        |
    System  |              ||               ||              |
            |              ||               ||              |
            +--------------++---------------++--------------+
		  Future 2. An example of the nine windows.
                  **Source: "9 Windows - Sketchplanations"**  

On the **Sketchplanations** website, an example of a **system** (in this case, a **table**) placed at the center of the diagram demonstrates how:  
- **Looking back in time:** The table originates from a **tree.**  
- **Looking forward in time:** The table might become a **second-hand piece of furniture** in the future.  

Each level (**system, subsystem, and supersystem**) can be analyzed:  
- **Present:**  
  - At the **system level**, the table is a product sold by companies like **IKEA.**  
  - At the **subsystem level**, it consists of components such as **wood.**  
- **Future:**  
  - The **recycled table** might turn into **compost.**  
  - At the **supersystem level**, this waste could become part of a **reforestation program.**  
- **Past:**  
  - At the **system level**, the table was once a **tree.**  
  - At the **supersystem level**, it belonged to a **forest.**  
  - At the **subsystem level**, it started as a **sapling** that eventually grew into a mature tree producing wood.  



to be continued...

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">

# **Teaching Academic Writing with the Macro-Toulmin Model**  
By Pepe Hernández. February 2nd, 2025  

"Why we didnt learn this way How to right academic papers?"
Alex shared with me his favorite way to write an article.
This is gold.

Enjoy the resume...

Learn from the masters, not from the students.

------------------------------------
## My journey to master academic writing

Searching for guidance on academic papers.
I expected my thesis director would guide me trought this journey.
My thesis director ask me to investigate how to write an RSL.
Then I ask, for the expert I know in Sw Engineering about Systematic Literature Review.
I knew she followed the Kitchenham Method.
She suggested me to investigage about PRISMA. Another method.
I pass a semester investigating, and finding tools in accordance with both methods.
At the end of the semester, and a lot of pain, Alex suggested to me Macro-Tulmin.
Why did I choose the "right" way.
Ask the people that I supposed to know how to do it.
Alex told me.
I dont expect a lot for my colleagues, I thing by default that they are wrong.
Then I start to read.
When I read something that I rationalize is good.
I read more from that author.
And, then I try to read for criticisms to the ideas proposed for the author.
And, that is how I found the Macro-Tulming.
Assuming everybody is wrong (most of them), but a few illuminated people, and frequently not understood, not popular, and outside the domain have a good answer to my question.
You did the normal way. 
I do it differently.

------------------------------------
## Experience is not synonym of a best practice, neither a good practice

- I have forthy years doing this in the same way.
- You have forthy years doing this in a bad way.
Our colleagues have been teaching academic writing for 20 years.
Well, they have been mis-teaching academic writing. Because the followed the same path, ask to someone who assume they were doing well.

------------------------------------

## An exercise before the explanation. Macro-Tulmin with ChatGPT
Now, that I know the elements of the Model that foster academic writing, its time to make a persona exercise, and automate it with artifitial intelligence.

Lets, go.

### First iteration. Find the elements of Macro-Tulmin y 3 papers.
Ientify the elementos of Macro-Tulmin
Make a LiteraryNote on Zettlekasten. 
Make a PermanentNote, adding my reflextion about the MacroTulmin.
Make a plus/delta Analysis. This will be an input for the next iteration.

This will be a post for the blog.

### Second iteration. Elaborate the prompts from ChatGPT.
Elaborate the adequate prompts, to CHATGPT. 
Ask them to elaborate a assesment of the paper respect to the model.
Make a LiteraryNote on Zettlekasten foe reach article.
Add the content to the reflection of the permanent note.
Make a plus/delta Analysis. This will be an input for the next iteration.

### Thir iteration.
Adjust the prompt.
Evaluate if this is something for all the papers you will read from then.
Add a final reflection to the permanent note.

------------------------------------

## **Reference**  
Kock, C., & Hegelund, S. (2003). *A Good Paper Makes a Case: Teaching Academic Writing the Macro-Toulmin Way.* In L. Björk, G. Bräuer, L. Rienecker, & P. S. Jörgensen (Eds.), *Teaching Academic Writing in European Higher Education* (pp. 317-331). Kluwer Academic Publishers.

------------------------------------


* Students often struggle to define the overall objective of an academic paper and fail to recognize how each section contributes to the paper’s overarching goal.  
* Instead of developing a coherent argument, they focus on isolated parts of the paper.  
* As a result, professors experience frustration due to the poor outcomes, but students feel EVEN MORE frustrated.  
* Toulmin’s method has not been particularly effective for justifying claims, as it allows justifications in arguments where none truly exist.  
* The proposed model adopts a macroscopic, top-down approach, emphasizing that an academic paper should be understood as a unified whole.  

This model serves both as an evaluation framework and as a heuristic tool for academic writing.  

A visual representation of the model is included in the article. Every academic paper should incorporate ALL the essential elements depicted in the diagram.  

## **Key Components of the Toulmin Method**  

### **Claim**  
* The central argument or conclusion the writer puts forward. It must be original rather than a mere repetition of previous authors’ statements.  

### **Data**  
* The evidence supporting the claim.  
* Any information that does not support the claim MUST BE OMITTED.  
* Counterevidence that could challenge the claim should also be discussed.  
* Types of data: theoretical frameworks, findings from other studies, or self-generated data.  

### **Warrant (Method)**  
* The method used to connect the data to the claim.  
* The justification must explain what data was collected, how it was gathered, how it was selected, and how it was interpreted.  
* Methods vary by academic field.  
* Professional competence is linked to mastery of research methods within a given discipline.  

### **Backing**  
* The rationale for accepting the chosen method.  
* Support may come from:  
  - Established experts.  
  - Previous studies using the same method.  
  - The method’s widespread acceptance.  

### **Rebuttal**  
* The identification of potential challenges to the method.  
* If data contradicts the claim, it should be addressed as part of the justification, not the rebuttal.  
* Ethical and professional integrity require explicitly stating the method’s limitations.  

### **Qualifier**  
* Indicates the degree of certainty of the claim.  
* Suggested phrases include: “this strongly suggests” or “a plausible explanation would be.”  

---

## **GUIDE TO USING THE MACRO-TOULMIN MODEL**  
Students should reflect at different stages of writing (beginning, during, and finalizing):  
**“What do I have in each part of the model?”**  

This highlights the importance of Research Methodology—not just any methodology, but one tailored to the student’s field of interest, work, or expertise.  

> *"Framing an academic paper as a SINGLE ARGUMENT can help students use METADISCOURSE to clarify the overall structure of their paper."*  

Note: Although many academic papers contain multiple claims, they are often structured hierarchically.  

---

## **EXERCISE 1: Early Claim Formulation**  
1. Write freely for 8-10 minutes on the topic: *"The essence of my paper is..."*  
2. Refine the core idea into a single statement or question.  
3. Based on this statement, formulate the claim of your paper. Ask yourself: **“If I had to submit this paper tomorrow, what would my conclusion be?”**  
4. Read it aloud.  
5. *(Optional)* Choose the strongest claim for a full paper.  

## **EXERCISE 2: Analyzing Student Examples**  
1. Select three student papers.  
2. Read them silently.  
3. Identify the claim, data, justification, rebuttal, and support.  

## **EXERCISE 3: Playing Devil’s Advocate**  
1. What is the primary claim? Given the argumentation, is it reasonable?  
2. Are the data sources credible and sufficient?  
3. Does the method appear sound?  
4. How well do the method and rebuttal connect?  
5. Considering the rebuttals and supporting evidence, how valid is the claim?  

## **EXERCISE 4: Applying the Model to Your Own Paper**  
If all elements are addressed and aligned, the paper is on the right track.  

---

## **EXERCISE 5: Evaluating Argument Structure in My Paper**  
*(Model examples, adapted from an archaeology paper, in italics.)*  

**Claim:** *“What is my central argument at this stage?”*  
- *Example: The ancient city of X directly influenced the architecture of city Y. Therefore, migration must have occurred from X to Y.*  
- **My paper:** …  

**Data:** *“What evidence supports this claim?”*  
- *Example: The bricks used in X and Y are identical to the millimeter.*  
- **My paper:** …  

**Warrant:** *“What method will I use to establish this connection?”*  
- *Example: A description of the process for selecting samples, measuring bricks, and determining their origin.*  
- **My paper:** …  

**Rebuttal:** *“What potential issues or criticisms exist?”*  
- *Example: The similarity in bricks could be coincidental rather than evidence of migration.*  
- **My paper:** …  

**Backing:** *“What supports the validity of this method?”*  
- *Example: The high improbability of such similarities being coincidental suggests a historical connection.*  
- **My paper:** …  

**Qualifier:** *“How strong is my claim given the rebuttal and backing?”*  
- *Example: It is highly probable that migration occurred from X to Y, but further evidence is needed.*  
- **My paper:** …  

---

## **Conclusion**  
* The Macro-Toulmin model can be particularly useful in advanced academic settings where reading and writing research papers is required.  
* Some academic papers integrate these elements seamlessly, while others explicitly outline them in dedicated sections.  
* Reading scholarly work is not only about understanding its content but also about learning how to structure our own arguments effectively.  
* Using this model fosters critical discussions in academic reading, such as:  
  - *“Data X or Y does not support the claim made in the paper.”*  
  - *“A methodological objection is raised but not properly addressed.”*  
* The authors advocate for using the **Macro-Toulmin Model** in academic writing, urging students to shift their focus from isolated sections to a holistic, top-down approach to coherence.  



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# The billion dolar Code. A Netflix series about code infringement. The case of Terreavision and Google Earth.

October 20th, 2024
By Pepe Hernandez

In 1993, in Berlin, an artist (Pavel Mayer or Yuri in the series) and a hacker (Joachim Schlüter, portrayed as Carsten in the series) came together to create software ahead of its time: TERRAVISION. This project allowed users to navigate the globe and zoom in to get a physical view of a location. The interface for selecting and navigating to the desired place was a sphere. To develop it, they partnered with one of the largest companies in Germany, Deutch Post, now Deutch Telecomm. The project brought together a group of hackers and designers who created an interface that preceded Google Earth by eight years. The ART+COM project came before Google's, which wasn’t publicly released until 2001.

In 2014, ART+COM filed a lawsuit against Google, accusing it of infringing the 1995 TERRAVISION patent with its Google Earth software, published in 2001. In May 2016, a U.S. District Court jury ruled in favor of Google, arguing that there was prior publication before the patent registration in 1994, referring to a geographic visualization system called "SRI Terravision." SRI stands for Stanford Research Institute. The jury asserted that "Art+Com could not prove its patent infringement claim because the patent was anticipated by the public prior to the December 1995 priority right claim."

In the story, the two German hackers visit Silicon Valley. Astutely, the Chief Engineer (Warren Stuart, a fictional character) at Silicon Graphics is impressed with what Pavel and Joachim have accomplished. The engineer invites Joachim (the hacker). Thanks to the mutual admiration and connection between Joachim and Warren, Warren confesses the full operation of their invention to him, something he would regret years later. In 2001, when the company is still working on its project in Germany, they discover that Google had overtaken them and that Warren had stolen their idea. This part of the series is fictional but highlights the importance of protecting intellectual property before sharing it publicly.

One of the conclusions hinted at in the miniseries is that proving a software program has been plagiarized is always a challenge in courts around the world. There are many similarities in software features, companies are reluctant to show their complete code, and it’s difficult to find court experts with the expertise necessary to understand the code.

In general, various reviews and opinions about the miniseries discuss how it’s almost impossible to win legally against a company as large and resourceful as Google, even if you are right. As a final note, Google’s intellectual property manager attempted to purchase the patent from ART+COM prior to the release of Google Earth. The negotiation was unsuccessful. ART+COM was left without the project, with an invalidated patent, and without the economic benefits of the patent.

P.S. The key article was called Terravision, and ART+COM's project trademark was also Terravision. Why? Was there a relationship between ART-COM's Terravision and SRI's technical note? We will never know.

Key intellectual property concepts identified in the series:

There are two key elements of intellectual property: hardware and software.
The hardware was represented by the interface used to navigate TERRAVISION. In the miniseries, the interface designer tests many alternatives before deciding on a globe to navigate the application.
The software, the core of the system, consisted of an algorithm that allowed maps to load gradually instead of all at once, in packets of 128 kilobits (the size of the memory). There was also a new floating coordinate system, which is the basis of current geographic information systems (GIS).
There is a third element of intellectual property: the maps themselves, which were obtained from various sources. The miniseries doesn’t delve into or criticize how these maps were obtained, but ART+COM had all the maps available at the time to make their project possible.

Personal reflections on how intellectual property influences...

Several key conclusions can be drawn from the provided summary regarding the context and implications of the case between ART+COM and Google related to Terravision:

- **ART+COM was an innovative company ahead of its time.** The Terravision project, developed in the year they built the prototype presented at the Kyoto fair, demonstrated the functionality that Google Earth would display years later. Technological innovation can be ahead of its time. In this context, it is crucial to be aware of the inherent risks in protecting intellectual property in emerging industries, such as Geographic Information Systems (GIS) in this case.
- **Legal complexity of intellectual property in the software industry.** ART+COM was unable to adequately protect its patent due to the existence of prior art (the SRI visualization system publication), which highlights how early disclosure of an innovation can prevent companies from obtaining later legal protection, even if they were pioneers in their field.
- **Proving software plagiarism in court is difficult.** The case reflects one of the significant barriers in software infringement lawsuits: demonstrating that a software program has been plagiarized is complicated due to the technical nature of software, the difficulty in accessing source code, and the lack of judicial experts specializing in understanding and comparing functionalities.
- **The economic power of companies matters in litigation.** The case also exposes a critical point discussed in the miniseries: it’s difficult, if not impossible, to legally compete against tech giants like Google. Even if you are right, the access to massive legal and financial resources by large corporations can tilt the scales in court.
- **Several key intellectual property elements related to software.** The hardware (user interface) and software (map-loading algorithms and coordinate systems), as well as maps obtained from various sources, formed the complete globe exploration system. Legally protecting each element separately and together is complex.
- **An intellectual property manager was necessary.** There should have been someone proactively responsible for this task. Just as a financial manager was designated in the series, there should have been someone assigned to handle intellectual property.
- **The judicial system is prone to bias.** The perception that one cannot defeat a company like Google, regardless of the merit of the case, reflects a broader critique of the judicial system in intellectual property cases, where size and financial resources play a determining role in outcomes. This presents a challenge for small entrepreneurs in emerging industries.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# The Future of Money: Control, Chaos, or Something Else?
February 8th, 2025
by *Agus Rumayor*

Those who know me realize that many of my conversations (outside of tech and programming) revolve around imagining a better future where society manages abundance rather than scarcity.

But let’s be honest: every path to that future seems bumpy, painful, and deeply disruptive to our current systems.

I want to explore two possible futures: government-controlled money and decentralized money, and touch on a hybrid approach. The truth is, I don’t like any of these scenarios because we are already experiencing the early consequences of each. It sometimes feels like society is doomed no matter what.

On the bright side?
💡 All paths could lead to money truly becomes obsolete, we might finally have the real conversations about creating a social structure built on sustainability and not just as a trendy word but as a functional system.

## Path 1: Governments Controlling and Centralizing Currencies (CBDCs)

In this scenario, governments take full control of money, potentially through Central Bank Digital Currencies (CBDCs), here’s what this might look like:

* ✅ Debt and interest are eliminated. Money is no longer created through lending, just like US currency alternative: the Greenbacks in the 1860s.
* ❌ Freedom disappears. Every transaction is tracked, regulated, and programmable. Your ability to buy/sell could be controlled or revoked.
* ⚠️ Political & financial manipulation becomes easier than ever, governments could enforce spending limits, expiration dates on money, or deny access based on behavior.
* 📉 Money stops being an asset people own. Instead, people receive controlled units of purchasing power that can be adjusted at any time.

## Path 2: Decentralized Currencies

In this scenario, decentralized currencies like Bitcoin or other cryptocurrencies dominate, reducing government control but expanding debt and interest to unprecedented levels. Here’s what this might look like:

* ✅ Maximum financial freedom. People and businesses operate without intermediaries, governments, or central banks; leading to innovation, entrepreneurship, and global financial inclusion.
* ❌ Debt expands to unseen levels. Decentralized systems could lead to a proliferation of financial instruments, loans, and credit, potentially increasing debt levels. Rates might fluctuate driven by fear (real or not), speculation and market manipulation could destabilize economies.
* ⚠️ A fragmented financial world. Competing digital currencies create volatility, market manipulation thrives, and global trade becomes more complex.
* 📉 Money loses stability and trust. In a world of endless debt and interest, the value of money could erode, leading to a loss of trust in financial systems. Hyperinflation and deflation cycles could make traditional money meaningless as a long-term store of value.

*****************************************************************************************************************************************************
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*| **Aspect**                | **Government Control**       | **Decentralized Currencies**       |                       *
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*| **Debt and Interest**      | Eliminated or minimized                      | Expanded to unseen levels                   |                        *
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*| **Freedom**               | Reduced (more surveillance and control)      | Increased (more autonomy and privacy)       |                         *
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*| **Stability**             | Potentially stable but prone to abuse        | Potentially volatile and unpredictable      |                         *
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*| **Trust in Money**        | Dependent on government authority            | Dependent on market dynamics and adoption   |                         *
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*| **Inequality**            | Could be reduced through redistribution      | Could increase due to lack of oversight     |                         *
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*| **Innovation**            | Limited by government control                | Encouraged by decentralized systems         |                         *
*+---------------------------+-----------------------------------------------+---------------------------------------------+                        *
*                                                                                                                                                   *
*                                                                                                                                                   *
*                                                                                                                                                   *
*****************************************************************************************************************************************************

## The Bigger Picture: Money Losing Relevance

The future of money is not just an economic question but a philosophical one. It forces us to confront fundamental questions about freedom, trust, and the role of governments in our lives. In both scenarios, money as we know it could become irrelevant:

* Under Centralization: Money becomes a tool of state control, losing its intrinsic value and trust as a medium of exchange.
* Under Decentralization: Money becomes fragmented and volatile, losing its stability and reliability as a store of value.
* Under Hybrid approach: A potential hybrid system could exist where governments maintain monetary oversight while allowing decentralized alternatives, this would increase the financial gap between individuals and countries. But history suggests that control and freedom are often at odds. One always tries to dominate the other so it may widen financial inequality rather than solve it.

In either case, the collapse of money’s relevance could lead to a fundamental rethinking of how societies organize resources, trade, and value. This could lead to the rise of alternative systems like time-based currencies (like "In time" movie) or reputation-based economies (like "Nosedive" from Black Mirror series) but hopefully to a more human systems like a resource-based economy. A shift toward post-scarcity models, where technology and automation reduce the need for traditional money.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
# The Photovoltaics Dilemma: Grid-Tied, Off-Grid, or Hybrid? ☀️🔋
November 15th, 2024
by *Agus Rumayor*

Thankfully, solar systems are now easier to set up, and the costs are finally getting to a sweet spot where they make sense for most households. With the rise of electric vehicles (EVs) 🚗⚡ and the desire to power our personal cloud services sustainably, energy consumption is trending upward. Currently, our system is isolated, and while I’m really happy with it, the inverter’s max amperage is a bit lower than what we need.

The inverter does offer the flexibility to prioritize inputs between solar panels, grid, and batteries, which has been a game-changer for our energy management. Now, with the chance to design a new solar project, we’re considering whether to stick with an isolated system, switch to a grid-tied setup, or go hybrid.

## The Options:

1. Grid-Tied System

Pros:
* Connects to the grid, providing access to power when solar isn’t sufficient.
* Potential for net metering (offsetting consumption with excess energy credits).
* Lower upfront costs since no batteries are required.
Cons:
* No power during grid outages.
* Dependence on the grid remains.

2. Off-Grid System

Pros:
* Complete energy independence.
* You produce and consume your energy, aligning perfectly with self-sufficiency goals.
Cons:
* Higher initial investment due to the need for batteries.
* Risk of running out of power in prolonged cloudy weather or higher-than-expected consumption.

3. Hybrid System

Pros:
* Stores excess energy in batteries while also being connected to the grid for added reliability.
* Ensures power during outages while still achieving a high degree of self-sufficiency.
Cons:
* Higher setup and maintenance costs due to the inclusion of batteries and a more complex system.

## Diving into System Designs: What Does Each Setup Look Like?
Understanding the mechanics of each system helps you weigh your options better.

Grid-Tied System Design

- Solar panels generate electricity during the day.
- Excess energy offsets your future usage (via credits, if applicable).
- The system switches to the grid when solar power isn’t enough.

Off-Grid System Design

- Solar panels charge a battery bank, storing power for cloudy days and nighttime.
- A backup generator can step in during extended periods of low solar production.

Hybrid System Design

- Combines the flexibility of grid-tied with the independence of off-grid.
- Batteries store energy for use during outages or peak evening hours.
- The system seamlessly switches between solar, battery, and grid power depending on availability.

## My Considerations:

1. Sustainability:
My primary goal is to produce what I consume, minimizing waste and maximizing the use of renewable resources. I want to strike a balance where my household or business operates sustainably, independent of external energy inputs.

2. Reliability and Location Factors:
Living in a region where power outages are becoming more frequent, particularly in the late afternoons around sunset, reliability is crucial. This timing is problematic since it coincides with peak household energy use. As these outages are expected to increase, having a system that provides power during these critical hours is essential.

3. Costs:
While cost is a factor, it comes after sustainability and reliability in my decision-making process. I see this investment as a long-term commitment to reducing my environmental footprint and securing my energy future.

## What’s Next?
Over the coming days, I'll be diving deeper into each option, considering system designs, consulting with experts, and evaluating how each setup aligns with my values and goals. Right now, I’m leaning slightly towards the grid-tied system because it’s easier to switch from a grid-tied setup to off-grid or hybrid later, than it is to transition from off-grid to grid-tied.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# The Rise and Fall of Abacus Rationale
September 18th, 2024
by *Pepe Hernandez*

Abacus Rationale started small. It started from a software entrepreneurship effort in the eighties. A teacher developed a payroll system for their university, which was a success. He continued his career at the university as a teacher and obtained great credibility for his achievements, but he wanted to be an entrepreneur.

The entrepreneur wanted to create a company and was associated with a finance and accounting specialist, and both made the Abacus Rationale. Together, they envisioned the first company service:  Internet Subscription. They offered a product different from the one provided by the telecommunications monopoly in Mexico. The users started to grow and grow. A pair of years later, the service had 10,000 active accounts. As a small company trying to diversify its services, it sold equipment and repaired computers. That was before the big companies started to offer high-band internet services. When the Mexican telecommunications market opened to competence, there was both a there and an opportunity. New entrance companies began to buy small companies' user base. Abacus Rationale saw that as an opportunity and sold theirs to one of the big three internet providers. There were two options: trading and getting some money or slowly losing their user base. Abacus Rationale sold, and rethink the road ahead.

That was a good move. It allowed Abacus Rationale to make good money and specialize in selling equipment and IT infrastructure solutions to its main customer, the Local Government.

The company went from software development to subscription services and then to retail and IT solution provider in the middle of the 1990s.

## 1990s

During that period, Abacus Rationale hired several engineers and invested heavily in them. The company paid the engineers well, and they received annual bonuses. They also received a very flexible day job schedule. They could work anywhere. The entrepreneur adapted to new times.

The physical office was a house of three levels: the medium, the basement, and the upper. The rooms of the house were offices for the different teams: accounting, selling, engineering, and monitoring. They had a meeting room, a reception, and a hall with several desks. The Engineers guys were good at their craftmanship. They became better due to the policy established by the entrepreneur. They had the time to study all the equipment and simulations to learn how to configure the different appliances. The agreements with the big TelCo providers had the benefit of asking for new equipment and virtual training for "free." Engineers had at hand routers, phones, switches, virtual simulators, and several artifacts to make experiments. When the engineers were confident, they asked management for money to pay for a certification exam. The company didn't invest in training classes, workshops, or courses, but Abacus Rationale made a big difference—the company had more certifications than all the local companies. On average, every engineer had more than eight certificates.

The engineers' experience, validated by their official achievement certificates, was a strong differentiator when the government or other clients asked for service from local companies. The infrastructure solutions and the quality of their structured cable, fiber, routing, IP telephony, LAN configuration, and LAN security were of higher quality.

The entrepreneur was a native seller. He makes the right deals. The company always had Projects.

They also grew in personnel slowly. Just enough to continue their sustained growth.

## The 2000s

The oil bonus of 2000 provided many resources from the Mexican local government until 2010. The property allowed investment in the modernization of government services and facilities. From 2008 to 2010, a big budget was allocated to developing government facilities, infrastructure, and digital services. Abacus Rationale had the relational capital, the knowledge capital, and the financial support to take a good piece of cake. They made it.

Abacus Rationale was a certified partner of the Big Guys. Other companies with financial support and knowledge made their offers but didn't know the context very well. Abacus Rationale knew what government agencies needed. Abacus rationale knew the context well on their own and their insiders on the government.

Abacus had the muscle, experience, knowledge, backup, and relationships and had grown enough to be financially supported by the big telco communication equipment companies.

That was good and prosperous times.

Abacus Rationale has created many good relationships with its clients due to its professional services and frequently because of its patients. Sometimes, the government doesn't pay as fast as the contractors need.

## The 2010s

In 2010, things started to change. There was a change of administration. New times, in context, require different policies. The federal government began limiting equipment length and changing the contract services policy. Selling equipment was one of their primary sources of income. Instead of buying computers, leasing was an option for the government to have good computers.

But there were other opportunities to take advantage of. The federal and local governments continued believing in innovation and the digitalization of services. They also supported entrepreneurship and invested in people's digitalization culture.

Abacus Rationale had prestige and was open to new ideas.

Federal government funds were available for companies, organizations, academia, and governments to support innovations and entrepreneurship projects. That was the case for InnovaPYME and ProSoft (federal programs created with this aim).

Before 2010, other actors arrived: Research Centers, Top Public Universities, a young wave of technopolitics, and new small companies that wanted to make a dent in the local universe and take advantage of all the existing funds. Both the InnovaPYME and ProSoft programs motivated collaboration between Academia and Private Companies.

Abacus Rationale started collaborating with a research center specializing in software projects to create a spinoff in its successful IT service provider vein. In 2012, a small software company was made—in reality, it was a startup. The SW company was looking for a business model. The company was named Code Rationale, following its parent's Rational way of work.

The Research Center had grouped a very talented bunch of people, some coming from booming government pace, others from industry, and persistent entrepreneurs with previous startup adventures scars.

Abacus Rationale, in collaboration with the Research Center, created Code Rationale. The Research Center used all its expertise to hire and train the development team, which a proficient Architect and Developer led. The team developed transactional software using the best open-source tools, frameworks, and base language. They had a year to create four prototypes, and they did it—even though they were looking for a business model.

After the first year, Abacus Rationale found a promising bet: Business Process Digitization Services. One year after the company's creation, Code Rationale started to offer another digitization service and a software house for transactional government systems. They also received funds from InnovaPYME and created both software and hardware to specialize in document digitization.

At the same time, there were software development projects with other government organizations. Code Rational's team had to grow. They started with less than ten people. In three years, the developers' team was threepled.

Meanwhile, the projects for Abacus Rationale started to slow down. Cloud Web Services were a precarious competence, but a real one, for physical sites. The government doesn't use Cloud Web Services at all today, but some of the big entities do.

The local government promoted an Innovation Park where all innovative companies could create research centers. The Federal Government wants all Mexican states to have their innovation parks. The Local Government invited Innovative companies to join the effort. It was challenging to say no. The government was still the primary customer of Abacus Rationale. It was like a Trojan Horse. It was like a poisoned apple.

Abacus Rationale compromised its future to build the headquarters of its dreams. They did it; it was a big bet. The luxury building could be the company's presentation card.

Then, the country's economic context changed dramatically. Local states started to need more resources. That was 2018. The New Federal Administration erased innovation funding programs and other funds for specific purposes; the Federal Government erased municipal development funds, mining funds, and disaster funds. All were concentrated at the federal government level to invest in social programs for younger and third-age people. What innovation companies did some companies take advantage of to grow and disappear in just one year?

Then, the COVID-19 pandemic hit the world and the economy.

## The 2020s

In 2021, there was a radical change in the Local Government from a different party.

Abacus Rationale started to starving. No projects, no money. Depending mostly on one client made Abacus Rationale fragile. The little brother of Abacus was an instrument for selling.

From 2012 to 2018, Code Rationale was Net Profitable. But the pressure was too high. Code Rationale received the work and the problems, but it didn't receive the benefits of the Abacus projects obtained thanks to the Code Rationale sacrifice.

In 2018, Code Rationale gave up.

When Toyota faced the challenge of the global crisis in 2008 and then the recall crisis in 2010, it was prepared. It had a global market, the TPS, the culture, the people, and leadership. It took advantage and refocused on quality again. Abacus Rationale could have had the same opportunity.

When 3M faced a mining crisis, it gave the employees time to look for new ways to make money. That allowed the creation of different projects, among them the Post-it. Abacus Rationale could have the time.

But Abucus Rational had no money.

## Lack of money = lack of time

They needed money but a new luxury headquarters in the Innovation Park.

After investing in the new headquarters building, all the money was used to pay, so the annual bonus disappeared completely. That started in 2018.

The company, which had evolved resiliently from software to a subscription service, IT infrastructure solutions, and business process outsourcing, lost its direction.

Entrepreneurs thought that a building could be the prestige they needed to go further.

Without new projects, an important part of the personnel payroll disappeared. The personnel had to look for new projects. The few projects were assigned to other providers. Each new Government administration has its preferences, under the legal boundaries. That was the case.

The engineers left the ship one by one until the last proficient engineer left the dream.

The entrepreneurs who invest "a lot" of money in the certifications ask them to stay—to hold on. But more mature people need money to cover their normal expenses (household, food, tuition, etc.). They look for new jobs, and they find them.

All the certified engineers now work for more prominent companies. Their experience, knowledge, and certificates went with them in their hearts, brains, and bodies.

The entrepreneur, his finance associate, and a pair of clerical people stay in the company, and they rent offices in the building they thought would once be the leverage point for the company's growth.

## What might have been?

What could have happened if the entrepreneur hadn't invested in the building and could have done what Toyota or 3M did to overcome the difficult times? As Eliyahu Goldratt, the creator of the Theory of Constraints, said: You have to take advantage of any crisis. Why did they not make a decision that made them a little bit antifragile or at least gave them more options for the future? We'll never know. The "would" does not exist.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# The Story of How Bitcoin Became an Unexpected Best Man at My Wedding
December 8th, 2024
By Leonel Perea

![Bitcoin bestman](bitcoin_bestman.jpg)

**April 2014:** Bitcoin was trading at a modest $350. At the time, I was in the first year of my master’s program in Software Engineering, completely unaware that a weekend project that month would eventually pay for a significant part of my wedding years later.

This is the story of how a weekend of coding, friends, and a little-known cryptocurrency turned into one of the most unexpected contributors to my "happily ever after."

## The Project: Building a Trading System in Record Time

It all started when we received an intriguing project: to build a trading system for a private client. The idea was to capitalize on price differences between two trading platforms, buying on the cheaper one and selling on the more expensive one. The ultimate goal was to convert all profits into dollars to reflect clear financial gains for the client.
The challenge was ambitious, but I wasn’t alone. Together with my master’s classmates **Antonio** and **Francisco**, a few friends like **Agustín**, and our professor **Alejandro**, we tackled the task. Over a single intense weekend, fueled by coffee and determination, we delivered a fully functional system.
**The reward?** Around $30,000 pesos, paid not in cash but in **4 bitcoins**.

## Bitcoin in 2014: A Novelty, Not an Investment

Back in 2014, Bitcoin was far from the financial powerhouse it is today. Accepting payment in cryptocurrency felt more like a fun experiment than a strategic decision. Those 4 bitcoins were stored in a wallet under Agustín’s name, forgotten as we moved on with our lives—classes, exams, and new projects.

## Fast Forward to 2018: Rediscovering the Wallet

Four years later, in 2018, I was in a completely different chapter of life: planning my wedding. Between scouting venues, choosing menus, and calculating costs, I got a call from Agustín. Excitedly, he reminded us of the wallet from our project and said it was time to split the funds.
To my amazement, those **4 bitcoins**, which were worth around $30,000 pesos in 2014, had significantly appreciated. My share was enough to cover **one-third of my wedding costs**.
That year, I even dabbled in some trading, increasing my initial amount by an additional **10%**. Every extra peso contributed to creating a memorable day.

## Bitcoin: The Most Unexpected Best Man

What began as a weekend project turned into a unique anecdote. That payment, which initially seemed like a quirky tech experiment, ended up funding a significant part of one of the most important days of my life.
Now, every time I look back on my wedding, I think about all the pieces that made it possible: my family, my friends... and of course, **Bitcoin**, my most unexpected best man.

---

## Reflection

This experience taught me two valuable lessons:
1. **The power of technology and innovation.** Bitcoin, which was once seen as a novelty, has become a financial tool with real-world impact.
2. **The value of small decisions.** Accepting Bitcoin as payment in 2014 might have seemed trivial at the time, but it turned out to be one of the best financial decisions of my life.

What about you? What unexpected surprises has technology brought into your life? Perhaps you, too, already have a "best man" waiting in your future.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# The Sunk Costs Fallacy. A new obstacle in my phd journey
By Pepe Hernandez. January 13th, 2025.

## Nothing lasts forever. 

In December, my Thesis Co-Director and I decided to go our separate ways.
I evaluated my options and asked PhD I Know. She is a professional, hardworking, intelligent, and a friend who accepted me as a PhD student. 
And now I am here.
I have a deadline for January.
I have to finish a Systematic Literature Review. 
I had a lot of information to finish it. 

Due to the change of thesis Co-Director, I considered changing the topic (again); this will be the third. I resist that because it will result in rejection from the thesis committee.

My PhD Thesis Co-Director was busy in December, and she went out on vacation. As I was a little bit desperate, I started to plan and work on something to show her when she came back. https://jagcoop.github.io/posts/Re-Discovering_My_PhD_Challenge_for_the_Semester/

I had invested six months, so why not a couple more weeks? 

## First Meeting with my "new" PhD Thesis Co-Director
She asked me what the problem was. 

I talked and showed the articles that I found valuable, but I couldn't make an impactful, shorter pitch about the problem.

Okay, this is the first meeting, so to better understand the problem, she asked me to fill out a coherence matrix.

That upsets me a little. I send a message to Alex.

## We don't have a problem, Houston

My problem is that the problem is not well defined. 

It is worth taking a brief tour to understand the situation of my PhD today. Regardless of Andrew Ng's previous post, https://jagcoop.github.io/posts/Product_Management_and_AI/, which mentioned that Product Management and AI are relevant topics, I believe I have fallen into the sunk cost fallacy. I am rationalizing why I must continue with that topic.

I didn't realize until this week. 

I struggle with that simple question.

I share that with Alex. A day later, Alex called me and questioned me:
"I can't believe that with so much experience, you don't have a problem that interests you." 
It was hard but true. It was hard because it was partially true but not wholly accurate. I do have problems that interest me!!!!

## The second meeting

I did the job (the coherence matrix). In the resume, there is literature about the problems of Product Managers. Some very well-structured articles address those problems. Some academic research tools, like interviews, surveys, and focus groups, were used to obtain and classify those problems directly from Product Managers with experience. PMs who participated in those studies work and live primarily for Russian and Polish companies. Yesterday, I found preliminary results from another study in Brazil. 

There is a set of known problems and a set of known solutions.

Based on that, in the second meeting, Jani suggested to me, "Why not research the problems of the PMs in Mexico? Do you know them?" I said no. Then, we can make an instrument and gather the data. Right. Well, not so fast.

### Gathering data is a nonstarter.

Alex told me, "Gathering data is a nonstarter signal. If you don't have the data, you won't finish your PhD." The same happened to my wife, Nohemi. Out of four students who studied for a Master's Degree in Statistics, she chose a PhD topic where data existed. She finished her work; the other three pairs of Nohemi had not finished. 

I am preparing for the third meeting and returning to the same obstacle. I don't have a problem with my PhD. 

I've invested 6 months in this topic, well a year and a half. 

I have sunk costs, and I am afraid to lose. That is common.

What is best for me, regardless of what I've invested?

## How to assess the rightness of a problem.

That's okay, but it does not make me interested in it. If it only interests me, it is not enough.

We talked about Ikigai recently: https://jagcoop.github.io/posts/Ikigai_to_Evaluate_Education_Ideas/

- What you love
- What the world needs
- What you are good at
- What you can be paid for

What can be something that qualifies in the four dimensions?

## Product Management and AI are good topics, but NOT for me.

Why did I do that? It started with Alex's question: Do you and your Thesis Director have a problem in common?

Yes, we had a problem in common. Both of us performed as Senior Software Product Managers.

- What you love. Not so much. However, my previous thesis director was familiar with the topic.
- What the world needs. Not too much. There are other more significant problems in the world (and bigger problems for myself).
- What you are good at. I learned a lot from my experience as an SW product manager, but I am much better at other topics.
- What you can be paid for. I have applied for about 100 positions as a product manager. The maximum has been two finals, but they have always been rejected (this is a topic for a new post).

I will not apply for a PM role. I am not attractive to the market anymore, but that is not bad news. When life gives you lemons, make lemonade.


## It is the sunk cost, stupid!
I've invested a lot (well, six months of work on Product Management and AI). But a year and a half of the PhD, so I don't want to lose that effort and investment. I feel the obligation to continue. I've fallen into the sunk costs fallacy.

I looked for Advice to avoid falling into the sunk cost trap:
- Consider the utility of the decision for the future, not just past costs.
- Seek Advice from people who are not emotionally involved.
- Recognize the positives of what has already been lost.

My dad has a phrase for this: "Stop throwing good money after bad." In English, it would be "cut your losses."

Why do I fall into this trap?
- Fear of losing my scholarship. 
- Fear of challenging my Thesis Co-Director
- I feel I lost my investment.
- There is the commitment bias: "I said I would do it, so now I have to finish it."

The sunk cost fallacy is preventing me from acting in My best interest. 😮

The first step is to be aware of the situation. Now, I am.

What's next? Well, I am finding the Ikigai for my PhD project.

## Finding the Ikigai. Teaching, and Kanban.
### What am I good at?
I am good at teaching.
I am good at Kanban.
I am good as a consultant.

### What the worlds need.
The world needs to be more efficient.
The world needs to know the right topics (Kanban is the right topic, and Lean).

### What can I be paid for?
Why have people paid me for my services in the last five years (NOT Senior Product Management)?

Well, there are three things related:
- Providing Management Consultancy (Product Development, Kanban, Lean-Agile, Management).
- Teaching (Mainly Lean-Agile, Kanban, and Management)
- Offering certified training.

### What Do I love?
I love teaching, and I love Kanban.
I love working with my friends.

### Some unfair advantages
Additionally, my new relationship with my advisor, who shares an interest in serious games, educational technology, and LEAN (she is an expert in LEAN), and Alex, who is also interested in education and Kanban, puts me in a better position than two months ago.

It would be a waste not to take advantage of this opportunity.

## The Creativity List, or a Dozen Problems as Alex says.
As a parallel exercise of the "A Dozen Problems" blogpost of Alex where he enumerates and describes his multi-annual obsessions in
https://jagcoop.github.io/posts/a_dozen_problems/, I am making a list of the problems that intersect with all factors. 

I will use the Creativity List from Edward the Bono using one primary focus: Kanban.

1. How can we help to increase productivity in Mexico?
* in our state, our city, our organization, our government, our team?

Productivity in different countries around the world is an issue. Mexico is the second country with the highest average working hours per worker in the world, with 2226 hours per year (OCDE 2019). The first is Colombia. But Ireland produces five times more USD dollars per power hour worked than a Mexican hour worked. 

2. How can we teach Kanban better?
I've tried with traditional methods.
I've tried simulations and serious games.

3. How would Kanban Software be for the Mexican and LA countries?
3.1 What would be a monetizing model for Kanban Software for the Mexican and LA countries?

* There are many Kanban Software Systems, but they are not widely used in Mexico and LATAM. 
The Kanban Software Market is expected to reach 1521 billion globally in 2032. https://www.globenewswire.com

4. How can we accelerate Kanban adoption in the Mexican Market?

5. How can we create a hybrid (physical and digital) Kanban model to combine the benefits of the digital and analog worlds?

6. How can I assure the continuity of a Kanban Initiative?

7. How to create a configurable simulation for various industries?

Many simulations, open sources, and private teaching methods are available to Kanban students. Simulations, games, etc. What are their advantages and disadvantages?
The simulations and serious games are designed ex-profeso for one industry or domain (in most cases, the IT software domain).
Note. The ESEI has a simulation created for jewelry (a job shop).

A metrics software for Kanban flow metrics is needed...

Another focus: Software Industry in Mexico, Education, Serious Games
Mexico does not have qualified software developers.

Focus: Education
We have proposed that the Technical Schools in Mexico and the SW Engineering Careers Curricula have more updated specializations (Data Science, etc.). The Tecs did want it, but they didn't have money. We arrived with the wrong patron; the patron was the general direction of the Mexican Tecs. 

**The simulation, the Kanban software, and the metrics software are related (to make a simulation, I need a motor that processes a basic Kanban behavior), and all have their justifications.**

## What can happen if I miss the deadline?

**The 50% Scholarship will be stopped for a semester.** If I don't deliver that, I will miss the deadline, and my Thesis Director will notify CONAHCYT, preventing my scholarship. Next semester, the Thesis Director will make the assessment again.
The good news is I could work on my new topic and stay up to date next semester for a new assessment. Also, I will need to obtain those economic resources elsewhere (120k). 

**The 50% Scholarship will continue.** Due to the director's empathy and confidence in me, my new thesis co-director, and my new topic.

We'll see.
 


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# My Zettlekasten Experiment Part 1 of 2 (the plan)

## The problem. My Note Taking Method is not adequate.
Yesterday, I was thinking of the minimum things I must do daily to deliver the required PhD advances. 

Alex told me I need to write a page daily, and then I will have 365 pages in a year.

It's good advice and common sense.

But it sees a little chaotic.

Let your brain order the knowledge you acquire.

But, as James Clear says, we don't need goals; we need systems.

I need a system to write small interconnected pieces. Lego pieces that I will use to build something betters.

The goal of a note system should be to allow you to build something meaningful quickly. 

When you use a traditional note-taking system or a popular app, the number of notes grows chaotically. 

In order to build something meaningful, you need a system that connects ideas and has structure. This system must work similarly to how your brain makes connections.

I need a system that would allow me to do generate information, retain information effectively, and make note taking and learning creative.

Alex recommended Zettlekaste to me some time ago... It's time to use it.

## What is Zettlekasten?

Zettlekasten is a note-taking system. It is a word in German that means "Box of cards".

Luhman, a German sociologist and exceptional scholar, created Zettlekasten as his tool for writing productivity. Due to his system, he outperformed others. He wrote 58 articles in thirty years and four hundred articles.

Zettlekasten allows you to
build a web of knowledge
find connections between topics
to retrieve the right memory,
and to develop ideas and arguments
 
To implement this technique in the physical world, you need two boxes: 
- a reference box with literature notes and
- a main box for ideas (fleeting notes), theories, arguments, and discussions (permanent notes).
 
### The types of notes
There are three types of notes:
- Literature notes
- Permanente notes
- Fleeting notes

### Advice to take literature notes
1. Keep it short. Extremely selective, <3 sentences
2. Write in your own words. No copy and paste!
3. On the side, bibliographical notes; on the other, bibliographical reference.

### Make permanent notes
* Add all the notes related to certain topics?
* Add how it is related to what you know.
* Add how it supports or adds value to your existing ideas.
* Add what you just learned with what you already know.
** How does this idea fit into what I already know?
** Can this be explained by something else?
** How does X mean for Y?
** How can I use this idea to explain Z?

### **About hashtags:**
Find keywords to retrieve it. In which circumstances do I want to stumble upon this note? When and how will I use this idea? Which things am I working on or interested in?

### **About references:**
* File each one behind relevant notes
* Add links to relevant notes
* Index to make them easy to discover later

Additional advice. Take fleeting notes (notas fugaces)

### **Step 4. Review and repeat.**
* What is missing?
* What questions arise?
* You don't have to start from scratch with this method.

# References
Shu Omi (2020) Zettelkasten Learning Method: Explained.
https://www.youtube.com/watch?v=rOSZOCoqOo8
https://www.youtube.com/watch?v=eFcdH93oFD8 

### Some Tips to Start
- Read the book "How to Take Smart Notes". It includes the basics of Zettlekasten.
- Find an app of your choice -> Obsidian
-- Try Obsidian. It's a popular visual tool. 
- Don't transfer all your notes; just experiment. 
- Write for new ideas and experiment for some time.
- Use it for a project.

## The challenge. 
Use it for 180 days to see what happens with my PhD Thesis.

### Hashtags 
#Study #Writing #Memory #Retrieval #Writing #Learning #Zettelkasten 


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">


# Top 10 Common Questions for an Interview
By Pepe Hernandez. December 11th, 2024

## Moster Lists for top 10 questions
Interviewers use common questions. Here is a list of 10 common questions and some tips for answering them (from an Article by Moster). Be prepared and practice.

1. **What are your weaknesses?** Concentrate on professional qualities and minimize your weaknesses
2. **Why should we hire you?** Summarize your experience.
3. **Why do you want to work here?** It looks for knowledge about the company.
4. **What are your goals?** Your immediate and medium term goals.
5. **Why did you leave, or why are you leaving) your job?** Give some context and answer.
6. What can you do for us that other candidates can't? Mention the valuable (someone can pay for that) or rare skills that differentiate you from the others.
7. When were you most satisfied with your job? Where you find motivation.
8. What would your last boss say three positive things about you? Brag in other people words.
9. What salary are your seeking? Research previously to be inside the range or say you would adapt to the wages if they can tell you the range.
10. If you were an animal, which one would you want to be? Do not think of passive or aggressive animals. Look for a good answer.

The best way to answer a question is to be prepared for the response. Answer these questions, record yourself, and keep practicing.

## Don Georgovich list
The following is a list of the top 10 common questions from Don's experience:

1. Tell me about yourself. Talk about your career journey. Where have you come from and what have you achieved? A maximum of a minute.
2. Why are you the best person for the position? Please explain how you can help the company, your understanding of the business, and similar solutions to their problems. 
3. What are your skills. 
4. Your main weakness. I get frustrated when things are delivered late.
5. Why do you want to work here? Culture, the pople, the possibilities…
6. Why did you quit your last job?
7. Mention a complex problem and what you did?
8. Where do you see yourself in 5 years?
9. Do you have any questions? What are the primary skills of the positions, what are the goals of the positions, and what is a good fit for this position

Exercise:
I have done that exercise several times since I applied for jobs many times after the pandemic and after the tech sector's debacle in 2022. Each time, I related the position's requirements to the top common questions and created a matrix where I could establish a relationship to check if I was covering all the skills needed for the position. 

Try it. You will feel prepared. 

#CommonQuestions #Interview 

# Reference
https://www.youtube.com/watch?v=Csl2ccBpo4g 
[https://www.monster.com/career-advice/article/top-10-interview-questions-prep](https://www.monster.com/career-advice/article/top-10-interview-questions-prep) 

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

**Track our day**

Dec 28Th, 2024
By Alejandro Garcia

As I mentioned [before](/posts/Single_text_file),
I love using a text file to jot down what I'm working on
or capture unexpected thoughts that come to mind.

I acknowledge these distractions by writing them down.
With just a quick `Super + N` (or `windows + N`).
I can immediately type the idea, let it go,
and refocus in the task at hand.

Even with that love.
Sometimes I still forget to type my ideas.
and since I'm a believer in:

> Have Systems, not Goals.
> - James Clear and Mark Manson

On this post I explain my new system.

# Not a nagging reminder

What I want is a reminder to write in my single text file.
But one that doesn’t nag me too often,
only when necessary.

this is what I wrote:

``` bash
    $ cat ~/active_dirs/track_your_progress.nu
    #!/usr/bin/env nu

    let wrote_recently = /home/agarciafdz/.local/bin/jrnl --format json -from ("30 minutes ago" | into datetime | format date "%F %T") err> /dev/null | is-not-empty
    print $wrote_recently

    if not $wrote_recently {
       # Prompt the user for their daily affirmation using Zenity

       let last_title = /home/agarciafdz/.local/bin/jrnl -n 1 --format json   | from json | get entries.0.title
       let affirmation = (zenity --entry --title="Keep your focus" --text=$"Your last entry:\n ($last_title)")
       $affirmation | /home/agarciafdz/.local/bin/jrnl

    }
```

First, the script checks if I `$wrote_recently`,
defining 'recently' as the last 30 minutes."

If I haven't then it displays a little window (zenity).
Asking me to type what I'm doing.
While reminding me of the last entry in Single Text File.

This idea of reminding me of my last entry.
Helps me to find out if I have diverted from my actual goal.
Or If I'm distracted by a new shiny object.

# Schedule it every 5 minutes

On Linux, users schedule recurring tasks using a program called `cron`.
With `crontab -l` we can see a list of my current scheduled tasks.
With `tail -n 1` we can see the last line.
Which is the one I care about.

```bash
    $ crontab -l | tail -n 1
    */5 * * * * DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus /home/agarciafdz/.cargo/bin/nu /home/agarciafdz/active_dirs/track_your_progress.nu
```

The part `*/5` means if the current minute is divisible by 5 (12:05, 12,10... etc.),
The `track_your_progress.nu` script will execute.

The advantage of this system.
Is that If wrote a note at 12:03,
then the cron task will check on me at 12:05.
Since I have written in the past half an hour.
That means I *won't* get an interruption.
But if at 12:35 I haven't written any other entry.
Then I get the popup asking me to update my activity log.

So if I keep continuously writing notes, no window might appear in a whole day.

# So how does it look?

In this screenshot,
you can see the dialog window in the top-right corner,
asking me to type what I’m doing.

![poup asking about my current task on top right corner](./poup_asking_about_my_current_task_on_top_right_corner.jpg)

At this time,
I was writing this article,
which made the reminder feel timely.

# I don't think this breaks flow.

The state of flow
(losing track of time when immersed in an enjoyable and demanding activity)
is very important to me.

I don't think this popup, breaks flow.
Because it is asking a question, related to the /current task/.
So it is actually a way to /remain in flow/.
Maybe, I'm not entirely sure,
because the window opening in the middle of my work *is* distracting.
But at the same time, it can be an opportunity to reflect on the current task.


Besides, If I really don't want to see the window,
just need to append to activity log more frequently.
Which is my goal anyway.


# Some lessons learned

## Chatgpt can help, but still it is a long way to go.

Although ChatGPT was a big help in creating the cronjob and script,
I still spent about 4 hours on this relatively simple task.
I think without ChatGPT it would have taken me like 2 days.

## Jrnl can generate json output

I didn't remember, but `jrnl` can generate json output.
of my saved activities and tags.
Which is great for further processing my notes.

For example this is my last note viewed as a json object

```json
    $ jrnl -n 1 --format json
    {
      "tags": {},
      "entries": [
        {
          "title": "reviewing the article with the suggestion by chatgpt.",
          "body": "",
          "date": "2024-12-28",
          "time": "21:30",
          "tags": [],
          "starred": false
        }
      ]
    }
```

## and NuShell is great at processing json output.

As you can see the `track_your_progress.nu` is a NuShell script.
I find the script surprisingly concise and readable.

I think this readability comes from:

- It uses pipes for everything, so script are read from left to right.
- it can process json in native way.

## I love tools that are well thought out.

There are very few tools that I love
But in this little project I got to play with 3 of them:

  - jrnl.sh
  - NuShell
  - Emacs (always ;-) )


# Conclusion

Writing remains the most important habit for a knowledge worker,
yet I still don’t practice it as often as I’d like.
But, by setting up *systems*, I can better support the *habits* I want to *cultivate*.



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Understanding complexity in software systems

September 23th, 2024
by *Julio César*

> Controlling complexity is the essence of computer programming.
> 
> — Brian Kernighan

Recently I&rsquo;ve been enjoying reading &ldquo;A philosophy of software design&rdquo; by John
Ousterhout, the main focus of the book is to learn techniques to reduce
complexity in a software system and use that to drive our design decisions.
Before diving into how to reduce software complexity we might ask, what is
complexity?

Complexity in software is a term that has been explored a lot, I would think
that since we as a society started to depend on software systems to replace
processes that didn&rsquo;t need computers before, we started to observe a toxic pattern
emerging on our code bases.

Software systems never seem to be complete - they seem to always require
changes to be made - so systems have a need to be maintained. However, over
time, the system starts to rot, modifications become harder and harder to
make, this is the main indication of having a complex system in sight. Fred
Brooks wrote something on complexity in his famous book &ldquo;The Mythical
Man-Month: Essays on Software Engineering&rdquo; - from his perspective, there are
two kind of complexities, first, *essential complexity* - the kind of complexity
that exists just because the domain a software models maps to is inherently
complex. The second type of complexity Brooks writes about is *accidental
complexity* which is more in line with the notion of complexity that Ousterhout
documents in his book.

Accidental complexity is what remains when we take essential complexity out of
the picture, it is often the result of lack of skills, bad habits software
developers adopt, or frequently, simply due to an incomplete understanding of
the domain and the problem we are trying to solve. Under Ousterhout&rsquo;s
framework complexity is anything that inhibits change on a software system and
is primarily a consequence of bad software design decisions (be it small or
big) made one after another during a continuously prolonged amount of time. It
is hinted that software complexity is something that can&rsquo;t just be avoided at
all and will always exist but there are practices that help software
developers to manage it.

According to Ousterhout it is paramount to train ourselves to identify
complexity, we cannot start to manage it if we cannot see it in the first
place! In the book we&rsquo;re taught that one way to see complexity is to identify
where in the system we&rsquo;re spending the most time working on, typically, the
more time necessary to change a certain component of a system will hint that
the component is harder to change and therefore complex.

One might also think that beyond time - size of a component is also a good
indicator for presence of complexity in a system, yet this is not true, big
systems aren&rsquo;t necessarily complex, if they are easy to work with then they
remain simple. On the contrary, there could be pieces of code or even a single
instruction that on its own is very hard to understand and change, what is
worse is that in some cases doing the change might impact other parts of the
system unexpectedly, so beware! complexity can hide even behind a single line
of code.

Ousterhout mentions three signs that alert the presence of complexity in a
code-base.

1.  Change amplification
2.  Cognitive load
3.  Unknown unknowns

In the first case, whenever the implementation of even the simplest feature needs
a lot of changes in lots of places of the system it is said we&rsquo;re
suffering of *change amplification* and it is a major *major* sign of accidental
complexity on a software system.

On the second case, whenever the developers need deep understanding of a lot
of context in the code-base to carry out a simple change then *cognitive load*
exists. It follows then that lines of code do not translate to code
complexity, it may be the case that simple changes require lots of lines of
code - or, on the contrary, a complex change could end up being just a single
line change. Cognitive load refers about the context the developer needs to
understand in order to make changes to the system, the bigger that context is
the more complex the system is considered to be.

The third case, &ldquo;Unknown unknowns&rdquo; is a sign of complexity where a developer
doesn&rsquo;t know what or where a change is required to implement a certain
feature; often developers follow a hunch on what needs to be modified to get
the job done, they try out the new feature thinking all is done but then as
soon as it is tested the behaviour reveals the change is incomplete, there&rsquo;s
something the developer didn&rsquo;t anticipate and doesn&rsquo;t understand why the
change they made wasn&rsquo;t sufficient - &ldquo;Why it isn&rsquo;t working yet if I have just
changed this part here?&rdquo;, that&rsquo;s an unknown unknown.

From all the signs of complexity in a software system, having unknown unknowns
is the worst, it reveals deep problems in the design of the system as it is
non-obvious what its structure is and there&rsquo;s no clear path to evolve it in a
sane way.

All in all, these are just signs that we have a complex system in our hands,
but it doesn&rsquo;t give indication of where that complexity is coming from or how
we can tackle it. Ousterhout suggests that complexity is mainly introduced by
*dependencies* and *obscurities* in a software system.

Dependencies exist whenever
the code can&rsquo;t be understood in isolation, or, when changes in a part of the system
also require separate components to be updated, there we have a
dependency.

Obscurity is another form of dependency, but is a non-obvious one, or rather
an indirect dependency where there&rsquo;s nothing in the code that relates two
areas of the code-base that in reality are coupled to each other. Obscurity,
also happens when a variable or symbol refers to two separate concepts, in
this case, there&rsquo;s a dependency but it isn&rsquo;t clear what that dependency
entails or what is affected by changing it. A simple example may be a numeric
variable whose type (or name) does not hint about the &ldquo;units&rdquo; of the value
stored in that variable, e.g. 42 centigrade isn&rsquo;t the same as to 42 minutes. Also,
whenever we need extensive documentation on a component, whether in the code
or outside of it, we can take this as a clear indication that we have
obscurity in the code, or else, what&rsquo;s the need to explain it so thoroughly?

This is a good point to stop our exploration on software complexity, and as
we&rsquo;ve seen complexity is a key aspect to account for if we want to end up with
simpler and maintainable systems; if we can find ways or design techniques
that minimize dependencies and obscurity in our code-base then we&rsquo;ll be able
to reduce the complexity of the system as a whole. In a future post we&rsquo;ll
understand more about both of these aspects of software, and in doing so we&rsquo;ll
be able to come up with good software design decisions that over time will
help us rather than fight against us.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Unlocking the Power of Personal Cloud
September 24th, 2024
by *Agus Rumayor*

Rent vs Buy is a well-known dilemma, and we have plenty of tools and calculators to help us decide one of the biggest financial questions in life. From comparing the cost of buying versus renting to weighing opportunity costs like capital gains versus investment profits, there's one clear spoiler: if you plan to stay in one place for more than 10 years, it’s generally better to buy.

For data engineers, we face a similar dilemma: should we "rent" cloud services or "buy" our own? From a financial perspective, the conclusion is pretty much the same. If you plan to manage your data or services in the long run, it’s worth considering "buying" your own cloud.

That’s where the personal cloud comes into play, a solution that offers not just storage, but also long-term control, security, and savings in your data services. Rather than renting space on third-party servers, a personal cloud involves hardware you control. Setting up a personal cloud isn’t as simple as signing up for a public cloud service. It requires a bit more technical know-how and upfront planning. However, for individuals or small businesses that need large amounts of storage, prioritize data privacy, or want to avoid recurring costs, personal cloud storage could be the perfect long-term solution.

## What is needed?

A personal cloud should be tailored to meet your unique needs. From a developer or techie perspective, we aren't just talking about storing typical personal data like photos and documents. We need a robust environment that allows us to experiment, test, and host applications. Think of it as your personal sandbox, an all-in-one space for cloud data storage, cloud computing, hosting files and apps, and security tools to manage all these services.

Let's start with essential services:

************************************************************************
*                                                                      *
*               │                                                      *
*               │                                                      *
*  ┌────────────▼──────────────────┐                                   *
*  │                               │                                   *
*  │         Router                │                                   *
*  │                               │                                   *
*  │                               │                                   *
*  └────────────┬──────────────────┘                                   *
*               │                                                      *
*  ┌────────────▼──────────────────┐   ┌──────────────────────────┐    *
*  │                               │   │                          │    *
*  │  Reverse Proxy / Firewall     │   │    Access proxy          │    *
*  │                              ─┼───┼►                         │    *
*  │ Reverse proxy and firewall    │   │ Proxy to auth users and  │    *
*  │ rules to access all internal  │   │     proxy services       │    *
*  │           services           ─┼───┼─┐                        │    *
*  └──────────────┬────────────────┘   └─┼──────────┬─────────────┘    *
*                 │                      │          │                  *
*  ┌──────────────┼──────────────────┐  ┌┼──────────▼──────────────┐   *
*  │              ▼                  │  ││                         │   *
*  │                                 │  │▼ K8s and docker services │   *
*  │     NAS Private services        │  │                          │   *
*  │                                 │  │  Services allocated in   │   *
*  │  All the services we don't want │  │  private servers         │   *
*  │    to expose                    │  │                          │   *
*  │                                 │  │                          │   *
*  └─────────────────────────────────┘  └──────────────────────────┘   *
*                                                                      *
************************************************************************

### The Key Components
* **Router**

Acts as the entry point for all external traffic coming into the network. The router handles the distribution of incoming requests to the reverse proxy.

* **Reverse Proxy & Firewall**

The reverse proxy is a key component in securing the internal services. It handles external requests and forwards them to either public-facing services or routes them to an Access Proxy for authorization before exposing internal services. The firewall is configured to allow traffic based on specific rules, ensuring that only authorized traffic passes through to the services.

* **Access Proxy**

The access proxy manages Single Sign-On (SSO) and enforces authentication before allowing users to access private resources. When a request is made to a subdomain like private.example.com, the reverse proxy routes it to the access proxy, which authenticates the user and determines access rights.

* **NAS Private Services**

For all data and services that doesn’t need to be publicly exposed, the NAS (Network-Attached Storage) solution serves as a secure, private repository. This is where you store personal data like photos, documents, and any files that don’t require external exposure. Popular NAS devices offer a powerful combination of storage, security, and backup solutions.

* **Kubernetes and Docker Services**

These services power cloud computing and application hosting. K3s, a lightweight Kubernetes distribution, provides orchestration for containerized applications, allowing for easy scalability and management of services like blogs, development environments, or experimental code bases.
Portainer simplifies the management of these containers, providing an easy-to-use GUI for container orchestration, while Coder offers an IDE and development environment in the cloud for collaborative or remote projects.

## Architecture in Action

Let’s break down a real-world scenario to illustrate how this architecture functions.

Public Requests (e.g., public.example.com): When someone accesses a public-facing service like your personal blog, the request hits the reverse proxy, which redirects the traffic to the appropriate internal service (e.g., a Docker container hosting your blog).

Private Requests (e.g., private.example.com): For private services like a personal dashboard or sensitive data, the request is handled differently. The reverse proxy directs the traffic to the access proxy, which requires the user to authenticate via SSO before allowing access. If authenticated, the proxy routes the user to the service behind the firewall.

## Technologies Behind the Setup

Here's a quick summary of the technologies that power each part of my personal cloud:

***********************************************************
*                                                         *
*    ┌──────────────────────┬────────────────────────┐    *
*    │                      │                        │    *
*    │Service               │   Technology           │    *
*    ├──────────────────────┼────────────────────────┤    *
*    │                      │                        │    *
*    │Reverse Proxy         │   Nginx Reverse Proxy  │    *
*    │                      │                        │    *
*    │Access Proxy          │   Teleport             │    *
*    │                      │                        │    *
*    │NAS Private Services  │   QTS (QNAP)           │    *
*    │                      │                        │    *
*    │K8s Docker Services   │   K3s                  │    *
*    │                      │   Portainer            │    *
*    │                      │   Coder                │    *
*    │                      │                        │    *
*    └──────────────────────┴────────────────────────┘    *
*                                                         *
*                                                         *
*                                                         *
***********************************************************

## Why This Setup?

1. **Security**: By using a reverse proxy and access proxy combination, this setup ensures that only authorized users access private resources, while public resources remain easily accessible.
2. **Scalability**: With Kubernetes (K3s) and Docker, you have the flexibility to scale your cloud services quickly as needed.
3. **Cost-Effective**: Thanks to modern tools and open source projects solution offers high performance at a lower cost than traditional enterprise solutions.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
# Implementing Elixir Flow

January 28th, 2025
By Miguel Iñiguez

# Problem

I have a database containing 400,000 lead records. I need to process a CSV file by reading it row by row to check if each phone number already exists in the database. Afterward, I need to generate a new CSV file with an additional column indicating whether each row is duplicated (exists in the database) or not.
A simple query in the database, such as SELECT * FROM leads WHERE phone = '964480916', takes approximately 5 milliseconds. Therefore, processing 5,000 records sequentially would take 5,000×5 ms=25,000 ms5,000 \times 5 \, \text{ms} = 25,000 \, \text{ms}5,000×5ms=25,000ms, or 25 seconds.

To optimize this process, I plan to use concurrency to reduce the total time required for processing the data.

# Solution using Flow
## What is Flow?
Flow is a library in Elixir designed for handling concurrent and parallel data processing, leveraging Elixir's concurrency capabilities and the Erlang runtime system. It is particularly useful for working with large datasets distributed across multiple nodes or CPU cores.

Key Features:

* Parallel Processing: Allows splitting tasks into multiple processes that can run concurrently to take advantage of multicore CPUs.
* Stream-based Model: Flow uses a model inspired by Apache Spark's data processing approach, processing data in stages like a pipeline.
* Compatible with Enumerable: Works with any data source that implements the Enumerable protocol, such as lists, maps, or streams.
* Memory-efficient: Processes data in configurable batches to avoid loading the entire dataset into memory at once.
* Support for Grouping: Allows grouping of data before processing, which is useful for operations like aggregations.

# Explaning the main module

```elixir
def process_csv_concurrently(file_path, output_path) do
  # Read the file as a stream to process it row by row without loading the entire file into memory.
  file_path
  |> File.stream!()
  
  # Parse the CSV stream into rows, where each row is represented as a list of values.
  |> CSV.parse_stream()
  
  # Create a Flow pipeline from the enumerable (the parsed rows).
  # Flow allows concurrent processing of the rows across multiple cores.
  |> Flow.from_enumerable()
  
  # Apply the `process_row` function to each row in the stream concurrently.
  |> Flow.map(&(process_row(&1)))
  
  # Partition the data for better parallelism. This splits the workload into partitions
  # to ensure efficient concurrent processing.
  |> Flow.partition()
  
  # Collect the results of the Flow processing as a list.
  |> Enum.to_list()
  
  # Generate the final output CSV file with the processed data and write it to the given path.
  |> generate_output_csv(output_path)
end

# Helper function to process a single row.
defp process_row([name, phone]) do
  # Check if a record with the given phone number exists in the database (using Ecto).
  is_duplicate =
    Repo.exists?(
      from l in Lead, where: l.phone == ^phone
    )

  # Return the processed row with the original name and phone,
  # plus a boolean indicating if the record is a duplicate.
  [name, phone, is_duplicate]
end

# Helper function to generate and write the output CSV file.
defp generate_output_csv(data, output_path) do
  # Map over the processed data (row by row).
  # This step doesn't modify the rows but prepares them for output.
  processed_data = Enum.map(data, fn row -> row end)
  
  # Define the headers for the output CSV.
  headers = ["name", "phone", "is_duplicate"]

  # Combine the headers and processed rows into CSV format:
  # 1. Add the headers to the data.
  # 2. Convert each row into a comma-separated string.
  # 3. Join all rows with newlines to form the complete CSV content.
  csv_content =
    [headers | processed_data]
    |> Enum.map(fn row -> Enum.join(row, ",") end)
    |> Enum.join("\n")

  # Write the generated CSV content to the specified output path.
  File.write!(output_path, csv_content)
end

```

# Result

The file containing 5,000 rows was processed in less than 2 seconds. This demonstrates the efficiency of using Elixir's concurrency model through the Flow library, which allowed for parallel processing of rows while interacting with the database. The system efficiently identified duplicate records by querying a database with 400,000 existing records, showcasing its capability to handle large datasets quickly and reliably.

# Repo
https://github.com/miniguez/sandbox_flow

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>December 5th, 2024
By Ruben Mevy


# Video Games: A New Frontier in English Teaching

In recent years, video games have evolved from being simple forms of entertainment to becoming significant educational tools. This transformation has opened new opportunities to learn and practice the English language in an interactive and fun way. In this text, we will explore how video games can serve as an essential tool for studying English by analyzing different aspects such as motivation, immersion, and linguistic skills that can be developed through them.

## Motivation

One of the main benefits of using video games to learn English is the **motivation** they generate in players. Unlike traditional learning methods, which can often be monotonous and boring, video games offer a dynamic and immersive experience. Players feel motivated to actively participate because video games present constant challenges and rewards that keep users' interest and attention. This intrinsic motivation is essential for effective learning, as students are more willing to dedicate time and effort to improve their language skills.

## Immersion

Another crucial aspect is the **immersion** that video games provide. Many video games are designed to create complex and realistic virtual worlds where players can interact in English. This immersion in an environment where English is the main medium of communication allows players to learn and practice the language in a natural and contextual way. Additionally, constant exposure to English helps improve listening comprehension and verbal fluency, as players must understand and respond to dialogues and situations presented in the game.

## Development of Linguistic Skills

Video games can also help develop a wide range of **linguistic skills**. For example, role-playing and adventure games often require players to read texts and dialogues in English, which improves **reading comprehension** and expands **vocabulary**. Likewise, online multiplayer games encourage **oral and written communication** in English, as players must collaborate and coordinate with other participants to achieve common goals. This constant interaction with native and non-native English speakers provides invaluable practice in real communication situations.

## Idiomatic Expressions and Slang

Moreover, video games can be an excellent tool for learning **idiomatic expressions and slang** that are not usually taught in traditional textbooks. By interacting with other players and characters in the game, students become familiar with the everyday use of English, including idioms and colloquial phrases that are essential for fluid and natural communication. This exposure to authentic English allows students to develop a deeper and more nuanced understanding of the language.

## Integration into the Educational Curriculum

It is important to note that while video games can be a valuable tool for learning English, they should not completely replace traditional teaching methods. Instead, they should be considered a complement that can enrich and diversify learning strategies. Integrating video games into the educational curriculum can make studying English more engaging and effective, especially for young students who are already familiar with technology and video games.

## Conclusion

In conclusion, video games offer an innovative and effective approach to studying English. The combination of motivation, immersion, and linguistic skill development makes video games powerful tools for learning and practicing the language in a natural and entertaining way. By harnessing the educational potential of video games, students can significantly improve their English competencies while enjoying a unique and engaging learning experience.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

     **What a mechanic understands about Free(dom) Software**

January 27th, 2025
By Alejandro Garcia

My father is 76-year-old mechanic, farmer and bureaucrat.
His daily drive is a 1982 Ford Bronco.
His older cars are 1970's Ford Mustang and a Chevrolet Corvette.
And he understands more about Free-software than  most of us, so-called software engineers.

Free(dom) Software as defined by the Free Software Foundation.
Is software that fulfills the 4 freedoms which are:

> The freedom to run the program as you wish, for any purpose (freedom 0).
> The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.
> The freedom to redistribute copies so you can help your neighbor (freedom 2).
> The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.

# The freedom to run the program as you wish, for any purpose (freedom 0).

Would a mechanic buy a car, that he can only drive on city roads?
Of course not. Because a mechanic OWNS his car and can bend it to its will.
So why we as software engineers accept platforms that we can only use for certain approved purposes?

# The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1).

Would a mechanic buy a car, that he cannot disassembly?
Of course not!
The mere idea that he couldn't disassembly his own car goes against
What makes him a mechanic.
How would a mechanic learn How cars work?
If he couldn't take one apart. And Could only read about how cars are made
Or if there were only "teaching" cars.
But the real cars he couldn't open the hood.

And some companies like John Deere and Tesla, are making it so that only their company employees can fix *your* car.
A mechanic would never touch those companies.

# The freedom to redistribute copies so you can help your neighbor (freedom 2).

Would a mechanic buy a car, that he *can't* later give to his daughter?
Of course no!
Because a mechanic understands that he *OWNS* his car.
To do with his car what he pleases.

And yet with software, and books, we happily accept that we cannot re-sell it?
Why?

# The freedom to distribute copies of your modified versions to others (freedom 3).

Would a mechanic accept a car that he cannot modify?
My Father's '82 Bronco was a 4x4.
He didn't like that suspension because He felt it was to rigid.
So he actually changed the suspension for softer one.
He has also changed the Engine at least 4 times.
and the drive shaft at least 3.
He changed the gear box so many times that he lost count.
Until he found one that felt exactly like he wanted.
And you know what?
He can give his truck to me if he so wishes!

Why would we take anything less from the software that we run?

# The biggest freedom of all

A mechanic knows:

> That he doesn't buy cars that he doesn't understand.
> He doesn't buy cars that come with planned obsolescence
> Or that are designed to limit his freedoms!

Now someone can make the argument, that that is all good for mechanics.
But most of the people are not mechanics, and don't know and don't want to know how their cars work.
So they happily take their car to the dealer, where they get charged handsomely for the most basic service.

And that is true. But the customer *doesn't have* to take their car to the dealer.
They can take it to a cheaper mechanic if they want.

So that is the biggest lesson of all:

> Don't buy car that you can't fix, or take to a mechanic that can fix it.
> Don't buy software that you cannot fix, or take to a software engineer to modify it for you.
> Especially if you are a mechanic, in the case of the former.
> and especially if you are a software engineer, in the case of the latter.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# You can finish today without writing something. Here is why.
November 28th, 2024
By Pepe Hernández

## If you don't write, you don't think
In his blog post https://paulgraham.com/writes.html,
Paul Graham says he doesn't like to make predictions. But he is sure about the next one: "In 20 years, there won't be many people who will write." There will be only two types of people: those who write and those who don't. Artificial intelligence will replace those who don't write now.

If you don't write, you don't think. You only think that you think.

Again, in 20 years, there will be few people who could write. 

As a group, we write a post every week at Jag Academy. So we can practice this valuable skill.

And we do it to think. Practice, practice, practice... 

## Importance of writing for science and experimentation

	"The difference between science and screwing around is writing it down." - "Myth-busters".

The bullet expert of the TV program said that each time, the program was about bullets and explosions. 

As the cartoonist Guindon wrote, "Writing is nature's way of letting you know how sloppy your thinking is."

## Writing is a serious thing. 

The following video (https://www.youtube.com/watch?v=IsQUT9xRYSg) is a short review of the Book "Writing to Learn." Zinsser wrote this book. Here are some quotes that  Zinsser said:

- " I hate writing. It is painful for me. It 's slow and frustrating".
- "I don't like to write, but I take great pleasure in having written - finally made an arrangement with a certain inevitability like the solution to a mathematical problem.
- "In no other line of work is delayed gratification so delayed".
- "Writing is a tool that allows you to wrestle with words and ideas. It forces us to keep asking. I am saying what I want to say".
- "By becoming a better writer, you become a better learner".
- "Writing and rewriting allow you to think clearly, organize their ideas, tell them what they still need to know, and push them to one area of knowledge. Writing can do the same for you".

Zinsser suggests that two types of writing are helpful: explanatory and exploratory. Explanatory means you are describe with full understanding about a topic, on the contrary exploratory lets you talk about a view or perspective about the topic. 

## Learning practices to improve your Writing
Zinsser recommends the following practices based on scientific studies. When I read about them, I immediately remembered the James Lang book Small Teaching. 
Here are examples of how to apply the practice in writing:

- **Retrieval**.  Retrieval practice could involve recalling writing techniques or grammar rules from memory, such as crafting topic sentences, without relying on notes, thereby strengthening retention. 
- **Spaced repetition**.  In this practice, you spread writing assignments or exercises over time, like revisiting essay drafts weekly, to reinforce skills and prevent forgetting. 
- **Elaboration**. This practice entails connecting new writing concepts to prior knowledge, such as linking narrative structure to a familiar story, to deepen understanding. 
- Finally, **interleaving** introduces varied writing tasks in a mixed sequence—practicing persuasive essays, descriptive paragraphs, and research-based summaries—to help students apply techniques across diverse contexts, fostering adaptability and mastery.

Zinsser's most famous book is "On Writing Well." It is full of good writing advice. Here is just one jewel to show you the advice he gives in his book: "When you are ready to stop, stop. Look for the nearest exit. That is when you said what you were trying to say."

P.S. Writing not only let you think. It allows as to be free. You can check the Freedom Writers movie. I remember, I enjoyed very much this movie, where high school students changed their world with the power of thew written voice. 

This can be the topic for other post. Meanwhile, write please.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


     **My Dozen Problems**

October 29th, 2024
By Alejandro Garcia

> "You have to keep a dozen of your favorite problems constantly present in your mind,
> although by and large they will lay in a dormant state.
> Every time you hear or read a new trick or a new result,
> test it against each of your twelve problems to see whether it helps.
> Every once in a while there will be a hit, and people will say,
> 'How did he do it? He must be a genius!'"
>
>      -- Richard Feynman, as recounted mathematician Gian-Carlo Rota


What Feynman calls a Dozen problems,
I call my multi-annual obsessions.

There are topics / problems that continuously go back and forth in my head.
Those ideas sometimes decide to visit me at night
and when that happens,
I know the night is lost.
I'll spend hours trying to dissect the problem, back and front up and down.

On the other hand Steven Pressfield on his book: "The War of Art"
says that as Plato identified there is the world of Ideas,
the world of perfection.
And from that world the Muses (magical beings)
whisper into our ears what exist in this perfect world
So that we can create it in this physical world of ours.

But the Muses don't pick only one human.
On the contrary, they whisper to many of us.
And some have the sensitivity to listen to them.
some less have enough skill in their craft (music, poetry, etc.)
to be capable of actually implementing what the Muse inspire us to accomplish.


I suspect this is my case,
I can listen to the Muse,
but my skills are not good enough to actually,
translate that inspiration into something that exist in the world.

But that doesn't matter
I continue to practice,
Who knows, maybe one day
I'll be skilled enough.

So without further ado, let me share the problems that keep we awake at night.
Plus some tools that always help me to try to solve them.

# Problems

## Different perspectives for the same information
: I love this image:

    ![multiple persepectives](./shadow_cube_cas.jpg)

	It shows that the same object can be seen from multiple perspectives.

	Or in programming terms we can show the same data in multiple views.
	We can see a table, or a graph.
	We can see a Tree, or Kanban board.

## Other problems

* How to have successful software company?

* How to teach software project management?

* How to mix a virtual and physical kanban board?

* How can we automate natural construction

* How to automate processes in particular government processes?

* What is proper setup for working with computers (ergonomics) ?

* How can we make software documentation that works all the time?

* How can we have better alignment, between all the layers of software development?

* How to live comfortably in a small house or apartment?


In the coming days, I’ll expand on each of these problems and dive deeper into the tools and approaches I’ve found useful.

## What about you?

If you have a “dozen problems” that keep you awake at night or tools that help you tackle them,
I’d love to hear your thoughts.
Maybe together, we can find new angles to approach these challenges.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

     **How a Trip to Argentina Renewed My Faith in Cooperatives**

December 9th, 2024
By Alejandro Garcia

Last week, I had the privilege of speaking with the leaders of two remarkable democratically run companies.
These conversations gave me a renewed sense of hope in cooperative models as
viable, ethical, and innovative structures for businesses.

The first was Hernán Wilkinson of **10Pines**, a company I’ve long admired for its groundbreaking work in Smalltalk
and its unique approach to organizational democracy.
The second was Duncan Coutts of **Well-Typed**,
a Haskell consulting firm I’ve had the pleasure of working with through my role at IOHK.
Both organizations exemplify a commitment to values-driven leadership, and both,
in their own way, stand as proof that a company can succeed while treating people with dignity and fairness.

This article focuses on my conversation with Hernán Wilkinson and the lessons I learned from **10Pines**.

# The Four Values That Define 10Pines

Hernán explained that **10Pines** was founded on four guiding principles:

1. **We want to be happy.**
2. **We want to pursue technical excellence.**
3. **We don't need to be millionaires to be happy.**
4. **We don't need to exploit people to become millionaires.**

These values are not just words on a wall.
They are embedded in every aspect of how the company operates,
from how they charge clients to how they handle decision-making.
It’s a philosophy that sets **10Pines** apart in the often cutthroat world of software development.

# Surprising Lessons from 10Pines

## No Sales Team
   In an industry dominated by aggressive sales tactics,
   **10Pines** has no salespeople.
   Hernán explained this choice: salespeople, motivated primarily by commissions,
   often end up selling "smoke"—overpromising results that engineers later struggle to deliver.
   This practice, they realized, conflicted with their core value of happiness.
   So, they eliminated the role entirely, ensuring engineers directly communicate with clients,
   aligning expectations with reality.

## Decisions by Consent
   One of the most fascinating practices at **10Pines** is their decision-making process.
   They avoid both consensus (too slow) and majority voting (which alienates minorities).
   Instead, they use **consent**. If one side feels strongly about a decision, they are allowed to proceed,
   with the understanding that the results will be revisited in three months.
   This approach fosters respect, experimentation, and collaboration.

## Trust Over Exploitation
   When the company allowed employees to choose their own health insurance plans,
   This could have been a "tragedy of the commons," where everyone would opt for the most expensive option.
   To his surprise, only three people selected it, presumably those with genuine need.
   This reinforced his faith in the inherent reasonableness and trustworthiness of people when given responsibility.

## Transparency in Pay
   **10Pines** operates as an open-book company.
   Salaries are public, and the pay structure is clear: the highest-paid employee earns 5.2 times what the lowest-paid employee earns.
   This transparency fosters fairness and eliminates the resentment that secrecy often breeds in traditional organizations.

## Projects as Learning Opportunities
   Projects at **10Pines** are structured to prioritize both quality and education.
   Each team includes at least one junior engineer, who works alongside seniors to learn what "good" looks like in practice.
   They charge by the team, not the level of individual contributors,
   ensuring that training the next generation of engineers is baked into their business model.

## Other things that surprised means

### We have an advantage because we are old

    Hernan told us that maturity is an advantage in this industry.
    So in in industry that is obsessed with young genious that was a refreshing take.

### How they split the profits.

### The last interview is with at least 20 people

    When they hire a new person they need to know that it is going to work well with the others.
    So the last interview is with 20 people.
    I think this also reflects a commitment with quality.
    I mean in the cooperative is they add a new person,
    That means they eare spliting their cake in more slices.
    So they need to know, that the new person will actually increase the size of the cake.

### Everyone is a programmer

    There are only two non-programmers in the company:
    * the acountant
    * the person in HR
    Apart from that very body else is a programmer.

### No project managers, no devops, no business analyst

    We are engineers,
    We know how to estimate a projec,
    (whhich is we don't ) because any estimate longer than 3 months is just guesssing.

    We are engineers,
    We should know how to manage a server.

    We are engineers,
    We know how to ask customers for their input.

# Challenges in a Democratic Company

Of course, running a democratically managed company is not without its challenges.
Hernán candidly shared two surprising experiences:

## Positive: Trust in Action

   Allowing employees to choose their insurance plans was a leap of faith that paid off.
   People chose responsibly, challenging the assumption that self-interest always leads to exploitation.

## Negative: Decision Paralysis

   When the company needed to let an employee go,
   the assembly—responsible for decision-making—took too long to act.
   The delay forced the founders to step in, highlighting
   the occasional need for executive authority in a predominantly democratic system.

## Legal entity incorporation

Although 10Pines is not legally incorporated as a cooperative
(primarily to avoid resistance from certain clients)
their operations embody cooperative principles.
There is a  temptation that can arise when companies receive acquisition offers,
a risk that formal cooperative incorporation might mitigate.

# Why 10Pines Doesn't Build Products

Interestingly, **10Pines** has not yet developed its own product.
Achieving product-market fit is one of the hardest challenges for any company.
Moreover, their natural inclination is to build tools for software engineers
a notoriously difficult market in which to achieve profitability.
For now, they focus on their core strength: delivering custom software with integrity and technical excellence.

# What people are saying.

  I have shared this conversation with many friends and this are their comments

> you can really tell that Hernan,
> is happy professionally
>   -- Karina Chaires

> Everything, you are saying
> sounds like the kind of place
> I would love to work on.
>  -- Mike Iñiguez



# Final Thoughts

Speaking with Hernán Wilkinson reminded me that cooperatives and democratically run businesses are not just idealistic experiments.
They are viable, effective, and deeply human ways to run a company.
By embedding values into every decision,
**10Pines** has created a workplace where happiness and excellence coexist.

My journey to Argentina—and this conversation in particular—has left me with a profound sense of possibility.
If a company can thrive without exploitation, without secrecy, and without sacrificing its principles,
then perhaps the future of work is brighter than we think.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


     ** How to show different perspectives for the same information **

November 21st, 2024
By Alejandro Garcia


As I have said in my previous post:
I love this image:

![multiple perspectives](./shadow_cube_cas.jpg)

It shows that the same object can be seen from multiple perspectives.

So for several years now I have been trying to find:

> "How to show different perspectives for the same information, in programming?"
> -- Alejandro Garcia

In this post I'm going to explain the different ways I have tried to solve this problem.

## Text to Diagrams.

Let's first start with two representations of the same idea:
Text and diagrams.

Here we have PlantUML text:

``` plantuml
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice -> Bob: Another authentication Request
Alice <-- Bob: Another authentication Response
@enduml
```

And it generates this diagram:

![Plantuml](https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBCoKnELT2rKt3AJx9IS2mjoKZDAybCJYp9pCzJ24ejB4qjBk42oYde0jM05MDHLLoGdrUSoeLkM5u-K5sHGY9MGw6ARNHryQb66EwGcfS2T300)

Observe how brief the text to create the diagram is.
And at the same time observe that the diagram is more understandable than the text
used to create it.

I have a collection of tools like this:

https://elviejo79.github.io//2020-02-02-Awesome-list-of-text-to-X/

So in general I love this kinds of tools.
My only problems are so far:
1. I cannot create DSL to create any kind of language I want so that it creates a diagram.
2. I wish that the text to generate the diagrams where actual code.

### For diagrams that are actual code.

We have programming languages like https://ballerina.io
That given this code,
 that is executable

``` java

import ballerina/http;
import ballerina/googleapis.sheets;

configurable string githubPAT = ?;
configurable string repository = "ballerina-platform/ballerina-lang";
configurable string sheetsAccessToken = ?;
configurable string spreadSheetId = ?;
configurable string sheetName = "pull-requests";

type PR record {
    string url;
    string title;
    string state;
    string created_at;
    string updated_at;
};

public function main() returns error? {
    http:Client github = check new ("https://api.github.com/repos");
    map<string> headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": "token " + githubPAT
    };
    PR[] prs = check github->/[repository]/pulls(headers);

    sheets:Client gsheets = check new ({auth: {token: sheetsAccessToken}});
    _ = check gsheets->appendValue(spreadSheetId, ["Issue", "Title", "State", "Created At", "Updated At"],
                {sheetName: sheetName});

    foreach var {url, title, state, created_at, updated_at} in prs {
        _ = check gsheets->appendValue(spreadSheetId, [url, title, state, created_at, updated_at],
                    {sheetName: sheetName});
    }
}
```

will generate this diagram:

![Ballerina](https://ballerina.io/images/consuming-services-diagram.svg)

Now this is a powerful programming language for cloud services.

However my problem is that it's only for that kind of system and only sequence diagram.

I want to crate any kind of diagram, with DSL.

### For creating a DSL that has concepts

The most user friendly ways that I have found to generate DSL are

#### Small-talk

#### Scroll notation

#### White-space lisp

#### Racket

# Ontologies and RDFa

Triplets

Wikidata

SPRQL

# lisp and homo-iconic languages

# Bidirectional parsers

Bidirectional parsers are an extremely interesting concept.

In most programming languages, the Parser and the Pretty Printer are developed independently.
So that means that if your parsers translate a Source Code file .Ne a Long String.
Into an Abstract Syntax Tree (AST). Which is a tree data structure.
And then you print the AST (data structure)
What gets printer is NOT code that compiles.

But having the pretty print code to be compilable is attractive.
Because that way we can more easily build debuggers, or even transpiler.

The idea is that we have the two functions:

get
: takes a source code and returns an abstract syntax tree

	source_code_v1 |> get |> AST

put
: takes an AST and returns a source code

  AST |> put |> source_code_v2

but we need to clarify that source_code_v2 and source_code_v1 are not the same but they are equivalent.
which means that generating the AST from both versions must generate the same AST

	(source_code_v1 |> put) == (source_code_v2 |> put)

Now the problem is that given an AST there is almost an infinite number of possible source_code representations:
for example

  if (A == 1) and (B == 2) then ...

could as easily be represented by

  if (B == 2) and (A == 1) then ...

  or even more difficult

	if (A == 1) then {
		if ( == 2 ) then ...
	}

with a nested if.
So we we have the problem that the _put_ function can have "infinite outputs.
that's why the creators of BiGUL
Created a third function called _put-back_

	put-back(source_code_v1, AST_modified) and produce source_code_v2

So in put-back the parameters are the original source code that you started with, the AST that it generates,
that can or cannot be modified and then outputs source_code_v2.
Since now we have two pieces of data we can actually generate a single deterministic output for put-back.

And that makes all the difference.

## BiGul

## BiOOP

# Json, YAML, XML, S-expressions

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


     **Executable Documentation: Literate programming**

December 27th, 2024
By Alejandro Garcia

One of my dozen problems is how to do Literate Programming.
to write tutorials that:

* Always execute correctly
* Can be used as unit test for the software you are doing.
* Are easy to write.

I have tried so many tools to attempt this.
And none of them have been satisfactory to me.
But in this post I want to talk about the least disapointing one.

# Writing Executable Documentation

Has many challenges.
But the one that I have find the most difficult is to keep
My mind straight into what I'm trying to communicate.

For example:

## Hello World Tutorial.

Let's say I'm writing a programming tutorial.
On how to write `hello world` to the screen using python

This task is so common that we can ask ChatGPT to do it for us:

``` markdown
### **How to Print "Hello, World!" Using Python**

Python is one of the easiest programming languages to learn, and printing "Hello, World!" is often the first program beginners write. This tutorial will guide you through the steps of writing and running your first Python program.

---

### **What You’ll Need**
- Python installed on your computer (download from [python.org](https://www.python.org/) if you don’t have it installed).
- A text editor (e.g., Notepad, Visual Studio Code, or any Python IDE like PyCharm).
- A terminal or command prompt to execute the program.

---

### **Step 1: Write the Code**

Open a text editor and type the following code:

```python
print("Hello, World!")
```

#### **Explanation of the Code**
- **`print`**: A built-in Python function used to display output on the screen.
- **`"Hello, World!"`**: The text string that will be displayed. Strings in Python are enclosed in double (`"`) or single (`'`) quotes.

---

### **Step 2: Save the File**

1. Save the file with a `.py` extension. For example:
   ```
   hello_world.py
   ```
2. Choose a folder where you can easily find the file later.

---

### **Step 3: Run the Program**

#### **Option 1: Using a Terminal or Command Prompt**
1. Open your terminal or command prompt.
2. Navigate to the folder where you saved your file. For example:
   ```bash
   cd path/to/your/folder
   ```
3. Run the script by typing:
   ```bash
   python hello_world.py
   ```
   (On some systems, you may need to use `python3` instead of `python`.)

#### **Option 2: Using an IDE**
1. Open your Python file in an IDE like PyCharm or Visual Studio Code.
2. Look for a "Run" button or menu option.
3. Click "Run" to execute the program.

---

### **Step 4: See the Output**

If everything is set up correctly, you’ll see the following output in your terminal or IDE console:

```
Hello, World!
```

---

### **Tips for Beginners**
- **Case Sensitivity**: Python is case-sensitive. Ensure you type `print` in lowercase.
- **Python Version**: The `print` function works in Python 3 and later. If you're using Python 2 (obsolete), the syntax is slightly different: `print "Hello, World!"` (no parentheses).
- **Debugging**: If you encounter errors, check your file name and syntax.

---

### **Next Steps**

Now that you've written your first Python program, you can explore:
- Variables: Store data using names.
- Loops: Repeat actions.
- Functions: Write reusable code blocks.

Python's simplicity and readability make it an excellent language for beginners. Enjoy your Python journey! 🚀
```

Such a simple tutorial and yet we have many things to consider:

- The student must have python installed.
- The student must know that it needs to type in a *text edito* the instructions `print ("hell world~")`
- Then *Outside* the editor (in bash) the student must execute `python hello_world.py`
- and finally the student needs to know that its program was correct.

As we can see in this image

![A stuedent journey through a tutorial](./student_journey_through_a_tutorial.svg)

The student has to change through many contexts in order to execut a tutorial.

## On TRIZ

Of course we are not the first ones to identify this problem.
In the inovation methodology TRIZ they have this method to analize a problem,
Called the [9 windows](https://en.wikipedia.org/wiki/Nine_windows)


| | supra system | system  | subsystem |
|---|---|---|---|
|past | | | |
|present| | the current topic we want to teach | |
|future | | | |

In our case the supra system, is the students shell.
the supra system is the students Operating system
the subsystem is the `hello.py` code.
The time dimensions, is all the different 
states that the student is going through while following the tutorial.

In order to explain with clarity, 
we need to keep the 9 windows, clear at all times.
And trying not to jump back and forth contiously.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


     **My Dozen Problems**

October 29th, 2024
By Alejandro Garcia

> "You have to keep a dozen of your favorite problems constantly present in your mind,
> although by and large they will lay in a dormant state.
> Every time you hear or read a new trick or a new result,
> test it against each of your twelve problems to see whether it helps.
> Every once in a while there will be a hit, and people will say,
> 'How did he do it? He must be a genius!'"
>
>      -- Richard Feynman, as recounted mathematician Gian-Carlo Rota


What Feynman calls a Dozen problems,
I call my multi-annual obsessions.

There are topics / problems that continuously go back and forth in my head.
Those ideas sometimes decide to visit me at night
and when that happens,
I know the night is lost.
I'll spend hours trying to dissect the problem, back and front up and down.

On the other hand Steven Pressfield on his book: "The War of Art"
says that as Plato identified there is the world of Ideas,
the world of perfection.
And from that world the Muses (magical beings)
whisper into our ears what exist in this perfect world
So that we can create it in this physical world of ours.

But the Muses don't pick only one human.
On the contrary, they whisper to many of us.
And some have the sensitivity to listen to them.
some less have enough skill in their craft (music, poetry, etc.)
to be capable of actually implementing what the Muse inspire us to accomplish.


I suspect this is my case,
I can listen to the Muse,
but my skills are not good enough to actually,
translate that inspiration into something that exist in the world.

But that doesn't matter
I continue to practice,
Who knows, maybe one day
I'll be skilled enough.

So without further ado, let me share the problems that keep we awake at night.
Plus some tools that always help me to try to solve them.

# Problems

## Different perspectives for the same information
: I love this image:

    ![multiple persepectives](./shadow_cube_cas.jpg)

	It shows that the same object can be seen from multiple perspectives.

	Or in programming terms we can show the same data in multiple views.
	We can see a table, or a graph.
	We can see a Tree, or Kanban board.

## Other problems

* How to have successful software company?

* How to teach software project management?

* How to mix a virtual and physical kanban board?

* How can we automate natural construction

* How to automate processes in particular government processes?

* What is proper setup for working with computers (ergonomics) ?

* How can we make software documentation that works all the time?

* How can we have better alignment, between all the layers of software development?

* How to live comfortably in a small house or apartment?


In the coming days, I’ll expand on each of these problems and dive deeper into the tools and approaches I’ve found useful.

## What about you?

If you have a “dozen problems” that keep you awake at night or tools that help you tackle them,
I’d love to hear your thoughts.
Maybe together, we can find new angles to approach these challenges.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">



    # **Dive into Faust: The DSL for Musicians and Sound Wizards** #

    <u> **Dive into Faust: The DSL for Musicians and Sound Wizards** </u> 
 e10cc9d662d3622f181b998e3d796775fef299cb

November 2th, 2024
By Ruben Mevy

 **Faust**, short for Functional Audio Stream, is a domain-specific language (DSL) crafted for real-time signal processing and sound synthesis. Born in the GRAME-CNCM Research Department, Faust shines with its knack for generating high-performance audio apps and plugins across various platforms. For musicians and sound designers, Faust is a perfect mix of simplicity and power, making it a go-to tool for creating innovative sounds and effects.

## **Why Musicians love Faust?** 

1.**Real-Time Audio Magic**: Faust is a pro at real-time audio processing, letting musicians whip up and tweak sounds on the fly. This is a game-changer for live gigs and interactive setups where instant feedback is a must.

2.**Top-Notch Performance**: The Faust compiler turns DSP specs into super-optimized code for targets like C++, WebAssembly, and more. This means your audio apps run smoothly, even on devices with limited resources.

3.**All-Rounder**: Faust isn't just for music. Its solid signal processing chops make it perfect for crafting sound effects for movies, video games, ads, and other multimedia projects. This opens up a world of creative possibilities for sound designers and composers.

4.**Rich Libraries**: Faust comes packed with libraries full of pre-built functions for common DSP tasks. These can speed up your development process, letting you focus on the fun, creative side of sound design.

## **A Bit of History.**

Faust was created to meet the need for a high-level language that simplifies the creation of complex audio processing algorithms. Its journey began in the early 2000s when the GRAME-CNCM Research Department started exploring functional programming for audio applications. Over the years, Faust has grown into a mature and widely-used DSL, backed by a lively community of developers and researchers.

## **Getting Started with Faust**

## **A Bit of History.** 

Faust was created to meet the need for a high-level language that simplifies the creation of complex audio processing algorithms. Its journey began in the early 2000s when the GRAME-CNCM Research Department started exploring functional programming for audio applications. Over the years, Faust has grown into a mature and widely-used DSL, backed by a lively community of developers and researchers.

## **Getting Started with Faust** 
 e10cc9d662d3622f181b998e3d796775fef299cb

New to Faust? Here are some tips to kick things off:

1.**Check Out the Docs**: The Faust documentation is packed with guides and tutorials to help you get the hang of the language. Start with the Quick Start guide to see what Faust can do.

2.**Try the Online IDE**: Faust offers an online Integrated Development Environment (IDE) where you can write, test, and compile Faust code right in your browser. It's a great way to play around with the language without installing anything.
3.**Join the Community**: Get involved with the Faust community through **forums**, **mailing lists**, and **social media**. It's a great resource for getting help, sharing ideas, and staying up-to-date with the latest news.
4.**Experiment with Examples**: The Faust website has loads of examples of DSP algorithms and applications. Studying these can give you ideas on how to structure your own projects and make the most of Faust.


2.**Try the Online IDE**: Faust offers an online Integrated Development Environment (IDE) where you can write, test, and compile Faust code right in your browser. It's a great way to play around with the language without installing anything.

3.**Join the Community**: Get involved with the Faust community through **forums**, **mailing lists**, and **social media**. It's a great resource for getting help, sharing ideas, and staying up-to-date with the latest news.

4.**Experiment with Examples**: The Faust website has loads of examples of DSP algorithms and applications. Studying these can give you ideas on how to structure your own projects and make the most of Faust.

 e10cc9d662d3622f181b998e3d796775fef299cb
In a nutshell, Faust is a powerful and versatile DSL that lets musicians and sound designers push the boundaries of audio creativity. Whether you're looking to create new musical instruments, design immersive soundscapes, or develop cutting-edge audio effects, Faust has the tools and flexibility to bring your ideas to life.








<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


    
January 6th, 2025
By Ruben Mevy

 ## Haskell as a Musical Languaje.

Haskell, a functional language created in 1990 at the University of Glasgow, has found its place in music. From the start, composers and academics have used it for its ability to handle musical structures in a precise and abstract manner. Programs like Euterpea, based on Haskell, allow musicians to create algorithmic compositions and explore new sonic frontiers. Haskell’s lazy evaluation and immutability facilitate the creation of complex musical works, opening creative possibilities for modern composers. In summary, Haskell has influenced both computer science and the evolution of algorithmic music.

## Euterpea

Euterpea is a great tool in Haskell for making and handling music. It lets you create complex songs with code, explore new ideas, and analyze musical structure. With Euterpea, you can work with MIDI, process audio, and design your own virtual instruments. It’s perfect for making algorithmic music, as Haskell handles abstractions and lazy evaluation to create detailed and creative works.

## Pros and Cons

### Pros of Using Haskell and Euterpea for Music

1. **Expressiveness and Abstraction:** Haskell allows clear and concise representation of complex musical ideas, facilitating the exploration and manipulation of abstract musical structures.
2. **Lazy Evaluation:** This enables the creation of infinite or very large musical structures without consuming excessive memory resources, useful for advanced algorithmic compositions.
3. **Immutability:** Data in Haskell is immutable, making compositions more predictable and easier to reason about, reducing errors and bugs.
4. **Powerful Tools:** Euterpea offers a wide range of tools for working with MIDI, sound synthesis, audio processing, and virtual instrument design, allowing great flexibility and creativity.
5. **Community and Resources:** Haskell has an active community contributing libraries, tools, and documentation, making learning and problem-solving easier.
6. **Interoperability:** Euterpea allows easy integration of generated music with other systems and software, facilitating production and performance in diverse environments.

### Cons of Using Haskell and Euterpea for Music

1. **Learning Curve:** Haskell has a syntax and functional paradigm that can be difficult to master, especially if you're used to more common or imperative programming languages.
2. **Limited Documentation and Support:** Although there is an active community, the amount of resources and tutorials specific to music can be less compared to more popular musical environments.
3. **Complex Syntax:** Programming in Haskell can become complex, making music creation more of a technical challenge than a creative activity.
4. **User Interface:** Haskell and Euterpea are primarily text-based, meaning they don't offer a graphical interface like other music composition programs. This can make visualizing and manipulating compositions more difficult.
5. **Real-Time Performance:** Depending on the complexity of the music and the hardware capabilities, Haskell may not be ideal for real-time music applications or live performances.
6. **Software Compatibility:** Integrating Haskell and Euterpea with other musical programs and production tools can be complicated and may require specific solutions.

Using Haskell and Euterpea for music composition offers powerful tools and unique advantages, such as expressiveness and flexibility. However, it also presents challenges like a steep learning curve and limited GUI support. Despite these, it remains a valuable resource for algorithmic and experimental music creation.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
<meta name="author" content="Alejandro Garcia">
<meta name="description" content="Is there a silver bullet to solve any and all problems?"
<meta name="keywords" content="triz, toc, ibis, problem_solving">
<meta name="robots" content="index, follow">
<meta name="language" content="English">

<!-- Open Graph meta tags for better social media sharing -->
<meta property="og:title" content="How to define problems">
<meta property="og:description" content="Is there a silver bullet to solve any and all problems?">
<meta property="og:image" content="https://example.com/image.jpg">
<meta property="og:url" content="https://example.com/page-url">

                            **How to define problems**

October 21st, 2024
by Alejandro Garcia

We all have problems; they are everywhere and at every time.
So, how could we better solve problems?
Is there a silver bullet to solve any and all problems?

I think there is.



# Introduction
==============================================================================

Turns out that we know how to solve all the problems better:

> To ask the right question is already half the solution to a problem.
> Carl Jung.

So that's it!
To become better problem solvers, we need to ask better questions!

> How can we ask better questions?

In this article, we are going to explore three methodologies focused on how to ask better questions:

- IBIs Issue-Based Information System
- Theory of Constraints Thinking Process, in particular, The Current Reality Tree and the Cloud.
- TRIZ for going over contradictions


# Thinking methods

## Issue-Based Information System (IBIS)

The first methodology to ask better questions is IBIS.
In IBIs, they ask better questions by refusing to deal with a problem unless it's asked as a question.


For example, A person might say:

> I'm unhappy with my work.

According to IBIs, that is not a problem. A problem must be written in the form of a question:

> How can I be happy with my work?

or

> Why am I unhappy with my work?

or

> What makes me happy

In either case, each question is actually a problem, and we can actually propose Ideas to solve them:

### For example

``` mermaid
mindmap
	? How can I be happy at my work?
		* Ask for a rise
		* Transfer departements
		* Do the same work at a different company
	   ? What makes you happy?
		   * The outdoors
		   * Physical activity
		   * have a positive impact on society
		   * Money
```


In IBIs, there are rules on what we can write:

In IBIS, every problem is redacted as a question.
Then, below every question can only be an idea for a solution.
Or another question.
As a child to an Idea, there can only be Pros, Cons or other questions.
A Pro Con can only have as children another question.

### For example

``` mermaid
mindmap
	? what should we do about the one ring?
		* Give it to Frodo
			+ He has been carrying it already
			+ He doesn't have delusions of power
			- He is weak
			- He might fall pray to the ring as Gollum did
		* Give it to Gollum
			+ He has taken care of it for over 150 years
			+ He is invisible
		* Give it to humans
			+ Use the enemy weapon against him
			- The greed of man has failed us once before.

```


As you can see the mere constraint of having to write a problem as a question, already makes it easier to try to write options of a solution or a clarifying questions.

This is already more conducive to solving problems than just complaining.


But, sometimes we just know that we don't like the current situation, i.e. we can only complain! And express our dissatisfaction.

In that case, we can use the Current Reality Tree of the Theory of Constraints.
To bring to the surface the root problem.

## Theory of Constraints.

Ok, but how can we find the conflict?


The Current Reality Tree is TOCs method to voice the dissatisfaction that the different people have with the current situation.
Once everyone has voiced their concerns,
We can start to build cause-and-effect relationships between the concerns.
Then, one must appear as the root cause.
This root cause will frequently appear as the beginning and end of a feedback loop. (i.e., a Death spiral)

Once we find the root cause, we can write it as a conflict.
Then, we use the Cloud to try to solve it.


### The Cloud

In the theory of constraints, the tool to define a problem is called a Conflict Resolution Diagram.
But the nickname is the Cloud because once problems are properly defined, they evaporate.

In the Cloud, we start from the conflict.
I.e., Alice wants one thing, and Bob wants another.
And they simply cannot seem to be able to reach an agreement.

The next step in the Cloud is to understand the needs.

What does Alice *need* that is satisfied by her *want*
and what are Bob's *needs* that are satisfied by his *wants*

Then, we can identify the common goal. Both their needs want to be satisfied.

``` asciiflow

********************************************************
*                  ┌──────────┐        ┌─────────┐     *
*           ┌──────┼ Alice's  ◄────────┼Alice's  │     *
*           │      │ Needs    │        │Wants    │     *
*           │      └──────────┘        └─────┬───┘     *
*      ┌────▼─┐                              │         *
*      │Common│                        ┌─────▼────┐    *
*      │Goal▲ │                        │Conflict  │    *
*      └────┼─┘                        └─────▲────┘    *
*           │                                │         *
*           │                                │         *
*           │      ┌──────────┐        ┌─────┼───┐     *
*           │      │Bob's     │        │Bob's    │     *
*           └──────┼Needs    ◄┼────────┼─ants    │     *
*                  └──────────┘        └─────────┘     *
********************************************************

```

 Now, the Cloud is a super optimistic method of thinking with the following principles:

1. there is always a common goal.
 For example, if I want to go on holiday to the mountains and my wife wants to go to the beach.
 We could go our separate ways, and there wouldn't be any conflict.
 But we have the Common Goal of *spending time together*
 So we must find a *solution* that allows us to get what we need and spend time together.

 2. Only our *wants* our desires are in conflict. Never the needs.
 Again, everyone's needs are prerequisites to reach the common goal.
 So, in the Needs, there are no conflicts; they are prerequisites
 that a good solution must satisfy.

So, how do we solve a problem?

In the theory of constraints, the solution is to first:
Verify the Arrows.
I.e., the assumptions that create the relationships between concepts.
Sometimes, one of the arrows is not valid.
And we can move on.

However, more often than not, the arrows are valid.
And we must approach the conflict head-on.

In that case, we could use TRIZ to solve the conflict!!

## TRIZ

TRIZ is a Russian acronym that roughly translates to Theory of Inventive Problem Solving.
Legend has it that Genrich Artshulller studied 10,000 Russian patients.
Trying to extract the general principles that solve problems.

This led to the enunciation of the 40 principles of TRIZ
![Triz matrix](https://en.wikipedia.org/wiki/TRIZ#/media/File:40_principles_of_TRIZ_method_720dpi.jpg)

But before we can apply the 40 principles of innovation.
We must enunciate the problem as a contradiction.
A contraction is the idea of improving the solution in one dimension and making it worse in another.
But Both are needed!
The contradiction is the problem.

### Classic examples

#### Armor vs Agility::
  Ever since the knights mounted a Horse, they knew that heavier armor would protect them better.
  But making it heavier also makes the horses go slower and get tired faster.
  So this is a contradiction: we want speed but lightness.

  This problem is observed even today with Tanks and Jeeps.

  So, what solutions have been proposed to resolve this contradiction?

  For example, some thanks have "explosive" armor. That basically explode when a projectile is approaching the tank. The explosion is the protection, not the armor.

#### Area vs. Resistance

  In a boat deck we would like to have as much area as possible, to accomadate cargo, or even land a helicopter.
  But the wider we make a boat, the more friction that it will generate, and the more fuel that will be needed

  How can we have a boat that is wide above the surface but slim below it? With a catamaran.

So, that is how Triz approaches the definition of a problem. Just find the contradiction.
I.e., the attributes that you want and ask the question in terms of the contradiction.

# Leassons Learned

So, what have we learned?

In order to better solve problems, we need to:

- Ask better questions

To ask better questions, we need to:

a) Write problems and questions and

b) Find a contradiction

A contradiction is:

- When we *need* two properties at the same time, but improving one makes the other worse.

How can we find the contradiction?

- The TOC Current Reality Tree is a useful way to find the contradiction.

How can we solve the contradiction once it is found?

- With IBIS 40 principles.


<link rel="stylesheet" href="https://unpkg.com/latex.css/style.min.css" />
<style>
body.md{
	max-width:120ch; !important
}
</style>
<!-- Markdeep: --><style class="fallback">body{visibility:hidden}</style>
<script src="https://morgan3d.github.io/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


 e10cc9d662d3622f181b998e3d796775fef299cb

November 5th, 2024
By Ruben Mevy

# How to write your ideas? #

It is very common as a student, no matter what we are studying, to find it important to know how to write—not only letters but also our ideas. I have been struggling with the fact that I have to learn and write, and maybe it sounds easy in theory, but in practice, it is not as easy as it looks. But why?

**The recipe way.**
I have realized that there are many ways to express an idea that comes to mind, but we definitely always need to keep in mind that we must have order. When we think, we always think in processes. When preparing food, we think about the entire process of its preparation, from the raw ingredients to the final dish. Similarly, ideas and the way we think when writing are exactly like a recipe. We have to start from the beginning.
There are some steps to follow in order to start writing like a pro:

**Define Your Purpose**: Before you start writing, be clear about the objective of your idea. What do you want to achieve with it? Who is it aimed at? 
We need to have at least a clear idea of who we want to reach or who we want to target with our objectives. And, above all, what we want to achieve with our idea.

**Brainstorm Ideas**: Write down all the ideas that come to mind related to the topic. Don't worry about order or coherence at this stage; just let your thoughts flow.
If your idea is about dogs, just write all about them, for example; pets, toys, dog food, bones, etc. There's more than meets the eye if we start thinking.

**Organize Your Ideas**: Once you have a list of ideas, organize them into an outline or a mind map. This will help you see the overall structure of your idea and how the different points relate to each other.
Write them down in a notebook if you want, in English or Spanish. The important thing is that you see it's easier to organize them when you have them written down somewhere. It will also be easier to relate them to each other and start consolidating your main idea.

**Write a Draft**: Start writing a draft based on your outline. Don't worry about perfection at this stage; the important thing is to get your ideas down on paper.
This is the point where the real practice begins. Just write about your ideas and start to see how they take shape. It will probably look rough at first, but as you keep writing, the way you do it will get better and better.

**Review and Edit**: After writing the draft, take some time to review and edit it. Correct grammatical errors, improve coherence, and ensure your message is clear.
Read it over and over again. First and foremost, you must like what you read. If you don't, we will have to correct spelling, change words, and the syntax of our writing, perhaps several times, until it seems right to us.

**Seek Feedback**: Share your writing with someone you trust and ask for their opinion. Feedback can help you improve and polish your idea.
You should always seek a second opinion. There's no better critic than someone who doesn't conceive the idea. Look for all kinds of critiques; sometimes life is tough, and other times it's not so much. Always keep that in mind.

**Refine Your Work**: Based on the feedback received, make the necessary adjustments to improve your writing. Now, with all the steps of our recipe, we are ready to express our ideas and get the most out of them as they should be. Now, let's enjoy writing.



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/newsmag.css?">
    <!-- Author meta tag -->
    <meta name="author" content="Your Name">

    <!-- Description meta tag -->
    <meta name="description" content="newsmag description"

    <!-- Keywords meta tag -->
    <meta name="keywords" content="keyword1, keyword2, keyword3, keyword4, keyword5">

    <!-- Other common meta tags you might want to include -->
    <meta name="robots" content="index, follow">
    <meta name="language" content="English">

    <!-- Open Graph meta tags for better social media sharing -->
    <meta property="og:title" content="Your Page Title">
    <meta property="og:description" content="A brief description for social media sharing">
    <meta property="og:image" content="https://example.com/image.jpg">
    <meta property="og:url" content="https://example.com/page-url">

	<script src="https://morgan3d.github.io/include.js/include.min.js"></script>



                          **Jag.is**
	Cooperative Innovation Studio specialized in software development, devops and project management.
	We are on this for the long term with our members, our software and our customers.

We are a software development and Innovation Studio.
Specialized in high quality, long term maintenance of software products.

(insert /nav.html here)

An independent research lab exploring the future of tools for thought.
================================================================

We envision a new computer that amplifies human intelligence. A system
that helps you think more clearly, collaborate more effectively, and is
available anywhere and anytime. Though the specifics of our work
continue to evolve, everything we do is in pursuit of this vision.

Research Tracks
---------------------------------------------------------------

Our research spans a wide variety of domains from theoretical computer
science to practical user experiences. We currently have three primary
research themes.

### Malleable Software

Designing software environments where people can customize tools in the
moment to meet their unique needs.

### Programmable Ink

Discovering a dynamic medium for sketching ideas where adding behaviors
and interaction is as natural as applying ink to paper.

### [Local-First](/local-first)

Exploring software architecture that returns data to users and enables
collaboration in every tool.


Our Writing
==============================================================

This are the innovations that have been ocupaying our minds lately


### [2025-02-22: posts/xilenial_discovers_perseverance](./posts/xilenial_discovers_perseverance).
[lab notes ongaing](./posts/xilenial_discovers_perseverance)


### [2025-02-22: posts/tdd_cloud_wilkinson_vs_meyer](./posts/tdd_cloud_wilkinson_vs_meyer).
[lab notes ongaing](./posts/tdd_cloud_wilkinson_vs_meyer)


### [2025-02-22: posts/sonic_pi](./posts/sonic_pi).
[lab notes ongaing](./posts/sonic_pi)


### [2025-02-22: posts/observational_learning](./posts/observational_learning).
[lab notes ongaing](./posts/observational_learning)


### [2025-02-22: posts/music_and_technology](./posts/music_and_technology).
[lab notes ongaing](./posts/music_and_technology)


### [2025-02-22: posts/ideas](./posts/ideas).
[lab notes ongaing](./posts/ideas)


### [2025-02-22: posts/how_to_define_a_problem](./posts/how_to_define_a_problem).
[lab notes ongaing](./posts/how_to_define_a_problem)


### [2025-02-22: posts/haskell_musical_paradigm](./posts/haskell_musical_paradigm).
[lab notes ongaing](./posts/haskell_musical_paradigm)


### [2025-02-22: posts/faust_a_musical_dsl](./posts/faust_a_musical_dsl).
[lab notes ongaing](./posts/faust_a_musical_dsl)


### [2025-02-22: posts/executable_tutorials_literate_programming](./posts/executable_tutorials_literate_programming).
[lab notes ongaing](./posts/executable_tutorials_literate_programming)


### [2025-02-22: posts/different_perspectives_for_the_same_information](./posts/different_perspectives_for_the_same_information).
[lab notes ongaing](./posts/different_perspectives_for_the_same_information)


### [2025-02-22: posts/argentina_coops](./posts/argentina_coops).
[lab notes ongaing](./posts/argentina_coops)


### [2025-02-22: posts/a_dozen_problems](./posts/a_dozen_problems).
[lab notes ongaing](./posts/a_dozen_problems)


### [2025-02-22: posts/You_Need_To_Write_Here_is_Why](./posts/You_Need_To_Write_Here_is_Why).
[lab notes ongaing](./posts/You_Need_To_Write_Here_is_Why)


### [2025-02-22: posts/What_a_mechanic_understans_about_free_software](./posts/What_a_mechanic_understans_about_free_software).
[lab notes ongaing](./posts/What_a_mechanic_understans_about_free_software)


### [2025-02-22: posts/Videogames_The_new_frontier_in_English_learning](./posts/Videogames_The_new_frontier_in_English_learning).
[lab notes ongaing](./posts/Videogames_The_new_frontier_in_English_learning)


### [2025-02-22: posts/Using_Elixir_Flow_To_Process_Data](./posts/Using_Elixir_Flow_To_Process_Data).
[lab notes ongaing](./posts/Using_Elixir_Flow_To_Process_Data)


### [2025-02-22: posts/Unlocking_the_Power_of_Personal_Cloud](./posts/Unlocking_the_Power_of_Personal_Cloud).
[lab notes ongaing](./posts/Unlocking_the_Power_of_Personal_Cloud)


### [2025-02-22: posts/Understanding_complexity_in_software_systems](./posts/Understanding_complexity_in_software_systems).
[lab notes ongaing](./posts/Understanding_complexity_in_software_systems)


### [2025-02-22: posts/Track_your_day](./posts/Track_your_day).
[lab notes ongaing](./posts/Track_your_day)


### [2025-02-22: posts/Top_10_Questions_for_a_Job_Interview](./posts/Top_10_Questions_for_a_Job_Interview).
[lab notes ongaing](./posts/Top_10_Questions_for_a_Job_Interview)


### [2025-02-22: posts/The_Zettelkasten_Note_Taking_Method](./posts/The_Zettelkasten_Note_Taking_Method).
[lab notes ongaing](./posts/The_Zettelkasten_Note_Taking_Method)


### [2025-02-22: posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD](./posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD).
[lab notes ongaing](./posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD)


### [2025-02-22: posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding](./posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding).
[lab notes ongaing](./posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding)


### [2025-02-22: posts/The_Rise_and_Fall_of_Abacus_Rationale](./posts/The_Rise_and_Fall_of_Abacus_Rationale).
[lab notes ongaing](./posts/The_Rise_and_Fall_of_Abacus_Rationale)


### [2025-02-22: posts/The_Photovoltaics_Dilemma](./posts/The_Photovoltaics_Dilemma).
[lab notes ongaing](./posts/The_Photovoltaics_Dilemma)


### [2025-02-22: posts/The_Future_of_Money](./posts/The_Future_of_Money).
[lab notes ongaing](./posts/The_Future_of_Money)


### [2025-02-22: posts/Terravision_vs_Google_Earth](./posts/Terravision_vs_Google_Earth).
[lab notes ongaing](./posts/Terravision_vs_Google_Earth)


### [2025-02-22: posts/Teaching_Academic_Writing_with_the_Macro-Tulmin](./posts/Teaching_Academic_Writing_with_the_Macro-Tulmin).
[lab notes ongaing](./posts/Teaching_Academic_Writing_with_the_Macro-Tulmin)


### [2025-02-22: posts/TRIZ_applied_to_an_Acacemic_Problem](./posts/TRIZ_applied_to_an_Acacemic_Problem).
[lab notes ongaing](./posts/TRIZ_applied_to_an_Acacemic_Problem)


### [2025-02-22: posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw](./posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw).
[lab notes ongaing](./posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw)


### [2025-02-22: posts/Single_text_file](./posts/Single_text_file).
[lab notes ongaing](./posts/Single_text_file)


### [2025-02-22: posts/Simple_example_of_liveview1_phx](./posts/Simple_example_of_liveview1_phx).
[lab notes ongaing](./posts/Simple_example_of_liveview1_phx)


### [2025-02-22: posts/Requirements_in_the_Age_of_AI](./posts/Requirements_in_the_Age_of_AI).
[lab notes ongaing](./posts/Requirements_in_the_Age_of_AI)


### [2025-02-22: posts/Real_Life_Movies_as_a_Teaching_Method](./posts/Real_Life_Movies_as_a_Teaching_Method).
[lab notes ongaing](./posts/Real_Life_Movies_as_a_Teaching_Method)


### [2025-02-22: posts/Re-Discovering_My_PhD_Challenge_for_the_Semester](./posts/Re-Discovering_My_PhD_Challenge_for_the_Semester).
[lab notes ongaing](./posts/Re-Discovering_My_PhD_Challenge_for_the_Semester)


### [2025-02-22: posts/Psychological_Safety](./posts/Psychological_Safety).
[lab notes ongaing](./posts/Psychological_Safety)


### [2025-02-22: posts/Prompt_Engineering_Basics](./posts/Prompt_Engineering_Basics).
[lab notes ongaing](./posts/Prompt_Engineering_Basics)


### [2025-02-22: posts/Product_Management_and_AI](./posts/Product_Management_and_AI).
[lab notes ongaing](./posts/Product_Management_and_AI)


### [2025-02-22: posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner](./posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner).
[lab notes ongaing](./posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner)


### [2025-02-22: posts/PMI_vs_Flight_Levels_Less_is_More](./posts/PMI_vs_Flight_Levels_Less_is_More).
[lab notes ongaing](./posts/PMI_vs_Flight_Levels_Less_is_More)


### [2025-02-22: posts/Our_New_Approach_for_Developing_Products](./posts/Our_New_Approach_for_Developing_Products).
[lab notes ongaing](./posts/Our_New_Approach_for_Developing_Products)


### [2025-02-22: posts/One_more_year](./posts/One_more_year).
[lab notes ongaing](./posts/One_more_year)


### [2025-02-22: posts/Navigating_GHC_compilation_errors_in_Emacs](./posts/Navigating_GHC_compilation_errors_in_Emacs).
[lab notes ongaing](./posts/Navigating_GHC_compilation_errors_in_Emacs)


### [2025-02-22: posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud](./posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud).
[lab notes ongaing](./posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud)


### [2025-02-22: posts/Moving_to_DeepSeek](./posts/Moving_to_DeepSeek).
[lab notes ongaing](./posts/Moving_to_DeepSeek)


### [2025-02-22: posts/More_About_Zettelkaster](./posts/More_About_Zettelkaster).
[lab notes ongaing](./posts/More_About_Zettelkaster)


### [2025-02-22: posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development](./posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development).
[lab notes ongaing](./posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development)


### [2025-02-22: posts/Manage_complexity_behind_simple_interfaces](./posts/Manage_complexity_behind_simple_interfaces).
[lab notes ongaing](./posts/Manage_complexity_behind_simple_interfaces)


### [2025-02-22: posts/Karina_La_Humana](./posts/Karina_La_Humana).
[lab notes ongaing](./posts/Karina_La_Humana)


### [2025-02-22: posts/Kanban_Serious_Games_Intro](./posts/Kanban_Serious_Games_Intro).
[lab notes ongaing](./posts/Kanban_Serious_Games_Intro)


### [2025-02-22: posts/Kanban_Case_Study_in_Public_Sector_Part_I](./posts/Kanban_Case_Study_in_Public_Sector_Part_I).
[lab notes ongaing](./posts/Kanban_Case_Study_in_Public_Sector_Part_I)


### [2025-02-22: posts/Intellectual_Property_Analysis_The_Founder_Movie](./posts/Intellectual_Property_Analysis_The_Founder_Movie).
[lab notes ongaing](./posts/Intellectual_Property_Analysis_The_Founder_Movie)


### [2025-02-22: posts/Innovation_on_Water_Management_from_The](./posts/Innovation_on_Water_Management_from_The).
[lab notes ongaing](./posts/Innovation_on_Water_Management_from_The)


### [2025-02-22: posts/Innovation_Methods_Comparison](./posts/Innovation_Methods_Comparison).
[lab notes ongaing](./posts/Innovation_Methods_Comparison)


### [2025-02-22: posts/Ikigai_to_Evaluate_Education_Ideas](./posts/Ikigai_to_Evaluate_Education_Ideas).
[lab notes ongaing](./posts/Ikigai_to_Evaluate_Education_Ideas)


### [2025-02-22: posts/How_to_Learn_any_Topic](./posts/How_to_Learn_any_Topic).
[lab notes ongaing](./posts/How_to_Learn_any_Topic)


### [2025-02-22: posts/How_to_Do_a_Dirty_and_Quick_Review](./posts/How_to_Do_a_Dirty_and_Quick_Review).
[lab notes ongaing](./posts/How_to_Do_a_Dirty_and_Quick_Review)


### [2025-02-22: posts/How_To_Choose_a_Book](./posts/How_To_Choose_a_Book).
[lab notes ongaing](./posts/How_To_Choose_a_Book)


### [2025-02-22: posts/Home_Manager_strategies_for_symlink_management](./posts/Home_Manager_strategies_for_symlink_management).
[lab notes ongaing](./posts/Home_Manager_strategies_for_symlink_management)


### [2025-02-22: posts/Going_Agile_The_Agile_Way](./posts/Going_Agile_The_Agile_Way).
[lab notes ongaing](./posts/Going_Agile_The_Agile_Way)


### [2025-02-22: posts/Frustration_in_the_face_of_improvement](./posts/Frustration_in_the_face_of_improvement).
[lab notes ongaing](./posts/Frustration_in_the_face_of_improvement)


### [2025-02-22: posts/Extending_the_Power_of_your_Personal_Cloud](./posts/Extending_the_Power_of_your_Personal_Cloud).
[lab notes ongaing](./posts/Extending_the_Power_of_your_Personal_Cloud)


### [2025-02-22: posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones](./posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones).
[lab notes ongaing](./posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones)


### [2025-02-22: posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion](./posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion).
[lab notes ongaing](./posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion)


### [2025-02-22: posts/Did_You_Read_This_Book](./posts/Did_You_Read_This_Book).
[lab notes ongaing](./posts/Did_You_Read_This_Book)


### [2025-02-22: posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines](./posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines).
[lab notes ongaing](./posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines)


### [2025-02-22: posts/Declarative_dotfiles_with_Home_Manager](./posts/Declarative_dotfiles_with_Home_Manager).
[lab notes ongaing](./posts/Declarative_dotfiles_with_Home_Manager)


### [2025-02-22: posts/Creating_a_QR_for_Google_review_URL](./posts/Creating_a_QR_for_Google_review_URL).
[lab notes ongaing](./posts/Creating_a_QR_for_Google_review_URL)


### [2025-02-22: posts/Create_Abundance_With_Software](./posts/Create_Abundance_With_Software).
[lab notes ongaing](./posts/Create_Abundance_With_Software)


### [2025-02-22: posts/Continuous_Integration_CI_Garnix](./posts/Continuous_Integration_CI_Garnix).
[lab notes ongaing](./posts/Continuous_Integration_CI_Garnix)


### [2025-02-22: posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise](./posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise).
[lab notes ongaing](./posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise)


### [2025-02-22: posts/Another_post_on_Crypto_Assets](./posts/Another_post_on_Crypto_Assets).
[lab notes ongaing](./posts/Another_post_on_Crypto_Assets)


### [2025-02-22: posts/A_premier_on_Prometheus_relabelling](./posts/A_premier_on_Prometheus_relabelling).
[lab notes ongaing](./posts/A_premier_on_Prometheus_relabelling)


### [2025-02-22: posts/A_Tool_in_a_World_Full_of_Distractions](./posts/A_Tool_in_a_World_Full_of_Distractions).
[lab notes ongaing](./posts/A_Tool_in_a_World_Full_of_Distractions)


### [2025-02-22: posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions](./posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions).
[lab notes ongaing](./posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions)


### [2025-02-22: posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience](./posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience).
[lab notes ongaing](./posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience)


--------------------------------------------------

#### Connect with us

Say <hello@jag.is>

Code on [Github](https://github.com/jagcoop)

#### Our news letter

Keep up-to-date with the lab's latest findings, appearances, and
happenings by subscribing to our newsletter. For a sneak peek, [browse
the archive](/newsletter).

Email

<ul>
    <li><a href="/">index</a></li>
		<li>[posts/xilenial_discovers_perseverance](/posts/xilenial_discovers_perseverance/index.html)</li>
		<li>[posts/tdd_cloud_wilkinson_vs_meyer](/posts/tdd_cloud_wilkinson_vs_meyer/index.html)</li>
		<li>[posts/sonic_pi](/posts/sonic_pi/index.html)</li>
		<li>[posts/observational_learning](/posts/observational_learning/index.html)</li>
		<li>[posts/music_and_technology](/posts/music_and_technology/index.html)</li>
		<li>[posts/ideas](/posts/ideas/index.html)</li>
		<li>[posts/how_to_define_a_problem](/posts/how_to_define_a_problem/index.html)</li>
		<li>[posts/haskell_musical_paradigm](/posts/haskell_musical_paradigm/index.html)</li>
		<li>[posts/faust_a_musical_dsl](/posts/faust_a_musical_dsl/index.html)</li>
		<li>[posts/executable_tutorials_literate_programming](/posts/executable_tutorials_literate_programming/index.html)</li>
		<li>[posts/different_perspectives_for_the_same_information](/posts/different_perspectives_for_the_same_information/index.html)</li>
		<li>[posts/argentina_coops](/posts/argentina_coops/index.html)</li>
		<li>[posts/a_dozen_problems](/posts/a_dozen_problems/index.html)</li>
		<li>[posts/You_Need_To_Write_Here_is_Why](/posts/You_Need_To_Write_Here_is_Why/index.html)</li>
		<li>[posts/What_a_mechanic_understans_about_free_software](/posts/What_a_mechanic_understans_about_free_software/index.html)</li>
		<li>[posts/Videogames_The_new_frontier_in_English_learning](/posts/Videogames_The_new_frontier_in_English_learning/index.html)</li>
		<li>[posts/Using_Elixir_Flow_To_Process_Data](/posts/Using_Elixir_Flow_To_Process_Data/index.html)</li>
		<li>[posts/Unlocking_the_Power_of_Personal_Cloud](/posts/Unlocking_the_Power_of_Personal_Cloud/index.html)</li>
		<li>[posts/Understanding_complexity_in_software_systems](/posts/Understanding_complexity_in_software_systems/index.html)</li>
		<li>[posts/Track_your_day](/posts/Track_your_day/index.html)</li>
		<li>[posts/Top_10_Questions_for_a_Job_Interview](/posts/Top_10_Questions_for_a_Job_Interview/index.html)</li>
		<li>[posts/The_Zettelkasten_Note_Taking_Method](/posts/The_Zettelkasten_Note_Taking_Method/index.html)</li>
		<li>[posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD](/posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD/index.html)</li>
		<li>[posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding](/posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding/index.html)</li>
		<li>[posts/The_Rise_and_Fall_of_Abacus_Rationale](/posts/The_Rise_and_Fall_of_Abacus_Rationale/index.html)</li>
		<li>[posts/The_Photovoltaics_Dilemma](/posts/The_Photovoltaics_Dilemma/index.html)</li>
		<li>[posts/The_Future_of_Money](/posts/The_Future_of_Money/index.html)</li>
		<li>[posts/Terravision_vs_Google_Earth](/posts/Terravision_vs_Google_Earth/index.html)</li>
		<li>[posts/Teaching_Academic_Writing_with_the_Macro-Tulmin](/posts/Teaching_Academic_Writing_with_the_Macro-Tulmin/index.html)</li>
		<li>[posts/TRIZ_applied_to_an_Acacemic_Problem](/posts/TRIZ_applied_to_an_Acacemic_Problem/index.html)</li>
		<li>[posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw](/posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw/index.html)</li>
		<li>[posts/Single_text_file](/posts/Single_text_file/index.html)</li>
		<li>[posts/Simple_example_of_liveview1_phx](/posts/Simple_example_of_liveview1_phx/index.html)</li>
		<li>[posts/Requirements_in_the_Age_of_AI](/posts/Requirements_in_the_Age_of_AI/index.html)</li>
		<li>[posts/Real_Life_Movies_as_a_Teaching_Method](/posts/Real_Life_Movies_as_a_Teaching_Method/index.html)</li>
		<li>[posts/Re-Discovering_My_PhD_Challenge_for_the_Semester](/posts/Re-Discovering_My_PhD_Challenge_for_the_Semester/index.html)</li>
		<li>[posts/Psychological_Safety](/posts/Psychological_Safety/index.html)</li>
		<li>[posts/Prompt_Engineering_Basics](/posts/Prompt_Engineering_Basics/index.html)</li>
		<li>[posts/Product_Management_and_AI](/posts/Product_Management_and_AI/index.html)</li>
		<li>[posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner](/posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner/index.html)</li>
		<li>[posts/PMI_vs_Flight_Levels_Less_is_More](/posts/PMI_vs_Flight_Levels_Less_is_More/index.html)</li>
		<li>[posts/Our_New_Approach_for_Developing_Products](/posts/Our_New_Approach_for_Developing_Products/index.html)</li>
		<li>[posts/One_more_year](/posts/One_more_year/index.html)</li>
		<li>[posts/Navigating_GHC_compilation_errors_in_Emacs](/posts/Navigating_GHC_compilation_errors_in_Emacs/index.html)</li>
		<li>[posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud](/posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud/index.html)</li>
		<li>[posts/Moving_to_DeepSeek](/posts/Moving_to_DeepSeek/index.html)</li>
		<li>[posts/More_About_Zettelkaster](/posts/More_About_Zettelkaster/index.html)</li>
		<li>[posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development](/posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development/index.html)</li>
		<li>[posts/Manage_complexity_behind_simple_interfaces](/posts/Manage_complexity_behind_simple_interfaces/index.html)</li>
		<li>[posts/Karina_La_Humana](/posts/Karina_La_Humana/index.html)</li>
		<li>[posts/Kanban_Serious_Games_Intro](/posts/Kanban_Serious_Games_Intro/index.html)</li>
		<li>[posts/Kanban_Case_Study_in_Public_Sector_Part_I](/posts/Kanban_Case_Study_in_Public_Sector_Part_I/index.html)</li>
		<li>[posts/Intellectual_Property_Analysis_The_Founder_Movie](/posts/Intellectual_Property_Analysis_The_Founder_Movie/index.html)</li>
		<li>[posts/Innovation_on_Water_Management_from_The](/posts/Innovation_on_Water_Management_from_The/index.html)</li>
		<li>[posts/Innovation_Methods_Comparison](/posts/Innovation_Methods_Comparison/index.html)</li>
		<li>[posts/Ikigai_to_Evaluate_Education_Ideas](/posts/Ikigai_to_Evaluate_Education_Ideas/index.html)</li>
		<li>[posts/How_to_Learn_any_Topic](/posts/How_to_Learn_any_Topic/index.html)</li>
		<li>[posts/How_to_Do_a_Dirty_and_Quick_Review](/posts/How_to_Do_a_Dirty_and_Quick_Review/index.html)</li>
		<li>[posts/How_To_Choose_a_Book](/posts/How_To_Choose_a_Book/index.html)</li>
		<li>[posts/Home_Manager_strategies_for_symlink_management](/posts/Home_Manager_strategies_for_symlink_management/index.html)</li>
		<li>[posts/Going_Agile_The_Agile_Way](/posts/Going_Agile_The_Agile_Way/index.html)</li>
		<li>[posts/Frustration_in_the_face_of_improvement](/posts/Frustration_in_the_face_of_improvement/index.html)</li>
		<li>[posts/Extending_the_Power_of_your_Personal_Cloud](/posts/Extending_the_Power_of_your_Personal_Cloud/index.html)</li>
		<li>[posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones](/posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones/index.html)</li>
		<li>[posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion](/posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion/index.html)</li>
		<li>[posts/Did_You_Read_This_Book](/posts/Did_You_Read_This_Book/index.html)</li>
		<li>[posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines](/posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines/index.html)</li>
		<li>[posts/Declarative_dotfiles_with_Home_Manager](/posts/Declarative_dotfiles_with_Home_Manager/index.html)</li>
		<li>[posts/Creating_a_QR_for_Google_review_URL](/posts/Creating_a_QR_for_Google_review_URL/index.html)</li>
		<li>[posts/Create_Abundance_With_Software](/posts/Create_Abundance_With_Software/index.html)</li>
		<li>[posts/Continuous_Integration_CI_Garnix](/posts/Continuous_Integration_CI_Garnix/index.html)</li>
		<li>[posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise](/posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise/index.html)</li>
		<li>[posts/Another_post_on_Crypto_Assets](/posts/Another_post_on_Crypto_Assets/index.html)</li>
		<li>[posts/A_premier_on_Prometheus_relabelling](/posts/A_premier_on_Prometheus_relabelling/index.html)</li>
		<li>[posts/A_Tool_in_a_World_Full_of_Distractions](/posts/A_Tool_in_a_World_Full_of_Distractions/index.html)</li>
		<li>[posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions](/posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions/index.html)</li>
		<li>[posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience](/posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>

--------------------------------------------------

CC-By-Sa-NC JagIs

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'medium'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
# November 19th, 2024 By Ruben Mevy

## Contents

1. [Music and Technology](#music-and-technology)
   1.1. [Music Production Technology](#music-production-technology)
   1.2. [Music Education](#music-education)
   1.3. [Algorithmic Composition](#algorithmic-composition)
2. [Primitive Musical Technology](#primitive-musical-technology)
   2.1. [Evolution of Musical Technology](#evolution-of-musical-technology)
3. [Music and Programming](#music-and-programming)
   3.1. [Music Production](#music-production)
   3.2. [Digital Instruments](#digital-instruments)
   3.3. [Interactive Performances](#interactive-performances)
   3.4. [AI in Music](#ai-in-music)

## Music and Technology

Music and technology have been intertwined since primitive times. From the earliest instruments to the latest innovations, technology has revolutionized the way music is created and enjoyed. 

### Electronic Instruments

The invention of electronic instruments like the synthesizer, theremin, and electric guitar has radically transformed music creation and performance. These instruments offer a broader range of sounds and effects not possible with traditional acoustic instruments.

4160ce0a1e0658fbe57d9aacb0e1b4192e2f78cf

### Music Production Technology

Music production technology has also undergone a massive transformation in music production. Recording and editing software like Pro Tools, Ableton Live, and Logic Pro enable musicians to record, edit, and mix music with unprecedented precision and flexibility. Digital distribution has changed how we consume music. Platforms like Spotify, Apple Music, and YouTube allow artists to distribute their music globally without needing a traditional record label, democratizing access to music.

### Music Education

Music education has been facilitated by technology, with online applications and platforms like Yousician, Coursera, and MasterClass offering lessons accessible to all levels.

### Algorithmic Composition

Additionally, algorithms and programming are being used to create generative music, algorithmic music composition is a process of creating music using algorithms and programming techniques. Basically, instead of manually writing each note and chord, composers design algorithms that generate music based on a set of predefined rules and parameters, like the ones used in Haskell euterpea.

## Primitive Musical Technology

Primitive music and the technology of those days are fascinating because they show how early humans experimented with sound and music using the resources available in their environment.

### Primitive Instruments

The earliest musical instruments were very simple and made from natural materials, such as drums made from animal skins, bone or reed flutes, and musical bows that used taut strings to produce sounds. Percussion was likely the first form of music, being the most accessible. Striking stones, sticks, or animal skin drums produced rhythms used in rituals and ceremonies. 

### Flutes and Whistles

Bone flutes, like those found in archaeological sites in Europe, date back more than 40,000 years and allowed early humans to create simple melodies. 

### Musical Bows

Musical bows, precursors to modern stringed instruments, used a taut string that could be struck or rubbed to produce sounds and were common in many ancient cultures.

## Evolution of Musical Technology

As societies developed, so did musical instruments and construction techniques, allowing the creation of more complex and precise instruments. Also using modern engineering, many diverse and precise instruments have been created to adapt to the new needs of musicians.

## Music and Programming

Programming and music have a fascinating connection that has evolved over time. 

### Generative Music

Using algorithms and programming, composers can create generative music in real-time based on predefined rules, common in electronic and experimental music. Music programming languages, like Faust, Haskell with the Euterpea library, SuperCollider, and ChucK, are designed specifically for music creation and manipulation, allowing musicians to program compositions and sound effects precisely.

### Music Production

Software programs like Ableton Live, Logic Pro, and FL Studio allow musicians to create, edit, and produce music using digital tools built on complex algorithms that facilitate sound manipulation.

### Digital Instruments

Synthesizers and other electronic instruments often use programming to generate and modify sounds, allowing for a wide range of effects.

### Music Analysis

Programming is also used to analyze music, identifying rhythmic and melodic patterns, and harmonic structure. Tools like Music21 in Python allow detailed study of music.

### Interactive Performances

Programming enables the creation of interactive installations and live performances, where music is generated or modified in real-time in response to audience interaction or other factors.

### Music Education

Music education has been transformed by online applications and platforms that use programming to teach music interactively. Programs like Yousician and Synthesia help students learn to play instruments and understand music theory.

### AI in Music

Artificial intelligence is being used to compose music, analyze trends, and personalize music recommendations. Tools like Amper Music and AIVA can generate compositions based on user-defined parameters. The convergence of programming and music has not only expanded creative possibilities for musicians but also changed how audiences interact with and enjoy music.

The fusion of music and technology has reshaped the landscape of musical creation and consumption. From ancient instruments to modern digital interfaces, advancements have continuously expanded artistic horizons. As we progress into the future, the synergy between musicians and technology will undoubtedly lead to more groundbreaking innovations, redefining how we interact with and experience music. This dynamic evolution not only empowers artists but also enriches audiences, promising a vibrant future where creativity knows no bounds.






 4160ce0a1e0658fbe57d9aacb0e1b4192e2f78cf

>>>>>>> 7ad6d1f97e72261e147dc07063d535470b495e63
<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


    

February 10th, 2025
By Ruben Mevy

 **Learning by Observing**

Learning by observing, also known as observational learning or vicarious learning, is a way of acquiring knowledge and skills through observing the actions and behaviors of others. This form of learning is fundamental in human development and is one of the bases of social learning.

As a musician, the desire to improve on my instrument has always driven me to find the best and most comfortable way to learn. There are many ways, of course, but which ones? There are simple and complex, difficult or easy ways, and not all of them fit us or work for every occasion. Something that has helped me a lot as a music practitioner is learning by observing.

*This weekend I had the opportunity to rehearse some pieces with my dad and some other cousins, and I realized how important it is to observe carefully and try to retain as much detail as possible of what we are seeing and hearing. This way, we can know what we have to do just by seeing it, as long as we have enough knowledge to interpret the hand mechanics in relation to the sound it produces, and in this way, we can replicate it to our liking and thus build or compose new chords or new ideas for musical interpretation.*

In musical programming, I find that I can apply the same method when practicing musical coding through Sonic Pi. *Being considered a musical instrument, as I described in another document, it is necessary to consider some techniques that we could use to better understand its execution, such as learning through observation. While researching the topic of live coding, I found several videos by Sam Aaron, the creator of this Ruby-based language, in which he is seen performing pieces programmed with Sonic Pi. It is amazing the wide range of musical values it has; we can do practically anything, and when focused on observational learning, we can take fragments from other programmers that catch our attention to practice with those codes, modify them, and create our own sounds. Each code gives us a very wide spectrum of sound malleability, with parameters for each sound effect, being able to change everything. Furthermore, observing a programmer coding a musical piece live gives you a clear idea of how a programmed music interpretation should be carried out. Just like a guitar or a bass, which is the instrument I play, our instrument is the computer, and what is shown on the screen are the "strings." The musician wants the viewer to see their fingers moving between the strings creating music, so the programmer projects the code being "played" while the music flows through the keys.*

### Learning Process
- **Attention:** First, you need to pay attention to the person or activity you are observing.
- **Retention:** Then, you need to retain or remember what you have observed.
- **Reproduction:** After that, you try to reproduce or imitate the observed behavior.
- **Motivation:** Finally, you need motivation to perform and repeat the behavior.

### Models to Follow
- **Parents and Teachers:** Children often learn by observing their parents, teachers, and other authority figures.
- **Peers:** People can also learn by observing their peers or companions.
- **Media:** With television, the internet, and social media, it is possible to learn by observing people from all over the world.

### Benefits of Observational Learning
- **Efficiency:** It can be faster and more efficient than learning by trial and error.
- **Safety:** It allows learning behaviors without having to experience the negative consequences of mistakes.
- **Adaptability:** It facilitates adaptation to new situations and environments by observing how others face similar challenges.

### Applications of Observational Learning
- **Education:** Teachers use demonstrations to teach practical skills.
- **Work:** New employees can learn by observing more experienced colleagues.
- **Sports and Art:** Athletes and artists learn techniques by observing professionals.

### Influence on the Development of the Musical Programmer

#### **Fundamentals of the Language**
- **Basic Understanding:** A programmer needs a basic understanding of the programming language they are using. In the case of Sonic Pi, this includes understanding the basics of Ruby, which is the underlying language.
- **Syntax and Commands:** Familiarizing oneself with the syntax and specific commands of Sonic Pi is crucial to interpret and replicate the observed code.

#### **Practical Application**
- **Imitation of Examples:** By observing other programmers, a learner can imitate specific code fragments and techniques, speeding up the learning process.
- **Experimentation:** Applying what has been learned by observing, and experimenting with personal modifications, allows for deeper understanding and personalization of knowledge.

#### **Creativity and Adaptation**
- **Development of Own Style:** Once the learner has a solid foundation, they can begin to develop their own style and unique techniques, based on what they have observed.
- **Innovation:** Observation not only allows replication but also inspires the creation of new ideas and approaches.

### Feedback and Iteration
- **Error Correction:** Observing how other programmers solve problems and correct errors can help the learner develop problem-solving skills.
- **Continuous Improvement:** Feedback from observed peers or mentors can guide the learner in improving their skills.

### Benefits of Observational Learning in Musical Programming
- **Speed and Efficiency:** It speeds up the learning process by providing concrete and practical examples.
- **Adaptability:** It facilitates adaptation to different styles and techniques of programming.
- **Inspiration and Motivation:** It fosters creativity and motivation by seeing what others have achieved.

In summary, having a minimum base of knowledge is essential, but observation can significantly enhance the development of the musical programmer by providing practical examples, inspiration, and continuous improvement opportunities.


Attached is a live coding example video.

https://www.youtube.com/watch?v=vTJ4baIUKZ4&list=PLYINXB6CNU2U6MRNzM8Rre_okdLcPvC4q&index=4






<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


    

February 4th, 2025
By Ruben Mevy

# Sonic Pi: A New Musical Instrument

Music has evolved significantly over time, from primitive drums to today's complex synthesizers. In this ever-changing landscape, Sonic Pi has emerged as a revolutionary musical instrument that not only allows musicians to create complex melodies but also democratizes musical creation by making it accessible to everyone, regardless of their programming experience. In this article, we will explore how Sonic Pi can be viewed and used as a musical instrument, the importance of constant practice, and how it has been designed to be accessible even for those who are not programmers.

## Sonic Pi as a Musical Instrument

Like any traditional musical instrument, Sonic Pi requires dedication and practice. Although it may seem intimidating at first, especially for those without programming experience, the beauty of Sonic Pi lies in its simplicity and capacity for growth. Users can start with simple patterns and gradually advance to more complex compositions, all through live coding.

The focus on live coding makes Sonic Pi a unique tool for live performance. Musicians can improvise and adapt their music on the fly, creating a dynamic and ever-changing experience for both themselves and their audience. This performative aspect of Sonic Pi aligns it with other musical instruments that require practice and skill to master.

## The Importance of Practice

Like any instrument, Sonic Pi requires regular practice to achieve a level of competence. Practicing daily or at least rigorously three to four times a week is essential to improve technique, creativity, and improvisational skills. Through constant practice, musicians can become familiar with the commands and structures of the programming language used in Sonic Pi, allowing them to develop more sophisticated compositions.

Additionally, regular practice helps users develop a keener musical ear. By experimenting with different sounds, rhythms, and melodies, musicians can enhance their understanding of music theory and apply this knowledge in their creations. Practice also fosters creativity, as users can explore new ideas and sound combinations they may not have previously considered.

## Accessibility for Everyone

One of the most remarkable features of Sonic Pi is its accessible design. Although it was created to be a powerful tool for musical creation, it was also designed to be used by people without prior programming experience. The user-friendly interface and detailed documentation allow beginners to dive into the world of code-generated music without feeling overwhelmed.

Sonic Pi's creator, Sam Aaron, has emphasized numerous times the importance of making musical programming accessible to everyone. With this goal in mind, Sonic Pi includes interactive tutorials and examples that guide users through the basic and advanced concepts of musical programming. These educational resources allow new users to learn at their own pace and experiment with musical creation immediately.


 



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

     **The TDD Cloud: Wilkinson and Meyer on Software Design Practices**

December 11th, 2024
By Alejandro Garcia

As I’ve recently written (link to argentina_coops), I had an enlightening conversation with Hernan Wilkinson, an agile developer and founder of the 10 Pines cooperative. During our discussion, I brought up my admiration for the Eiffel programming language and the work of Bertrand Meyer.

Hernan, in turn, shared an anecdote about a conversation he had with Bertrand when he visited Argentina. The topic? Test-Driven Development (TDD). Hernan is a strong proponent of TDD, while Bertrand is a notable critic of the practice, preferring Design by Contract (DBC) instead. When two thought leaders of this caliber disagree, their perspectives deserve careful examination. Rather than picking sides, a more fruitful approach is to ask: under what circumstances might they both be right? And when might they both be wrong?

# Enter the Cloud Tool

Ely Goldratt’s “Cloud” tool, designed to resolve conflicts, provides a structured way to analyze this disagreement. Let’s assemble the cloud for this situation:

1. **What Hernan wants:** To use TDD.
2. **What Bertrand wants:** To use DBC and avoid TDD.
3. **What Hernan needs:** A way to design software guided by concrete examples.
4. **What Bertrand needs:** A way to assure software quality for all cases, not just those tested.
5. **Their common goal:** To develop high-quality software.

 ***********************************************************************************************
 *                ┌─────────────────┐ ┌─────────────────────────────────┐                   
 * Hernan         │Wants            │ │Needs                            │                   
 * Wilkinson      │Use TDD          ┼─►Iterative development            ┼───────┐           
 *                │                 │ │Guided by Concrete Examples      │       │           
 *                │                 │ │                                 │       │           
 *                └──────▲──────────┘ └─────────────────────────────────┘       │           
 *                       │                                                      │           
 *    ┌──────────────────┼─────────┐                                      ┌─────▼──────────┐
 *    │ Conflict                   │                                      │Common Goal     │
 *    │ How can we get both needs? │                                      │Develop High    │
 *    └──────────────────┬─────────┘                                      │Quality Software│
 *                       │                                                └─────▲──────────┘
 *                       │                                                      │           
 *               ┌───────▼──────────┐ ┌─────────────────────────────────┐       │           
 *  Bertrand     │ Wants            │ │Needs                            │       │           
 *  Meyer        │ Used DBC and     ┼─►Assurance the code works        ─┼───────┘           
 *               │ Avoid TDD        │ │Don't waste code that is not used│                   
 *               └──────────────────┘ └─────────────────────────────────┘                   
 ***********************************************************************************************

# Examining the Conflict

Can TDD and DBC coexist in the same project? Technically, yes. But there are inefficiencies to consider. For example, certain TDD tests may become redundant in the presence of preconditions established by DBC. A test that checks for invalid input may be unnecessary if a precondition already specifies that such input is not allowed. On the other hand, all DBC assertions are inherently valuable because they externalize assumptions and are integral to the code itself.

# Cause and Effect

- **Hernan’s side:** Using TDD as an interactive tool for developing software guided by concrete examples is valid and valuable for guiding the design process.
- **Bertrand’s side:** Design by Contract leads to higher software quality assurance because it provides a formal specification.

# Resolving the Conflict

The solution lies in synthesizing their approaches:

- Use DBC always. Assertions such as preconditions and postconditions are critical for defining and validating the assumptions and guarantees of the code.
- Use TDD selectively, focusing on concrete examples that guide the design. However, these examples should not be redundant with DBC assertions. Instead, they should illustrate the "happy path" and other key scenarios.

This compromise respects the strengths of both approaches. DBC ensures rigorous quality assurance, while concrete examples—inspired by TDD but not strictly tests—can help developers think through design decisions.

# Final Thoughts

Would Bertrand oppose the idea of using examples to guide design? Likely not, as long as they aren’t referred to as tests and don’t duplicate what DBC already covers. Thinking about examples—how a feature will be used—is a pragmatic way to align both methodologies.

By applying Goldratt’s Cloud, we see that Hernan and Bertrand’s perspectives are not mutually exclusive. Instead, their combined insights offer a balanced and effective approach to achieving their shared goal: the development of high-quality software.



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">


     **Xilenial Discovers Perseverance**

February 6th, 2025
By Alejandro Garcia

> "Most people overestimate what they can do in one year
> and underestimate what they can accomplish in ten years.
>
>      -- Bill Gates


Here in Mexico we have a meme:

![When the idea of co-living became famous](./coliving_space.png)

When the idea of co-living became famous.
Millenials re-discovered the vecindad.

![Millenials discover the vicinity](./chavodel8.jpg)


A place where multiple families live in the same building,
sharing services and central garden.

## What is a Xilenial?

When talking about Demographic Generations.
The millenials and the Baby Boomers are the most famous.

![Genarations](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Generation_timeline.svg/langen-simple-1280px-Generation_timeline.svg.png)
As you see: Gen X are people born between 1965 and 1980s.
The Millenials are people born between 1981.

However I was born in 1979. And for me the millenials were kids...
And the GenX were the "old" people, you know the ones that were in college, when I was in HighSchool.

Turns out, I'm not the only one that feels that way.
And demographers have identified the  [Xennials](https://en.wikipedia.org/wiki/Xennials)
People between into 1977 and 1983.

> Xennials are described as having had an analog childhood and a digital young adulthood.

So I'm a Xennial

> and recently discovered:
> the secret to accomplishing our goals.



## Well I have a similar experience.


As you know for the past month.
I have been slowly reading and transcribing the book:

[Object Structures](https://openlibrary.org/books/OL811478M/Object_structures)

Which I think is the best book on Data Structures I have ever read.
I wish I had read it when It was first published.

The thing is that the book has 469 pages.
And currently, I have only translated all the way to chapter 4.
So only page 84.

With my slow progress, sometimes, I have felt that It will take me for ever to finish the book.

However, yesterday while working on the last page.

It downed on me, it is *inevitable* that will finish transcribing that book!
It felt like an important insight.
Yet after thinking on the insight for more than 5 seconds.

> I realized, I just had rediscovered **perseverance**

So not a new insight at all.

yet, How come I think I'll finish this goal.
When I have failed with so many others?

# Have systems not goals.

As you know one of my favorites ideas from the book Atomic Habits is;

> Have systems, not goals
> -- James Clear

So the system that I setup.
To make finish this, inevitable is that I have setup as goal in Beeminder that I'll have 10 lines of code **inside** markdown files.
So that way I force myself to translate the markdown and the code.
But the goal is NOT specific to say 500 words of text.
Instead it is 10 lines of code daily, inside markdown files.
So sometimes in code heavy chapters I can reach that goal very easily.
But in other chapters I need to transcribe a lot of text, before actually reaching the 10 lines of code.
So that keeps the goal a little bit variable.
Enough to not make it boring.

With this system.
It seems it is **inevitable** that I'm going to finish transcribing that book.
and you know what.
In this uncertain world, knowing that I'm going to finish something.
feels pretty good!


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

<meta name="author" content="Alejandro Garcia Fernandez">
<meta name="description" content="Implementing the Architecture Oriented Programming of Objective.st in Eiffel">
<meta name="keywords" content="Eiffel, Objective Smalltalk, Design Patterns">
<meta name="robots" content="index, follow">
<meta name="language" content="English">


                  **Architecture-Oriented Programming in Eiffel**
	Applying systems architecture (i.e. between servers) at level of programs (i.e. between functions)


A Conjecture
===============================================================================

Architecture Oriented Programming (AOP) is a programming paradigm that increases reusability and modularity of Object Oriented Languages.
By identifying patterns found at the *architecture level* of *systems* and shrinking them at the *code level* of *programs*.
The advanced features of Eiffel, such as Genericity, Aliasing, and Design by Contract, make it an ideal environment to implement AOP.
And it would result in smaller code with more reusability in Eiffel programs.

Background
================================================================================

Architecture Oriented Programming (AOP) is the name given by Weiher and Hirschfeld to their ideas in developing the Objective Smalltalk language.
The main idea is delightfully simple:

>  What if we took inspiration from the architecture of big systems,
>    and shrink the techniques to organize a single program.

(Weiher, 2020 a)  identified the first patterns and also made a summary in the YouTube presentation: "Can programmers escape the gentle tyranny of call return" (Weiher, 2020 b)
Also, each pattern was published independently. As is shown in table [Summary]:

| Inspired by                      | AOP Proposes                          | One Sentence Summary                                                                                                                                                                                 | Examples                                                                                                                                                     | Reference                                                                                                     |
|----------------------------------|---------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
| Internet URLs and URIs           | Polymorphic identifiers               | If every resource on your program: variables, objects, files, APIs had a local URI that you can use to communicate with it.                                                                          | var:person/name var:person/{attribute},     file://tmp/button.png ,    http://www.example.com/button.png, file:{env:HOME}/rfcs/{rfcName}                     | Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. |
| Internet Protocols FTP, WWW, IRC | Schemes                               | The same way that a URI like ftp://myDir/myImage.jpg has a different behavior, than www://myDy/myImage.jpg. Schemes change the behavior that Polymorphic URI will have                               |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. |
| Spreadsheet formulas             | References                            | The same way that changing a value in a cell in a spreadsheet automatically recalculates the derived values. Reference values will automatically update the derived values in a uniform identifier. |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. |
| Unix pipes and filters           | Polymorphic write streams             | What if unix pipes, instead of sending a chain of text to the next process, threw a nested object structure                                                                                           |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2019). Standard object out: streaming objects with polymorphic write streams.   |
| Rest and stackable filesystems   | Storage combinators                   | With limited API verbs (like REST) you can create components that can compose, web servers combined with cache servers and load balancers.                                                           | A composition serving the files in $HOME/Sites, cached by memory. server := ref:file:{env:HOME} -> CachingStore -> SchemeHTTPServer port:8080. server start. | Weiher, M., & Hirschfeld, R. (2019). Storage combinators.                                                     |
| Constraint programming           | Constraints as polymorphic connectors | What if the assignment operation had more meaning, such as keeping the values unidirectionally updated or synchronized?                                                                              |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2016). Constraints as polymorphic connectors.                                   |
[Table [Summary]: Summary of AOP Patterns and their publication]

Uncertainties (Known-Unknowns)
================================================================================

In his conference, Marcel P. Weiher says that the comments for Unicon made it decide to create a new language (Objective Smalltalk) instead of a library for an existing language.
And on this project, I'm doing exactly that: creating a library, not a new language.
So it might be a bad idea.
However, the advanced tools of Eiffel make this a better approach in this language.

My plan
================================================================================

To get the implementation of AOP in the Eiffel, I intend to:

First
-----------

Write a complete design by contract specification of the architecture patterns identified.
This will require also the description of frame rules.
Probably using "model queries" (Polikarpova et al. 2012)

Second
-----------

I'll make several implementations.
Here, I'll experiment.
Where I'd ask a set of 5 developers to each
develop their storage combinator and polymorphic identifier.
Then, I will try to compose all of them.
And survey the developers to see how they feel about the patterns' specification and composability.

Third
-----------

To test that the code based on AOP is more reusable than the current call return style. I will reimplement a project in Eiffel (like the Nino Webserver).
On AOP and measure using Avontis & Mingis 93 "Metrics from Object-Oriented Design."


Future work (avenues to explore)
=============================================================================

It seems pretentious to talk about "future work" when discussing a proposal for a future project.
But, assuming that I can achieve the goals in the plan. I.e., a specification and implementation for AOP in Eiffel.
What other avenues will open for exploration?
At the moment, I can imagine the following:

Shrink other architectural patterns at the level of programs
-----------------------------------------------------------------------------
Weiher has currently only identified six architectural patterns and shrunk them to the level of programs.
So, a natural progression of this work would be to specify and code even more patterns.

For example, how would a queue-based architecture (like Rabbit MQ) look at the program level? Something like Erlang with OTP?

How would an Event Sourcing architecture look at the program level?
Could we reuse the agent and pub/sub mechanism in GUI Eiffel for other object communication, not only GUI?
Reusing it as the main means of communication among objects.


Given a specification, can ChatGPT program an implementation?
-----------------------------------------------------------------------------
If we follow the headlines, there are two ways of thinking about programming and Large Language Models (LLMs like chatgpt).
Either:

> Programming is dead, and ChatGPT killed it.

or

> ChatGPT and their inherent hallucinations make it irrelevant to programming.

However, I think Design by Contract (DBC) opens an avenue for collaboration between the two approaches.
In this collaboration, humans would write a specification in DBC  with the appropriate frame rules.
Then ChatGPT would try to code to the specification.

So it would be fascinating to see if, given a spec for AOP, we could get ChatGPT to implement it.

Others
-----------------------------
While developing this work, other avenues of growth will become more apparent.


Expected Contributions
================================================================================

As a result of this work, I expect to deliver the following work products.

- Write a design by contract specification of the AOP patterns documented by Weiher.
- Program an Eiffel implementation of said patterns.
- Share the specification and its benefits with the academic and development communities so they can use AOP.

References
================================================================================

- Avotins, J., & Mingins, C. (1993). Metrics for Object-Oriented Design. International Conference on Software Technology: Methods and Tools.
- Polikarpova, N., Furia, C.A., Pei, Y., Wei, Y., & Meyer, B. (2012). What good are strong specifications? 2013 35th International Conference on Software Engineering (ICSE), 262-271.
- Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. Dynamic Languages Symposium.
- Weiher, M., & Hirschfeld, R. (2016). Constraints as polymorphic connectors. Proceedings of the 15th International Conference on Modularity.
- Weiher, M., & Hirschfeld, R. (2019). Standard object out: streaming objects with polymorphic write streams. Proceedings of the 15th ACM SIGPLAN International Symposium on Dynamic Languages.
- Weiher, M., & Hirschfeld, R. (2019). Storage combinators. Proceedings of the 2019 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software.
- Weiher, M. (2020 a). Can programmers escape the gentle tyranny of call/return? Companion Proceedings of the 4th International Conference on Art, Science, and Engineering of Programming.
- Weiher, M. (2020 b). Can programmers escape the gentle tyranny of call/return? https://www.youtube.com/watch?v=Gel8ffr4pqw


<link rel="stylesheet" href="https://unpkg.com/latex.css/style.min.css" />
<style>
body.md{
	max-width:90ch; !important
}
</style>
<!-- Markdeep: --><style class="fallback">body{visibility:hidden}</style>
<script src="https://morgan3d.github.io/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/newsmag.css?">
    <!-- Author meta tag -->
    <meta name="author" content="Your Name">

    <!-- Description meta tag -->
    <meta name="description" content="newsmag description"

    <!-- Keywords meta tag -->
    <meta name="keywords" content="keyword1, keyword2, keyword3, keyword4, keyword5">

    <!-- Other common meta tags you might want to include -->
    <meta name="robots" content="index, follow">
    <meta name="language" content="English">

    <!-- Open Graph meta tags for better social media sharing -->
    <meta property="og:title" content="Your Page Title">
    <meta property="og:description" content="A brief description for social media sharing">
    <meta property="og:image" content="https://example.com/image.jpg">
    <meta property="og:url" content="https://example.com/page-url">

	<script src="https://morgan3d.github.io/include.js/include.min.js"></script>



                          **Jag.is**
	Cooperative Innovation Studio specialized in software development, devops and project management.
	We are on this for the long term with our members, our software and our customers.

We are a software development and Innovation Studio.
Specialized in high quality, long term maintenance of software products.

(insert /nav.html here)

An independent research lab exploring the future of tools for thought.
================================================================

We envision a new computer that amplifies human intelligence. A system
that helps you think more clearly, collaborate more effectively, and is
available anywhere and anytime. Though the specifics of our work
continue to evolve, everything we do is in pursuit of this vision.

Research Tracks
---------------------------------------------------------------

Our research spans a wide variety of domains from theoretical computer
science to practical user experiences. We currently have three primary
research themes.

### Malleable Software

Designing software environments where people can customize tools in the
moment to meet their unique needs.

### Programmable Ink

Discovering a dynamic medium for sketching ideas where adding behaviors
and interaction is as natural as applying ink to paper.

### [Local-First](/local-first)

Exploring software architecture that returns data to users and enables
collaboration in every tool.


Our Writing
==============================================================

This are the innovations that have been ocupaying our minds lately


### [2025-02-22: projects/yaml_resume_db](./projects/yaml_resume_db).
[lab notes ongaing](./projects/yaml_resume_db)


### [2025-02-22: projects/rewards.codes](./projects/rewards.codes).
[lab notes ongaing](./projects/rewards.codes)


### [2025-02-22: projects/AOP_in_Eiffel](./projects/AOP_in_Eiffel).
[lab notes ongaing](./projects/AOP_in_Eiffel)


--------------------------------------------------

#### Connect with us

Say <hello@jag.is>

Code on [Github](https://github.com/jagcoop)

#### Our news letter

Keep up-to-date with the lab's latest findings, appearances, and
happenings by subscribing to our newsletter. For a sneak peek, [browse
the archive](/newsletter).

Email

<ul>
    <li><a href="/">index</a></li>
		<li>[projects/yaml_resume_db](/projects/yaml_resume_db/index.html)</li>
		<li>[projects/rewards.codes](/projects/rewards.codes/index.html)</li>
		<li>[projects/AOP_in_Eiffel](/projects/AOP_in_Eiffel/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>

--------------------------------------------------

CC-By-Sa-NC JagIs

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'medium'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
   <meta charset="utf-8" emacsmode="-*- markdown -*-"> <link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/journal.css?">

                        **Rewards Codes**
                        A Simple Loyalty Platform for *Small* Businesses Using **Big** Strategies


[Rewards Codes - RwC](https://rewards.codes)
Rewards Codes is a straightforward loyalty platform designed to help small businesses implement big strategies for customer retention. This project evolved from a previous initiative, "SigueMS," which was an SMS interface for Twitter.

Why do 50% of loyalty strategies fail? Mainly because they are:

1. Hard to use,
2. Hard to understand, and
3. Offer unappealing rewards.

Rewards Codes addresses these challenges by adopting best practices from the retail and service industries. We focus on:

* Simplicity: With just two easy steps, our platform is designed to be intuitive and user-friendly.
* Accessibility: We use globally recognized communication platforms, making it easy for businesses and customers to engage.
* Valuable Rewards: By allowing businesses to exchange reward points within our network, customers always have access to appealing, desirable rewards.

Thanks to the support of our clients, Rewards Codes has become a tool for fostering positive communication between businesses and their customers. It’s fascinating how an initial customer visit can grow into an ongoing dialogue that includes service feedback, repeat purchases, product launches, and even quick answers to frequently asked questions. Ultimately, this leads to stronger, more meaningful relationships.

### What’s Next for Rewards Codes?

We’re continually evolving to meet the needs of small businesses. Our next steps include expanding the network of businesses that can exchange rewards, introducing new customer engagement features like creating and updating appointments and orders automatically, and exploring partnerships with additional communication platforms. Our goal is to make it even easier for businesses to connect with their customers, strengthen loyalty, and drive growth.

2024-09-19: Features Roadmap 
=================================================================


************************************************************************************
*                  ┌──────────────────────────────────┐ ┌─────────────────────────┐*
*                  │                                  │ │                         │*
*                  │        Q4 2024                   │ │       Q1 2025           │*
*                  │                                  │ │                         │*
*                  │                                  │ │                         │*
*                  │                                  │ │                         │*
*                  └──────────────────────────────────┘ └─────────────────────────┘*
*┌────────────────┐                                                                *
*│                │  * Visits loyalty program             * Customization 1.1      *
*│  Platform      │  * Static QR                                                   *
*│                │  * Dynamic QR                                                  *
*└────────────────┘  * Customization 1.0                                           *
*                                                                                  *
*┌────────────────┐                                                                *
*│                │  * Odoo                               * Oxxo Pay               *
*│  Integrations  │  * Whatsapp reminders                                          *
*│                │  * Whatsapp device link                                        *
*└────────────────┘                                                                *
*                                                                                  *
*┌────────────────┐                                                                *
*│                │  * Company Loyalty card                                        *
*│   Apps         │  * Redeem Code                                                 *
*│                │  * Nearby RwC Businesses (Map)                                 *
*└────────────────┘                                                                *
*                                                                                  *
*┌────────────────┐                                                                *
*│                │  * Customized virtual assistant       * Historical context     *
*│   Chatbot      │  * Time for response customization    * User context           *
*│                │                                       * Agenda management      *
*└────────────────┘                                                                *
************************************************************************************

2024-10-15: Simple architecture 
=================================================================

# Architecture Overview:

Our system architecture revolves around two primary microservices, each serving a crucial function:

Rewards Microservice: This microservice handles the core functionality of giving and redeeming rewards, retrieving balance and account information, and managing overall rewards activity for businesses.

Messaging & Notifications Microservice: This service manages all the interactions between businesses and their customers, including messages and notifications, ensuring smooth and timely communication.

At the center of these microservices is an API Gateway, which provides controlled access to them. This gateway allows external applications to interact with the services securely and efficiently.

For data storage, we employ a Graph Database to record and analyze all customer-business interactions. The use of a graph structure helps us map relationships between customers, businesses, and rewards in a flexible and scalable way.

## Recent Addition: Chatbot Module

We've recently expanded the architecture by integrating a Chatbot Module. Initially, the main microservice interacted with an external service to handle business context exclusively. However, recognizing the need for more meaningful conversations, we are developing additional endpoints to incorporate user context alongside business information.

This enhancement allows the chatbot to provide more personalized, relevant responses, making the platform even more engaging for customers.

## User Context Module

To enrich the chatbot's ability to interact with users meaningfully, we are implementing a User Context Module, which works through two complementary bots:

Classifier Bot: This bot's role is to determine whether a prompt requires querying the database for specific user data or if it can be answered using only business context. This first step ensures that the system responds efficiently by directing the query to the correct source.

Context Bot: Once the Classifier Bot identifies the need for user data, the Context Bot generates the necessary queries to fetch that data. It then supplies this additional user context to the chatbot, allowing it to return an enriched response with deeper insights.

By utilizing these two bots together, the system can deliver more personalized interactions, improving the user experience and fostering stronger connections between businesses and their customers.

*************************************************************************************************************************************************************************************
*                                                                                                                                                                                   *
*                 ┌─────────────┐                                                                                                                                                   *
*                 │  Business   │                                                                                                                                                   *
*                 │  Context    │                                                                                                                                                   *
*                 └─────────────┘──┐  User context                                                                                                                                  *
*     ┌─────────────►│             ◄───────────┐                                                                                                                                    *
*     │              │  Classifier │           │                                                                                                                                    *
*     │         ┌────┼    Bot     ─┼──────┐    │                                                                                                                                    *
*  prompt       │    └─────────────┘      │    │                                                                                                                                    *
*     │         │                         │    │                                                                                                                                    *
*     │      Answer                       │    │                                                                                                                                    *
*     │         │                         │    │                                                                                                                                    *
*   ┌─┼─────────▼┐        Query        ┌──▼────┼───┐                                                                                                                                *
*   │            │      ┌──────────────┼           │                                                                                                                                *
*   │   User     │      │              │  Context  │                                                                                                                                *
*   │            │      │     ┌────────►    Bot    │                                                                                                                                *
*   └────────────┘      │     │ Result └───────────┘                                                                                                                                *
*                       │     │                                                                                                                                                     *
*                     ┌─▼─────┼───┐                                                                                                                                                 *
*                     │ Rewards   │                                                                                                                                                 *
*                     │  Service  │                                                                                                                                                 *
*                     └─┬──────▲──┘                                                                                                                                                 *
*                       │      │ Result ┌────────┐                                                                                                                                  *
*                       │      └────────┼        │                                                                                                                                  *
*                       │               │  DB    │                                                                                                                                  *
*                       └───────────────►        │                                                                                                                                  *
*                        Execute query  └────────┘                                                                                                                                  *
*                                                                                                                                                                                   *
*                                                                                                                                                                                   *
*                                                                                                                                                                                   *
*************************************************************************************************************************************************************************************

### Real-Life Example:

Here’s how the system works in a real-world scenario:

A user asks the chatbot for a recommendation for a place to have dinner. Initially, the chatbot (powered by the Classifier Bot) determines that it needs more than just general business information to give a personalized suggestion. The Classifier Bot recognizes that the best way to provide an accurate recommendation is by considering the user's past preferences.

The system creates a query that checks if the user has previously visited and liked any restaurants within the network of businesses. After executing the query, the chatbot retrieves a list of restaurants the user enjoyed in the past.

Additionally, using data stored in the Graph Database, the Context Bot also identifies similar businesses that other users have liked, which match the user's previous preferences. With this information, the chatbot responds with a personalized dinner recommendation, tailored not only to the user's history but also suggesting similar options based on other users' preferences.

This process ensures the response feels highly personalized, increasing the chances of the user being satisfied with the recommendation, and strengthening their loyalty to the businesses in the network.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
   <meta charset="utf-8" emacsmode="-*- markdown -*-"> <link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/journal.css?">

                        **Yaml Resume Database**
                           Version 1.1


Json Resume is a great way to keep your resume updated.
However there two things missing:

1. Json its an ugly format to look by hand.
2. It would be nice to build a database of the knowledge and skills of team,
   based on their json resume.



2025-01-12: Starting the project
=================================================================

In order to start this project I need:

1. A couple of json resumes
1. the json schema of json resumes.
1. Translate the json schema to a terminus db instance.
1. insert the json resume in terminusdb
1. query the terminusdb  to get the tag cloud of projects we know on.

Now I hope to make this document a literate program.
So let's see how far I get it to be.

Get a couple of json resumes
---------------------------------------------------------------

```nushell
    $ mkdir test
    $ http get https://gist.githubusercontent.com/thomasdavis/c9dcfa1b37dec07fb2ee7f36d7278105/raw/c0399b7abb13fe63912843ca6f6c90af63fb28ae/resume.json |
    > save --force test/1.json
    $ http get https://gist.githubusercontent.com/elviejo79/ab0802ef51ac9f53defe686e7fae452b/raw/1d0be3cb5c3fb03259a1141779b632397524cb55/resume.json |
    > save --force test/2.json
```


Let's get the schema to validate the files

```nushell
    $ http get https://raw.githubusercontent.com/jsonresume/resume-schema/v1.0.0/schema.json | 
    > save test/old.schema.json
```

The schema that is in json schema store is for draf-04 of schema specification. 
And we need to update. it

```nushell
    > ajv migrate -s test/old.schema.json -o test/resume.schema.json
```


We also must make sure that they are
[valid json resumes according to the schema](https://chatgpt.com/share/67849193-d2c0-8007-82ce-26ae4d84f5d9).

```nushell
    $ ajv validate -s test/resume.schema.json -d test/1.json --strict=false -c ajv-formats
    $ ajv validate -s test/resume.schema.json -d test/2.json --strict=false -c ajv-formats
```

2025-01-17 Transform the json_resume.scha to terminsdb schema
================================================================
It took me 5 days of 14 hours to create this migration script from jsonata.
But now I can automaticall translate from json_resume.schema to terminusdb.schema.

!!! note
    I hope someday this transformation script can transform all the json schemas to jsonata.

so now let's execute the jsonata query that transforms this one schema

```nushell
   $ cat test/resume.schema.json | jfq --query-file test/resume_schema_to_terminusdb.jsonata | save --force test/terminus.resume.schema.json
```

So simple and yet that query has been one of the most difficult things I've written.

What should I do next?
---------------------------------------------------------------

[ ] Mutate one of the example resumes so that is almos the same as another 
    To demonstrate that eventhough we are storing several resumes.
    The quantity of entinties in the database doesn't grow because the entities are the same
    Just linked from different documents
[ ] Maybe run the schema commands by hand. So that I get to learn what I need to write.
[ ] Personalize the resume_schema_to_terminusdb.json I think the main table JSON_RESUME
    shouldn't have the @unfolded:[] key BUT  maybe it does... I need to check it.
[ ] Run terminusdb store init to create a new storage
[ ] Think I'll need to set up the routes of the schema and the instances... although I don't know how
[ ] Once the schema is created by hand:
    Try to insert 3 resumes!
[ ] Run queries to show that eventhough you inserted 3 resumes you don't have 3 different entities
    They should repeat!
[ ] Once I know the process by hand:
    try to pipe resume_schema_to_terminusdb.json file | terminusdb db doc -g

2025-01-19 Let's try to make the schema run in TermunsDB
==============================================================================

Are you feeling lucky?
----------------------------
First let's try to see if we are lucky and all of our generated schema works.

```nushell
    $ tdb-cli doc insert family --full-replace --graph_type schema < ./test/terminus.resume.schema.json
    Too many arguments to parse an organizatin
```
Ok no luck.


One by one it is
----------------------------

So now let's do it one by one:

```nushell
    $ "
    > {
    >  "@id": "PROFILES",
    >  "@type": "class",
    >  "@unfolded": [],
    >  "network": "xsd:string",
    >  "url": "xsd:uri",
    >  "username": "xsd:string"
    > }
    > " | save --force ./test/test_one_schema.json
```

```nushell
    $ tdb-cli doc insert family --full-replace --graph_type schema < ./test/test_one_schema.json
    Too many arguments to parse an organization
```

Ok so what is the current `family` schema (`family`) is just what I inhereted from the tutorial
I'm following.

```nushell 
    $ tdb-cli doc get family --graph_type schema | tee ./test/current_organization.json
    {"@base":"terminusdb:///data/", "@schema":"terminusdb:///schema#", "@type":"@context"}
```

let me append it to prepend it to the one schema we have:

```nushell
    $ tdb-cli doc get family --graph_type schema |
    > tee ./test/current_organization.json
    $ cat ./test/current_organization.json ./test/test_one_schema.json |
    > cat ./test/current_organization.json ./test/test_one_schema.json |
    > tdb-cli doc insert family --full-replace --graph_type schema 
    {"@type":"api:InsertDocumentErrorResponse", "api:error": {"@type":"api:UnknownSchemaType", "api:type":"class"}, "api:message":"The '@type' field referred to an unimplemented schema type.", "api:status":"api:failure"}    
```

Ok so it seems the organization problem is over,
now I need to chek the *class* word.
looking at the tutorials seems that it should be "Class"

```nushell
    $ "{
        "@id": "PROFILES",
        "@type": "Class",
        "@unfolded": [],
        "network": "xsd:string",
        "url": "xsd:uri",
        "username": "xsd:string"
      }" | save --force ./test/test_one_schema.json 
```

Next attempt
```nushell
    $ cat ./test/current_organization.json ./test/test_one_schema.json |
    > tdb-cli doc insert family --full-replace --graph_type schema | jfq
    {
      "@type": "api:InsertDocumentErrorResponse",
      "api:error": {
        "@type": "api:SchemaCheckFailure",
        "api:witnesses": [
          {
            "@type": "not_a_class_or_base_type",
            "class": "http://www.w3.org/2001/XMLSchema#uri"
          }
        ]
      },
      "api:message": "Schema check failure",
      "api:status": "api:failure"
    }
```
Ok `uri` is not recognized as a valid type.
What happens If I just eliminate it from the data.
Now I'm going to use jfq to modify the json schema

```nushell
    $ cat ./test/terminus.resume.schema.json | jfq '($[`@id`="PROFILES"] ~>|$|{"@type":"Class"},["url"]|)' | save --force ./test/test_one_schema.json
    $ cat ./test/current_organization.json ./test/test_one_schema.json | tdb-cli doc insert family --full-replace --graph_type schema | jfq
    PROFILES
```

Success!!!

Now let's put the url back
---------------------------------------------------------------


```nushell
    $ cat ./test/terminus.resume.schema.json | jfq '($[`@id`="PROFILES"] ~>|$|{"@type":"Class", "url":"xsd:anyURI"}|)' | save --force ./test/test_one_schema.json
    $ cat ./test/current_organization.json ./test/test_one_schema.json | tdb-cli doc insert family --full-replace --graph_type schema | jfq
    PROFILES
```

Double success!!!

Now let's make all the corrections to the transformer.
----------------------------
Ok now let's try our luck one more time with all the json schema.
but with the Class correction and xsd:anyURI
for that will change the original jsonata query.

```nushell
    $ pbpaste | 
    save --force test/transform_json_resume_schema_to_terminusdb_schema.jsonata ; 
    cat ./test/resume.json_schema | 
    jfq --query-file test/transform_json_resume_schema_to_terminusdb_schema.jsonata | 
    tee { save --force ./test/resume.terminus_schema} |
    tdb-cli doc insert family --full-replace --graph_type schema |
    jfq

    JSON_RESUME
    BASICS
    WORK
    VOLUNTEER
    EDUCATION
    AWARDS
    CERTIFICATES
    PUBLICATIONS
    SKILLS
    LANGUAGES
    INTERESTS
    REFERENCES
    PROJECTS
    META
    LOCATION
    PROFILES
```
 
Triple success!!!

Lets prepare for the next steps
---------------------------------------------------------------

I'll still need to continue to improve the jsonata transformer.
so might as well automate the testing of my variatons

```nushell
    pbpaste | save --force "test/transform_json_resume_schema_to_terminusdb_schema.jsonata" |
    cat ./test/transform_json_resume_schema_to_terminusdb_schema.jsonata 
```

Esta es la parte reptitiva si no has cambiado la query en jsonata explorer

```nushell
cat test/resume.json_schema | jfq --query-file test/transform_json_resume_schema_to_terminusdb_schema.jsonata | save --force ./test/resume.terminus_schema;
cat test/resume.terminus_schema | tee { tdb-cli doc insert family --full-replace --graph_type schema | jfq}
```

Could I store a json resume
----------------------------

```nushell
$ tdb-cli doc insert family < ./test/1.json
Too many arguments to parse an organization
$ tdb-cli doc insert family/JSON_RESUME < ./test/1.json
Too many arguments to parse an organization
$ tdb-cli doc insert admin/family  < ./test/1.json
```

It seems I need to skip validations :-( 
```nushell
    $ cat ./test/2.json | tdb-cli doc insert --raw-json admin/family
["terminusdb:///data/JSONDocument/7EtuLipEyOCx9Nb-" ]

```

However it does insert *a* json

```nushell
    $ tdb-cli doc get admin/family --id JSONDocument/7EtuLipEyOCx9Nb- | jfq
```

And it works!!!

BUT BUT

It's storinga single json document.
NOT all the previous subdocuments.

2025-01-20
==================================================
What is happening is that the actual json_resumes have:
- Extra properties, like website. that are not part of the schema
- lacking properties, that are optional en json schema, but in terminusdb are mandatory.

And this comes from the fact that in, json_schema all properties are optional unless marked as required.
allowing even "additionalInfo" properties.
And in terminusdb is exactly the opposite every property is mandatory, unless marked as optional.
And it doesn't allow extra fields!

I have work around
----------------------------
In this conversation with chatgpt inspired me with the solution:
https://chatgpt.com/share/678e916a-1304-8007-8aa8-32b84d50dbbe

For this fields that are NOT part of the json.schema I need to classify them in a field 
called metadata. And then In that field create store extra json fields.

Changes to the schema_transformer and the instance_transformer
----------------------------
Because it implied changes to the schema_transformer and the instance_transformer

And yes I was able to create such a query.
It needed to change schema transformer
and also query that process the resume.
and I need another query that compares the original resume against the json_schema 

``` nushell
    $ pbpaste | save --force "./test/transform_resume_to_terminunsdb_instance.jsonata" |
    cat ./test/transform_resume_to_terminunsdb_instance.jsonata

    $ echo $"\{\"original_resume\": (cat ./test/1.json), \n \"terminus_schema\": (cat ./test/resume.terminus_schema) \}" | jq |
    tee { save --force "./test/tmp_1.json"} | 
    jfq --query-file ./test/transform_resume_to_terminunsdb_instance.jsonata | jq |
    tee {save --force ./test/terminus.1.json } | 
    tdb-cli doc insert admin/family | jq 
```

This has generated many errors... 
that I have been fixing.
but now I thin I'll just insert one by one.

What should I try next
----------------------------
I will tri to feed terminus.1.json part by part :-( 
I did try it and it complained on every kind of document (awrads,basics, etc)

Trying with terminsdb NOT tdb-cli
----------------------------
I suspect that the terminsudb app is more complete than tdb-cli 

```nushell
    terminusdb store init #creates the directory structure where we are going to store
    terminusdb db create admin/family 
    terminusdb doc insert admin/family --full-replace --graph_type (the terminuss.schema)
    terminusdb doc insert admin/fmaily (the instance you want)
```

2025-01-21 Now lets insert one by One
=================================================
Ok today will try to insert each table one by one.

```nushell
cat ../test/terminus.2.json | jfq "$.basics" | terminusdb doc insert admin/family 
Error: Schema check failure
{
  "@type":"api:InsertDocumentErrorResponse",
  "api:error": {
    "@type":"api:SchemaCheckFailure",
    "api:witnesses": [
      {
	"terminusdb:///schema#location": {
	  "@type":"no_unique_type_for_document",
	  "document": {"address":"Mexico", "countryCode":"US"},
	  "reason": {
	    "@type":"required_field_does_not_exist_in_document",
	    "document": {
	      "terminusdb:///schema#address": {
		"@type":"http://www.w3.org/2001/XMLSchema#string",
		"@value":"Mexico"
	      },
	      "terminusdb:///schema#countryCode":"US"
	    },
	    "field":"terminusdb:///schema#city"
	  }
	}
      }
    ]
  },
  "api:message":"Schema check failure",
  "api:status":"api:failure"
}

```

Ok so the first thing is that the schema lacks #city 
I'll make that property optional in the transformer_json_schema.

2025-01-22 Last strech 
=================================
Eureka: I was able to insert two json resumes in the database !!!

```nushell
   ./jresume_transformer init_terminus
   ./jresume_transformer replace_terminus_schema
   ./jresume_transformer insert_a_resume 1
   ./jresume_transfromer insert_a_resume 2
```

Some things that I have learned:
1. I made all the properties optional. Since json_resume dosen't mark any property as requried.
   But I think I'll need to change this in the future for other json schemas.
2. I need to store nested data as Sets not Lists, because Sets are optional
3. max_cardinality:1 is supposed to mean the same as "Optional"
4. I needed to store the additionalInformation valuas in a nested object. of type sys:JSON 
   because the entities in the database have strict record.
5. The main difference between json_schema nad terminusdb is that 
   in json_schema all fields are optional and can have extra fields.
    wereas in terminusdb the schema is strong. 

2025-01-23 An insight on temporal queries
=========================================================================

Now that I was able to insert data there are a few challenges left.
But as usual I got distracted thinking on the next project...
After I finish this json_resume database.
I want to builda Kanban board like Trello, Kanbanize or Jira.

Thinking about the next kanban board
---------------------------------------------------------------------
And in order to do that I need to record when A card changes column.
So let's think of simple kanban board with:

|Swimlanes|todo | Doing | Review | Doe |
|---------|-----|-------|--------|-----|
| Urgent  |     |Card1  |        |     |
|         |Card2|       |        |     |
|---------|-----|-------|--------|-----|
| Bugs    |     |       |Card3   |     |
|---------|-----|-------|--------|-----|


So the first thing to realize is that a Kanban board is *not* a list of lists.
[Like Joel spolsky said](https://www.joelonsoftware.com/2012/01/06/how-trello-is-different/).

A kanban board is a matrix with Columns (Stages) and rows (Classes of Service).
And a matrix is actually a graph.
So I thikn the most natural thing is to store the kanban board as graph.
Now the next thing is that we not only want matrix.
But we want to record how it changes *over time*.

But we need to ask of it:
How has this card status changed over time.

```yaml
Card_1:
    Status:
        2024-01-01 : Todo
        2024-01-05 : Doing
        2024-01-12 : Review
        2024-01-14 : Done
    Lead_Time:
        Done_minus_todo: 13 days
```

or perhaps we want to know of each column what their cards were:

```yaml
Column:
    Todo:
        2024-01-10: 
            - Card_2
            - Card_4
    Doing
        2024-01-01: 
            - Card_1
    Review
        2024-01-01:
            - Card_3
```

And of coures you can also ask by row (class of service) and column

The important thing is that we need to know how a value changed over time.
And terminus DB *can* do that.
But it is only as 'patch' changes.
as a *checking out* a branch to a certain state of time.

Of course it is NOT natural to do the time queries.
But is possible.

I think my next experiment an Online Collaborative Kanban Board.
Will start with terminus DB.
But will consider to chage to SirixDB

Because I don't think TerminusDB can give me the time queries in an easy way. 
Since it encodes changes in time as patches.. ie. operations to fields.
And then I would need to re-process those patches as changes in time.
and maybe in sirixdb that is easier to do.

Why is time important?
------------------------------------------------------------
Newton (and Leibniz) invented calculus to deal with the fact that the planets change across time.
However our software and our databases (relational) acts as if it was only the present time all the time.
But the fact of the mater is that time exists.
Fields in the database change in time.
People change names, and last names.
Systems where using one version in 1995 and a new version in 2025.
And we need to reflect this in our systems.
But not as somethnig exceptional.
But as the true nature of software.

What we have currently in most systems are "rules of thumb" and exceptions when the need for time is undeniable.

But I think we must work in things that recognize time.
as the "constant" that it is.


2025-02-05 Trying to get Eiffel Framework To Work
===================================================
I have spent the better part of a long weekend trying to get Eiffel Web Framework to work.
And I have hade several issues:

1. It is too low level for my taste
2. I couldn't get validation of the form build to work.
3. I couldn't get regex to work (for the validation)
4. I couldn't get a URI library to work.

Too low level
---------------------------------------------------------
Eiffel web framework has two objects `request` and `response`
In one comes the http request and of course in the other we write the response.

When a a user submits a form every field needs to be checked to be "attached" meaning not null.
And then it needs to be decoded by it's type.

But that is on what I want.

What I want is to give it an object with it's requirements to be attached or not.
with it's types and have it automatically create a form for me.
Also when  I submit it. 
It sholud be hydrated by the framework in to the same type that the object was created.
THi will work with Magritte.

I couldn't get the URI library to work.
----------------------------------------------------------------
I think this was my mistake.
after ading the URI class.
I probably need to compile.


I couldn't get regex to work.
-----------------------------------------------------------------
This was a problem of documentation.
I needed to compile the RegEx before doing the match.

 
<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<li>[.](././) 
    <ul>
	  <li>[./projects](././projects/) 
	      <ul>
	  	  <li>[./projects/yaml_resume_db](././projects/yaml_resume_db/) 
	  	      <ul>
	  	  	  <li>[./projects/yaml_resume_db/test](././projects/yaml_resume_db/test/) 
	  	  	  </li>
	  	  	</ul>
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./projects/rewards.codes](././projects/rewards.codes/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./projects/AOP_in_Eiffel](././projects/AOP_in_Eiffel/) 
	  	  </li>
	  	</ul>
	  </li>
	</ul>
    <ul>
	  <li>[./posts](././posts/) 
	      <ul>
	  	  <li>[./posts/xilenial_discovers_perseverance](././posts/xilenial_discovers_perseverance/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/tdd_cloud_wilkinson_vs_meyer](././posts/tdd_cloud_wilkinson_vs_meyer/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/sonic_pi](././posts/sonic_pi/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/observational_learning](././posts/observational_learning/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/music_and_technology](././posts/music_and_technology/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/ideas](././posts/ideas/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/how_to_define_a_problem](././posts/how_to_define_a_problem/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/haskell_musical_paradigm](././posts/haskell_musical_paradigm/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/faust_a_musical_dsl](././posts/faust_a_musical_dsl/) 
	  	      <ul>
	  	  	  <li>[./posts/faust_a_musical_dsl/a_dozen_problems](././posts/faust_a_musical_dsl/a_dozen_problems/) 
	  	  	  </li>
	  	  	</ul>
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/executable_tutorials_literate_programming](././posts/executable_tutorials_literate_programming/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/different_perspectives_for_the_same_information](././posts/different_perspectives_for_the_same_information/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/argentina_coops](././posts/argentina_coops/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/a_dozen_problems](././posts/a_dozen_problems/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/You_Need_To_Write_Here_is_Why](././posts/You_Need_To_Write_Here_is_Why/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/What_a_mechanic_understans_about_free_software](././posts/What_a_mechanic_understans_about_free_software/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Videogames_The_new_frontier_in_English_learning](././posts/Videogames_The_new_frontier_in_English_learning/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Using_Elixir_Flow_To_Process_Data](././posts/Using_Elixir_Flow_To_Process_Data/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Unlocking_the_Power_of_Personal_Cloud](././posts/Unlocking_the_Power_of_Personal_Cloud/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Understanding_complexity_in_software_systems](././posts/Understanding_complexity_in_software_systems/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Track_your_day](././posts/Track_your_day/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Top_10_Questions_for_a_Job_Interview](././posts/Top_10_Questions_for_a_Job_Interview/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/The_Zettelkasten_Note_Taking_Method](././posts/The_Zettelkasten_Note_Taking_Method/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD](././posts/The_Sunk_Cost_Fallacy_Another_Obstacle_in_my_PhD/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding](././posts/The_Story_of_How_Bitcoin_Became_an_Unexpected_Best_Man_at_My_Wedding/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/The_Rise_and_Fall_of_Abacus_Rationale](././posts/The_Rise_and_Fall_of_Abacus_Rationale/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/The_Photovoltaics_Dilemma](././posts/The_Photovoltaics_Dilemma/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/The_Future_of_Money](././posts/The_Future_of_Money/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Terravision_vs_Google_Earth](././posts/Terravision_vs_Google_Earth/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Teaching_Academic_Writing_with_the_Macro-Tulmin](././posts/Teaching_Academic_Writing_with_the_Macro-Tulmin/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/TRIZ_applied_to_an_Acacemic_Problem](././posts/TRIZ_applied_to_an_Acacemic_Problem/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw](././posts/Softwre_is_Eating_The_World_and_AI_is_Eating_the_Sw/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Single_text_file](././posts/Single_text_file/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Simple_example_of_liveview1_phx](././posts/Simple_example_of_liveview1_phx/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Requirements_in_the_Age_of_AI](././posts/Requirements_in_the_Age_of_AI/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Real_Life_Movies_as_a_Teaching_Method](././posts/Real_Life_Movies_as_a_Teaching_Method/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Re-Discovering_My_PhD_Challenge_for_the_Semester](././posts/Re-Discovering_My_PhD_Challenge_for_the_Semester/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Psychological_Safety](././posts/Psychological_Safety/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Prompt_Engineering_Basics](././posts/Prompt_Engineering_Basics/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Product_Management_and_AI](././posts/Product_Management_and_AI/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner](././posts/Pay_Your_Dues_BPM_Diagraming_SketchMiner/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/PMI_vs_Flight_Levels_Less_is_More](././posts/PMI_vs_Flight_Levels_Less_is_More/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Our_New_Approach_for_Developing_Products](././posts/Our_New_Approach_for_Developing_Products/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/One_more_year](././posts/One_more_year/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Navigating_GHC_compilation_errors_in_Emacs](././posts/Navigating_GHC_compilation_errors_in_Emacs/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud](././posts/Multi-layered_Proxy_Architecture_for_my_Personal_Cloud/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Moving_to_DeepSeek](././posts/Moving_to_DeepSeek/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/More_About_Zettelkaster](././posts/More_About_Zettelkaster/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development](././posts/Micro_Schools_as_an_alternative_for_Sw_Dev_Engineers_Talent_Development/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Manage_complexity_behind_simple_interfaces](././posts/Manage_complexity_behind_simple_interfaces/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Karina_La_Humana](././posts/Karina_La_Humana/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Kanban_Serious_Games_Intro](././posts/Kanban_Serious_Games_Intro/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Kanban_Case_Study_in_Public_Sector_Part_I](././posts/Kanban_Case_Study_in_Public_Sector_Part_I/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Intellectual_Property_Analysis_The_Founder_Movie](././posts/Intellectual_Property_Analysis_The_Founder_Movie/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Innovation_on_Water_Management_from_The](././posts/Innovation_on_Water_Management_from_The/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Innovation_Methods_Comparison](././posts/Innovation_Methods_Comparison/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Ikigai_to_Evaluate_Education_Ideas](././posts/Ikigai_to_Evaluate_Education_Ideas/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/How_to_Learn_any_Topic](././posts/How_to_Learn_any_Topic/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/How_to_Do_a_Dirty_and_Quick_Review](././posts/How_to_Do_a_Dirty_and_Quick_Review/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/How_To_Choose_a_Book](././posts/How_To_Choose_a_Book/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Home_Manager_strategies_for_symlink_management](././posts/Home_Manager_strategies_for_symlink_management/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Going_Agile_The_Agile_Way](././posts/Going_Agile_The_Agile_Way/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Frustration_in_the_face_of_improvement](././posts/Frustration_in_the_face_of_improvement/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Extending_the_Power_of_your_Personal_Cloud](././posts/Extending_the_Power_of_your_Personal_Cloud/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones](././posts/Dont_Waste_Your_Time_with_Skeptics_Work_with_Interested_Ones/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion](././posts/Disrupting_Innovation_for_Educational_Challenges_From_Atlantic_To_Pacific_Dominion/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Did_You_Read_This_Book](././posts/Did_You_Read_This_Book/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines](././posts/Devtron_Enhancing_Kubernetes_Management_and_DevOps_Pipelines/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Declarative_dotfiles_with_Home_Manager](././posts/Declarative_dotfiles_with_Home_Manager/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Creating_a_QR_for_Google_review_URL](././posts/Creating_a_QR_for_Google_review_URL/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Create_Abundance_With_Software](././posts/Create_Abundance_With_Software/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Continuous_Integration_CI_Garnix](././posts/Continuous_Integration_CI_Garnix/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise](././posts/Bloom_Taxonomy_Shu_Ha_Ri_Expertise/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Another_post_on_Crypto_Assets](././posts/Another_post_on_Crypto_Assets/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/A_premier_on_Prometheus_relabelling](././posts/A_premier_on_Prometheus_relabelling/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/A_Tool_in_a_World_Full_of_Distractions](././posts/A_Tool_in_a_World_Full_of_Distractions/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions](././posts/A_Real_Challenge_as_DevOps_Navigating_Key_Hurdles_and_Solutions/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience](././posts/A_Better_Approach_To_Finding_a_Resarch_Problem_for_Proffesionals_with_Experience/) 
	  	  </li>
	  	</ul>
	  </li>
	</ul>
    <ul>
	  <li>[./drafts](././drafts/) 
	  </li>
	</ul>
    <ul>
	  <li>[./about](././about/) 
	  </li>
	</ul>
</li>
