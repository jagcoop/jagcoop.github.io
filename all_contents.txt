     <meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/slate.css?">

                        **Slate Template**
                           Version 1.23


This template is good for "dark mode" documentation. It automatically
switches to black-on-white and an inline table of contents when
printed.


Initialization
==============================================================

Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis
voluptatibus maiores alias consequatur aut perferendis doloribus
asperiores repellat.

Asset Based
--------------------------------------------------------------

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur.

 Maine | Iowa | Colorado
-------|------|----------
   1   |  4   |   10
  ME   |  IA  |   CO
 Blue  | Red  | Brown
[Table [states]: Caption with label.]


### Exporters

Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum:

- Incididunt
- Bonus Unum
- Quibusdam

```````````````````````````````````````````````
count_lines () {
  local f=$1
  local m
  m=`wc -l $f | sed 's/^\([0-9]*\).*$/\1/'`
  return $m
}
```````````````````````````````````````````````


Procedural
--------------------------------------------------------------

At vero eos et accusamus et iusto odio dignissimos ducimus qui
blanditiis praesentium voluptatum deleniti atque corrupti quos dolores
et quas molestias excepturi sint occaecati cupiditate non provident,
similique sunt in culpa qui officia deserunt mollitia animi, id est
laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita
distinctio.

**************************************************************
*
* .---.       .-.        .-.       .-.
* | A +----->| 1 +<---->| 2 |<----+ 4 +------------------.
* '---'       '-'        '+'       '-'                    |
*                         |         ^                     |
*                         v         |                     v
*                        .-.      .-+-.        .-.      .-+-.
*                       | 3 +---->| B |<----->| 5 +---->| C |
*                        '-'      '---'        '-'      '---'
**************************************************************

Nam libero tempore, cum `soluta` nobis est eligendi optio
cumque nihil impedit quo minus id quod maxime placeat facere possimus,
omnis voluptas assumenda est, omnis dolor repellendus. Temporibus
autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe
eveniet ut et voluptates repudiandae sint et molestiae non
recusandae.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a long preformatted code block a long preformatted code block a long preformatted code block a long preformatted code block a long preformatted code block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Modules
==============================================================

Nam libero tempore, cum soluta nobis est eligendi optio
cumque nihil impedit quo minus id quod maxime placeat facere possimus,
omnis voluptas assumenda est, omnis dolor repellendus.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ rust
fn main() {
    let x = 5u32;

    let y = {
        let x_squared = x * x;
        let x_cube = x_squared * x;

        // This expression will be assigned to `y`
        x_cube + x_squared + x
    };

    let z = {
        // The semicolon suppresses this expression and `()` is assigned to `z`
        2 * x;
    };

    println!("x is {:?}", x);
    println!("y is {:?}", y);
    println!("z is {:?}", z);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<!--
![`a long code caption a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg)
![`a long code caption a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg) ![`a long code caption`](robot.jpg)
-->

See Also
==============================================================

[Link to nowhere](nowhere).



<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/newsmag.css?">

    <meta name="author" content="Your Name">
    <meta name="description" content="newsmag description"
    <meta name="keywords" content="keyword1, keyword2, keyword3, keyword4, keyword5">

    <!-- Other common meta tags you might want to include -->
    <meta name="robots" content="index, follow">
    <meta name="language" content="English">

    <!-- Open Graph meta tags for better social media sharing -->
    <meta property="og:title" content="Your Page Title">
    <meta property="og:description" content="A brief description for social media sharing">
    <meta property="og:image" content="https://example.com/image.jpg">
    <meta property="og:url" content="https://example.com/page-url">

	<script src="https://morgan3d.github.io/include.js/include.min.js"></script>


                          **Jag.is**
	Cooperative Innovation Studio specialized in software development, devops and project management.
	We are on this for the long term with our members, our software and our customers.

We are a software development and Innovation Studio.
Specialized in high quality, long term maintenance of software products.


An independent research lab exploring the future of tools for thought.
================================================================

We envision a new computer that amplifies human intelligence. A system
that helps you think more clearly, collaborate more effectively, and is
available anywhere and anytime. Though the specifics of our work
continue to evolve, everything we do is in pursuit of this vision.

Research Tracks
---------------------------------------------------------------

Our research spans a wide variety of domains from theoretical computer
science to practical user experiences. We currently have three primary
research themes.

### Malleable Software

Designing software environments where people can customize tools in the
moment to meet their unique needs.

### Programmable Ink

Discovering a dynamic medium for sketching ideas where adding behaviors
and interaction is as natural as applying ink to paper.

### [Local-First](/local-first)

Exploring software architecture that returns data to users and enables
collaboration in every tool.


Our Writing
==============================================================

This are the innovations that have been ocupaying our minds lately

<ul>
  <li>[./projects](././projects/) 
      <ul>
  	  <li>[./projects/rewards.codes](././projects/rewards.codes/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./projects/AOP_in_Eiffel](././projects/AOP_in_Eiffel/) 
  	  </li>
  	</ul>
  </li>
  <li>[./posts](././posts/) 
      <ul>
  	  <li>[./posts/how_to_define_a_problem](././posts/how_to_define_a_problem/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Unlocking_the_Power_of_Personal_Cloud](././posts/Unlocking_the_Power_of_Personal_Cloud/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Understanding_complexity_in_software_systems](././posts/Understanding_complexity_in_software_systems/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/The_Rise_and_Fall_of_Abacus_Rationale](././posts/The_Rise_and_Fall_of_Abacus_Rationale/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Requirements_in_the_Age_of_AI](././posts/Requirements_in_the_Age_of_AI/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Psychological_Safety](././posts/Psychological_Safety/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Manage_complexity_behind_simple_interfaces](././posts/Manage_complexity_behind_simple_interfaces/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Declarative_dotfiles_with_Home_Manager](././posts/Declarative_dotfiles_with_Home_Manager/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/Creating_a_QR_for_Google_review_URL](././posts/Creating_a_QR_for_Google_review_URL/) 
  	  </li>
  	</ul>
      <ul>
  	  <li>[./posts/A_Tool_in_a_World_Full_of_Distractions](././posts/A_Tool_in_a_World_Full_of_Distractions/) 
  	  </li>
  	</ul>
  </li>
  <li>[./about](././about/) 
  </li>
</ul>
--------------------------------------------------

#### Connect with us

Say [hello@jag.is](mailto://hello@jag.is)

Code on [Github](https://github.com/jagcoop)

#### Our news letter

Keep up-to-date with the lab's latest findings, appearances, and
happenings by subscribing to our newsletter. For a sneak peek, [browse
the archive](/newsletter).


<ul>
    <li><a href="/">index</a></li>
		<li>[./projects](/./projects/index.html)</li>
		<li>[./posts](/./posts/index.html)</li>
		<li>[./about](/./about/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>



Email

--------------------------------------------------


CC-By-Sa-NC JagIs

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'medium'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<ul>
    <li><a href="/">index</a></li>
		<li>[./projects](/./projects/index.html)</li>
		<li>[./posts](/./posts/index.html)</li>
		<li>[./about](/./about/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# A Tool in a World Full of Distractions
September 21th, 2024
by *Karina Chaires*

In today's distraction-filled environment, having effective tools at our disposal is essential for maintaining focus and productivity.

A few months ago, I realized that I was struggling to concentrate and finish simple tasks that took me longer than they should have, even though they weren't "complicated." I was also distracted by things around me, like simply unlocking my phone to do a bank transaction or something else I deemed "important", and suddenly, 15 minutes or more would pass without me accomplishing anything. In the worst cases, I would forget what I intended to do.

In search of a solution to this "problem" I came across the recommendation for the book **"Deep Work: Rules for Focused Success in a Distracted World"** by Cal Newport. This book emphasizes the importance of deep work — the ability to focus without distraction on cognitively demanding tasks. Newport argues that in a world full of distractions, cultivating deep work is essential for achieving high levels of productivity and professional success.

The book is divided into two main parts: the concept of deep work and strategies to cultivate it.

## The concept of DeepWork

In the first part, Newport defines deep work as a state of concentration that enables individuals to produce high-quality work and develop valuable skills. He contrasts this with shallow work, which consists of non-cognitively demanding tasks often performed while distracted. Newport suggests that the ability to engage in deep work is becoming increasingly rare yet is highly valuable in today's economy, where knowledge work is key.

## Strategies to cultivate it.

Newport supports his arguments with examples from successful individuals who practice deep work, including authors, scientists, and entrepreneurs. He illustrates how their focus and commitment to deep work have led to significant contributions and achievements.

The second part of the book offers practical strategies for cultivating deep work in daily life. Newport outlines four essential rules:

1. **Work Deeply**: He stresses the importance of rituals and routines to enhance focus, suggesting techniques such as time blocking, setting clear goals, and removing distractions. Newport advocates for creating an environment that supports deep work.

2. **Embrace Boredom**: Newport argues that one must learn to accept boredom and resist the temptation to switch to shallow tasks. He encourages practicing concentration and developing the ability to focus over time, which involves training the mind to remain engaged with challenging tasks.

3. **Quit Social Media**: Newport critically examines the role of social media and other distractions, recommending that individuals assess the tools they use and eliminate those that do not provide significant benefits to their professional and personal lives.

4. **Drain the Shallows**: He advises minimizing the time spent on shallow work by scheduling every minute of the day. This practice helps prioritize deep work and ensures that time is not wasted on low-value activities.

## In my personal experience

For me, the first strategy has been helpful, and I've implemented it by keeping my phone away for certain periods. I'm trying to create a schedule for each activity throughout the day, although I haven't fully succeeded yet. I will continue to improve my concentration practices because, ultimately, **"Deep Work"** serves as both a manifesto for focused success and a practical guide for cultivating concentration in a world full of distractions. Newport's insights resonate with anyone seeking to enhance productivity, achieve professional goals, and develop valuable skills in an era dominated by superficial engagement.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# How did I generate a QR so our clients could write a review 
September 30th, 2024
by *Pepe Hernandez*

###Portfolio ###Hacks ###ProgrammingAdventures

My wife asked me for a QR code so their clients could write a review in Google Maps. As you know, when a woman asks a man to do something, the man will do it; you don't have to remember the task every six months. As I know myself, I started as soon as possible, just before a kind reminder came to me.

## 1st iteration. Found the URL on Google Maps. Find a tool to generate the QR. Generate it.
The first thing I did was go to Google Maps and find the URL of the business. I had the input to generate the QR. Then, I asked chatGPT, "How can I create a QR?"
It gave me three options: download Code Monkey or use a QR code generator. I tried both. I downloaded the QR code generator, but there is no app for Code Monkey on my iPhone. The third option was to generate the code using some Python libraries. I had to generate only one, so I chose to go with the apps. 
I had to pay for the 14th-day package of the QR code generator. 
It was okay, but you have to scroll until the review section, which creates a little friction for the customer. I was not happy with it. 

## 2nd Iteration. How do you get a direct URL to publish the review?
I asked CHATGPT how to do this. It gave me two options: First, add the URL /review, which didn't work. 
The second option is generating the URL using the PLACE_ID with the next link:
https://search.google.com/local/writereview?placeid=PLACE_ID

Now I asked, "How do I get the PLACE_ID?" The direct place ID is a HEXADECIMAL number that you can extract from the sharing URL of the place. However, this doesn't work. 

It generates an error:
404. That's an error. The requested URL /local/writereview?placeid=0x8f56777791707875:0xf7ed452d4b2d8269 was not found on this server. That's all we know.

I asked CHATgpt about it. The reason is that the HEXADECIMAL format is incompatible with the suggested link to go directly to the review.
To get the right PLACE_ID, CHATgpt suggested going to the Google Developers site: https://developers.google.com/maps/documentation/places/web-service/place-id and looking for the PLACE.
I got the right PLACE_ID.
Here you can write your review:
https://search.google.com/local/writereview?placeid=ChIJM9B-Nap1Vo8R-decYH9-KV4

## Finally, I tuned the QR using the QR Generator
I used a template.
I selected a logo.
I shared the QR with my wife.

![Add your review! Quiriquiqui](QRQuiquiriqui.jpg)

And those who are married know, "Happy wife, happy life."

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>

 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Declarative dotfiles with Home Manager

October 5th, 2024
by *Julio César*

The UNIX philosophy is a set of cultural norms and a philosophical approach to
building minimalist and modular software, the main tenets can be summarized as
follows:

-   Write programs that do one thing and do it well.
-   Write programs to work together.
-   Write programs to handle text streams, because that is a universal interface.

While I am a big supporter of the idea, one consequence of this, is that in a
Linux system one often ends up installing lots of small utilities each one
defining its own configuration files. It is not uncommon to have lots of these
configuration files polluting the home directory, in an attempt to &ldquo;hide&rdquo;
these files their names usually start with a dot (`.`) meaning they are not
listed by programs such as `ls` or any other file browser for that matter, but,
they&rsquo;re still there creating a bigger configuration file collection over time,
these are commonly known as &ldquo;*dotfiles*&rdquo;.

These files end up being treated as code, as they define the state of the
system we use to do our work as software developers, it is not uncommon to
check these files into version control systems so that we&rsquo;re able to share the
same configuration across multiple machines with the added benefit that if we
ever change workstations it would be easier to port our tools over and get to
work right away.

However, managing this files as a software repository starts to become a
problem since we
now need to handle the installation of these files into their correct
locations, not all files need to be in the home directory and not every tool
supports the [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/latest/), more over tools which provide
lots of functionality might end up needed more than one file to configure it.
Symbolic links are often our first attempt to solve this problem but managing
lots of symlinks will sooner or later require some flaky custom scripts that
comes with its own set of problems.

As a neophyte Nix user I had to try Home Manager for solving exactly this
problem, and what a great solution!

Home manager allow us to follow the philosophy of NixOS to manage our dotfiles,
whereas NixOS allow us to configure an entire system state and system-level
properties declaratively using the Nix language, Home Manager allow us to
configure our user-level tooling declaratively using the Nix language.

Nix being nix, defines lots of possible ways to do the same thing, so I will
document bellow the way I&rsquo;m currently using it in combination of Nix Flakes,
a fancy name for &ldquo;*Nix distribution package*&rdquo;.

Within the root of the dotfiles repo define a `flake.nix` file with the
following:

    {
        # Adds a sample description as metadata for this flake
        description = "This Flake manages my dotfiles";
    
        # The "inputs" attribute is used to declare what other flakes this flake depends on
        # it is essentially our dependency list
        inputs = {
            # We can depend on other flakes that are hosted at github by their URL.
            #
            # Nixpkgs is a big set of packages that is almost always depended upon
            # as it contains Nix's standard library.
            #
            # It is possible to pin dependencies to a specific commit (revision)
            # for example in this case we pin to a commit on the nixos-24.05 branch
            # of the "NixOS/nixpkgs" reposityory. We can obtain these either by
            # looking in github directly or by browsing https://status.nixos.org/.
            nixpkgs.url =
              "github:NixOS/nixpkgs?rev=36bae45077667aff5720e5b3f1a5458f51cf0776";
    
            # The nixos-XX.YY branches contain stable packages known to work reliably,
            # however this means that software packaged in that branch might not be the
            # latest available, for that we can declare another version of nixpkgs but
            # picking a revision from the "nixpkgs-unstable" branch which typically
            # has the "latest" available version of most packages:
            unstable.url =
              "github:NixOS/nixpkgs?rev=5de1564aed415bf9d0f281461babc2d101dd49ff";
    
            # Home Manager is distributed as a flake itself, so we add it here as a
            # dependency to our flake, the revision comes from the "release-24.05" branch
            home-manager.url =
              "github:nix-community/home-manager?rev=e1391fb22e18a36f57e6999c7a9f966dc80ac073";
    
            # Since Home Manager is a flake itself written in Nix then it surely declares
            # nixpkgs as one of its dependencies, but since our flake already depends on
            # nixpkgs it would be a bit pointless to download it twice. In this case, we
            # can use "follows" to tell nix that when fetching nixpkgs for satisfying
            # home-manager dependencies it should use the same Nixpkgs version that our
            # flake depends on (that we named above as "nixpkgs").
            home-manager.inputs.nixpkgs.follows = "nixpkgs";
        };
    
        # The "outputs" attribute is a function that takes the "inputs" as parameter
        # (here we unpack it using destructuring) and returns an attribute set
        # (aka an object or dictionary) that defines certain attributes that follow
        # the flake schema.
        outputs = { nixpkgs, unstable, home-manager, ... }:
          let
            # nixpkgs packages software for different architectures in my case
            # I only care about x86_64-linux so I refer to that on its own as "pkgs".
            pkgs = nixpkgs.legacyPackages.x86_64-linux;
    
          in {
            # In this particular case "homeConfigurations" is not part of the official
            # flake schema but is an attribute understood by the home-manager CLI tool.
            #
            # Here we declare a home manager configuration named "demo".
            homeConfigurations.demo =
    
                # home-manager configurations are instantiated by calling the
                # "homeManagerConfiguration" function, giving it an attribute set
                # as its only argument:
                home-manager.lib.homeManagerConfiguration {
    
                  # The attribute set we give to the function expects a "pkgs" attribute
                  # to be defined, it must be a nixpkgs package set, in this case we use
                  # `inherit` as a shortcut for `pkgs = pkgs`.
                  inherit pkgs;
    
                  # Home manager - as well as NixOS - allow us to package our configuration
                  # in modules, at the beginning we might only have a single module but this
                  # can change later, perhaps having a module per application configuration.
                  modules = [
                    # We refer to the file containing our home configuration as a module
                    ./home.nix
                  ];
    
                  # Optionally we can set "extraSpecialArgs" to pass arguments to
                  # home.nix and whatever other modules we might have included in
                  # the "modules" list above
                  extraSpecialArgs = {
                    # As an example we pass the "unstable" version of nixpkgs so that
                    # we're able to use it within the home.nix module.
                    inherit upkgs;
                  };
                };
        }
    }

Now, we need to define the `home.nix` file that we included by path in the
`flake.nix` file:

    { pkgs, upkgs, ... }:
    
    {
      # We might include other modules if we want to organize our configuration in other files:
      imports = [
        ./other-module.nix
      ];
    
      home.username = "demo";
    
      # Install syncthing and enable a systemd service that keeps it running
      services.syncthing.enable = true;
    
      # We can define environment variables we might need
      home.sessionVariables = {
        EDITOR = "nvim";
        COLORTERM = "truecolor";
        TERM = "xterm-256color";
      };
    
      # We can install Emacs and with some extra packages for Emacs to use
      programs.emacs = {
        enable = true;
        extraPackages = epkgs: with epkgs; [ vterm ];
    
        # We can tell it to use "emacs" as it is from the unstable nixpkgs version "upkgs"
        package = upkgs.emacs;
      };
    
      # It is possible to say "put *this* file in *this* location"
      #
      # In this example we use it to "copy" a "ghci" configuration file into
      # our home directory as ".ghci".
      home.file.ghci = {
        enable = true;  # If this is `false` then the file is not copied
        source = ./.ghci;
        target = ".ghci";
      };
    
      # A partial example on how we can install and configure git:
      programs.git = {
        enable = true;
    
        # These are attributes that git expects in its `~/.config/git/config` file
        userName = "demo";
        userEmail = "user@demo.com";
    
        # We can alias commands, e.g. "git graph":
        aliases = {
          graph = "log --all --graph --decorate --oneline";
        };
      };
    
      # This value determines the Home Manager release that our
      # configuration is compatible with. This helps avoid breakage
      # when a new Home Manager release introduces backwards
      # incompatible changes.
      #
      # It is possible to update Home Manager without changing this value.
      #
      # Whenever we use flakes (as we are doing) this value isn't really used
      # because we specifically set the home-manager revision to use as a flake
      # input, however, still must be present in the home configuration so that
      # it does not throws an error about "missing attribute".
      home.stateVersion = "23.11";
    }

This is a bare example that shows how could we use Home Manager to configure
our user-level tools, we can see how not only we&rsquo;re able to install packages
such as Emacs or Git, but also add configuration to them. We can also manage
arbitrary files (`home.file`) and set environment variables (`home.sessionVariables`).

Note that environment variables are only able to get injected if Home manager
also configures our shell, this mentioned in the manual: [Why are the session
variables not set?](https://nix-community.github.io/home-manager/index.xhtml#_why_are_the_session_variables_not_set), in the example above we did not configure our shell so if
we wanted to see those variables we need to source a script home-manager
installs, but, adding our shell configuration to home-manager is trivial.

    # This might be the contents of other-module.nix, whatever floats your boat!
    { ... }:
    {
      # ...
      # Install and configure Zshell
      programs.zsh = {
        enable = true;
        autosuggestion.enable = true;
        enableCompletion = true;
        autocd = true;
        defaultKeymap = "emacs";
        dotDir = ".config/zsh"; # Where to place zsh config?
    
        # Define some shell aliases
        shellAliases = {
          cat = "bat -p";
          cd = "z";
          gs = "git status";
          l = "ls -alh";
          ll = "ls -l";
          ls = "ls --color=tty";
          lt = "ls -thalr";
        };
    
        # Use the popular Oh-My-Zsh distribution
        oh-my-zsh = {
          enable = true;
          plugins = [ "git" "direnv" "fzf" ];
          theme = "robbyrussell";
        };
      };
      # ...
    }

What options are available to set can be seen in the manual [Appendix A. Home
Manager Configuration Options](https://nix-community.github.io/home-manager/options.xhtml), but I also suggest using other resources such as [Home Manager Option Search](https://home-manager-options.extranix.com/).

Now its all fun and games till we want to apply our configuration,
the very first time you&rsquo;d want to run this:

    $ nix run home-manager/release-24.05 -- init --switch

That will activate a shell with home-manager available and enable your
configuration for the first time ever. After that whenever the configuration
is changed we need to execute `home-manager` to activate it:

    $ home-manager switch --flake .#demo

We use &ldquo;demo&rdquo; here because that&rsquo;s the name we gave to our home-manager
configuration within the `flake.nix` file.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Manage complexity behind simple interfaces

October 3rd, 2024
by *Julio César*

This is a follow up to the first post on [Understanding complexity in Software Systems](https://jagcoop.github.io/posts/Understanding_complexity_in_software_systems/) where we mentioned that a good software design is the one that reduces complexity of the system; complexity being anything that makes the system hard to understand and therefore modify.

In general, we can refer to the components of a system as &ldquo;*modules*&rdquo; and we can categorize them in mainly two groups, deep modules and shallow modules. The distinction comes mainly, from the size of the module interface and how well does it hide irrelevant details for most users of the module behind a properly designed interface. The reason on why this is of importance comes after the realization that complexity - while it can take many forms - the one area where it tends to creep-in is at the boundaries of modules, that is, at the interfaces. This is a key insight for software developers to grok - master the interfaces and keep complexity at bay.

To better understand what we mean by interfaces, recall that a software system is primarily an amalgamation of components, and for this to work every component in the system must expose some kind of interface, this is what tells users (and other modules) how are they supposed to use the &ldquo;thing&rdquo;, let it be a function, a method, a class, a package, a service, or a system on its own; all of these *objects* expose interfaces so that consumers know how to consume them.

Now, bringing it back to the categorization of modules, *deep modules* are the ones that hide a lot of complexity behind a simple interface so that users aren&rsquo;t bothered with understanding or even knowing about such complexities. A real-world example of a good deep module is the Linux I/O subsystem, there, users need only to know of about five system calls to do I/O interaction, mainly with files; programmers are often able to get away with just four of them, `open()`, `read()`, `write()` and `close()` (`lseek()` is the fifth one in case you were wondering). Behind these system calls there is a lot of complexity hidden that manages permissions, entries on a virtual file system, storage devices, memory mapping, and more, all of which is invisible to users.

In contrast to deep modules there are *shallow modules*, these are components of a system in which the interface leaks a lot of information about the implementation details of the thing, or worse, modules where the interface ends up being more verbose than the implementation of the module it self. Such small components shouldn&rsquo;t even exist, specially if used just in a couple of places through the codebase.

The information exposed by the interface of a module should be as small as posible without the need to make users understand the implementation of the module. This is the basis of the information hiding principle - an idea that has been preached before in other areas as well, &ldquo;the principle of the least information&rdquo;, &ldquo;don&rsquo;t make me think&rdquo;, etc.

In short, having simple interfaces is the secret sauce behind modular software, focus on defining small and simple interfaces and strive for deep modules that hide a lot of information users need not to care about; even better if we can still expose advanced functionality to power users through a different interface for those who need *more* out of the module, coming back to the  Linux I/O subsystem example - while rarely used - `lseek()` provides tighter control when reading files that some users might care about, specially the ones seeking to achieve higher performance or highly optimized programs.

In conclusion, by following these principles we will then make composition of modules on a system easier, just as we would like our jobs to be.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# A Tool in a World Full of Distractions
September 23th, 2024
by *Pepe Hernandez*

### Psychological Safety

**How to identify and develop high-performing teams? This article helps us create psychological safety faster, better, and more productively.**

#ThePerfectTeam #PsychologicalSafety #ShowVulnerability #SocialSensitivity #HighPerformingTeam

Rozovsky and her study group at Yale School of Management. Instead of being a support group, it was a source of stress. Everyone was fighting for power. Rozovsky decided to join another group. The new group aimed to analyze real business cases. They immediately clicked. In a competition, they were asked to replace a student-run café. In the end, they decided to create a mini gym with two stationary bikes and three treadmills. They won the competition.

How can two groups be so different—one with a stressful atmosphere, and another warm and fertile for generating ideas?

Traditional productivity studies focus on the individual. However, most work is done in teams. Even more so, in the last 50 years, human interaction has increased by over 50%, occupying 1/3 of work time.

In 2012, Google embarked on the Aristotle Project, studying hundreds of individuals. Rakovsky joined Google as part of the Aristotle Project. There were vastly different patterns in high-performing teams. After a year of analyzing 100 teams, they couldn’t find a clear solution. In the end, they tackled the problem by focusing on psychological safety.

What did they study?

What distinguished good teams was how members treated each other. They found two key characteristics:
- **“Equality in the distribution of speaking turns”**: As long as everyone has the opportunity to speak, it's fine. If one person dominates the conversation, collective intelligence drops.
- **“High social sensitivity”**, meaning members were good at sensing how others felt based on tone of voice, expressions, and other non-verbal cues.

**Tips**: Talk more about emotions and how we feel. Google also keeps statistics on this. Why not spend time with people who care about me?

In these teams, there is greater psychological safety: **“a sense of trust that the team won’t embarrass, reject, or punish anyone.”** Talk to your teammates about difficult or sad things. Speak about insecurities, fears, and aspirations in a more constructive way.

Sakaguchi, a former police officer and electronics salesman, was in charge of successfully coordinating a team of engineers at Google. However, when he switched teams, he didn’t achieve the same results. A satisfaction study revealed that many people were dissatisfied because there was no **TRANSPARENCY** regarding the contribution and role of team members. To break the ice, Sakaguchi revealed he had advanced-stage cancer. Everyone was shocked. How could Sakaguchi still be there in such a condition? It was because of the fulfillment of helping the team.

Today’s winners succeed because they have the clarity to discard yesterday’s conventional wisdom and seek the new and innovative...

**REFERENCES**:  
[https://www.nytimes.com/es/2016/03/16/espanol/la-busqueda-de-google-por-el-equipo-perfecto.html](https://www.nytimes.com/es/2016/03/16/espanol/la-busqueda-de-google-por-el-equipo-perfecto.html


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script><meta charset="utf-8" emacsmode="-*- markdown -*-">

# Requirements elicitation in the Age of AI 
October 4th, 2024
by *Karina Chaires*

One of the greatest challenges in software development has always been defining clear and precise requirements. It is essential to have a thorough understanding of what needs to be built before jumping into the coding process. According to Wiegers[Wiegers](https://en.wikipedia.org/wiki/Karl_Wiegers), a requirement is a specification that describes some functionality, attribute, or quality factor of a software system. It may also describe any constraints on how the system is built.

At first, defining requirements may seem like a simple task, but in reality, poorly defined requirements can lead to significant frustrations and setbacks in a project. There are many well-established methods and a wealth of literature on how to properly manage this process. Below, I'll highlight some of the key requirements that, in my opinion, you should consider.

### Key Requirement Types

**Business Requirements**: These outline the goals of an organization.  

**Business Rules**: Policies, guidelines, or regulations that define or restrict aspects of the business. While not software requirements themselves, they often give rise to various software requirements.  

**Constraints**: Limitations imposed on the options available to developers for designing and building a product.  

**Functional Requirements**: Descriptions of behaviors that a system will exhibit under specific conditions.  

**User Requirements**: Goals or tasks that specific user groups must be able to achieve with a system or desired product attributes.

### Deliverables and Artifacts in the Requirements Process

Once the different requirements have been identified, the next step is to produce a series of deliverables that serve as documentation throughout the project. Some common artifacts generated during the requirements process include:

**Artifacts produced during the requirements process**:

- **Business Requirements**  
 - Background  
 - Business Opportunity  

- **Scope and Limitations**  
 - A table outlining the project's scope and limitations  

- **Business Context**  
 - Customer profiles  
 - Customer priorities  
 - Business model diagram  

- **Design and Documentation**  
 - General system structure  
 - Prototypes  
 - Table detailing functional requirements and constraints  
 - Context diagram  
 - Container diagram  
 - Component diagram  


### Moving Towards the Future with AI

Defining requirements is a process that can be either highly abstract or extremely detailed, but the ultimate goal is to be clear about what needs to be done before executing it. In this new era, where artificial intelligence plays a significant role in all areas, it’s possible that AI will eventually solve this issue, eliminating the need to “read the minds” of stakeholders. That’s something we’ll find out in the future. In the meantime, we must continue applying best practices to develop software effectively.

However, until that time comes, it's important that we continue to apply established best practices in software development. Proper requirement management is crucial for building successful systems that meet both business needs and user expectations.


While tools and methodologies have evolved, the human element remains critical. Clear communication, regular feedback loops, and a deep understanding of business objectives ensure that requirements are not only defined but refined throughout the project's lifecycle. As AI tools begin to assist in automating aspects of requirement gathering, the role of developers and stakeholders will shift towards validating and contextualizing those requirements to ensure alignment with the project's goals. By blending human insight with emerging AI technologies, teams can create more efficient, accurate, and adaptable software solutions that better meet user and business needs.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# The Rise and Fall of Abacus Rationale
September 18th, 2024
by *Pepe Hernandez*

Abacus Rationale started small. It started from a software entrepreneurship effort in the eighties. A teacher developed a payroll system for their university, which was a success. He continued his career at the university as a teacher and obtained great credibility for his achievements, but he wanted to be an entrepreneur.

The entrepreneur wanted to create a company and was associated with a finance and accounting specialist, and both made the Abacus Rationale. Together, they envisioned the first company service:  Internet Subscription. They offered a product different from the one provided by the telecommunications monopoly in Mexico. The users started to grow and grow. A pair of years later, the service had 10,000 active accounts. As a small company trying to diversify its services, it sold equipment and repaired computers. That was before the big companies started to offer high-band internet services. When the Mexican telecommunications market opened to competence, there was both a there and an opportunity. New entrance companies began to buy small companies' user base. Abacus Rationale saw that as an opportunity and sold theirs to one of the big three internet providers. There were two options: trading and getting some money or slowly losing their user base. Abacus Rationale sold, and rethink the road ahead.

That was a good move. It allowed Abacus Rationale to make good money and specialize in selling equipment and IT infrastructure solutions to its main customer, the Local Government.

The company went from software development to subscription services and then to retail and IT solution provider in the middle of the 1990s.

## 1990s

During that period, Abacus Rationale hired several engineers and invested heavily in them. The company paid the engineers well, and they received annual bonuses. They also received a very flexible day job schedule. They could work anywhere. The entrepreneur adapted to new times.

The physical office was a house of three levels: the medium, the basement, and the upper. The rooms of the house were offices for the different teams: accounting, selling, engineering, and monitoring. They had a meeting room, a reception, and a hall with several desks. The Engineers guys were good at their craftmanship. They became better due to the policy established by the entrepreneur. They had the time to study all the equipment and simulations to learn how to configure the different appliances. The agreements with the big TelCo providers had the benefit of asking for new equipment and virtual training for "free." Engineers had at hand routers, phones, switches, virtual simulators, and several artifacts to make experiments. When the engineers were confident, they asked management for money to pay for a certification exam. The company didn't invest in training classes, workshops, or courses, but Abacus Rationale made a big difference—the company had more certifications than all the local companies. On average, every engineer had more than eight certificates.

The engineers' experience, validated by their official achievement certificates, was a strong differentiator when the government or other clients asked for service from local companies. The infrastructure solutions and the quality of their structured cable, fiber, routing, IP telephony, LAN configuration, and LAN security were of higher quality.

The entrepreneur was a native seller. He makes the right deals. The company always had Projects.

They also grew in personnel slowly. Just enough to continue their sustained growth.

## The 2000s

The oil bonus of 2000 provided many resources from the Mexican local government until 2010. The property allowed investment in the modernization of government services and facilities. From 2008 to 2010, a big budget was allocated to developing government facilities, infrastructure, and digital services. Abacus Rationale had the relational capital, the knowledge capital, and the financial support to take a good piece of cake. They made it.

Abacus Rationale was a certified partner of the Big Guys. Other companies with financial support and knowledge made their offers but didn't know the context very well. Abacus Rationale knew what government agencies needed. Abacus rationale knew the context well on their own and their insiders on the government.

Abacus had the muscle, experience, knowledge, backup, and relationships and had grown enough to be financially supported by the big telco communication equipment companies.

That was good and prosperous times.

Abacus Rationale has created many good relationships with its clients due to its professional services and frequently because of its patients. Sometimes, the government doesn't pay as fast as the contractors need.

## The 2010s

In 2010, things started to change. There was a change of administration. New times, in context, require different policies. The federal government began limiting equipment length and changing the contract services policy. Selling equipment was one of their primary sources of income. Instead of buying computers, leasing was an option for the government to have good computers.

But there were other opportunities to take advantage of. The federal and local governments continued believing in innovation and the digitalization of services. They also supported entrepreneurship and invested in people's digitalization culture.

Abacus Rationale had prestige and was open to new ideas.

Federal government funds were available for companies, organizations, academia, and governments to support innovations and entrepreneurship projects. That was the case for InnovaPYME and ProSoft (federal programs created with this aim).

Before 2010, other actors arrived: Research Centers, Top Public Universities, a young wave of technopolitics, and new small companies that wanted to make a dent in the local universe and take advantage of all the existing funds. Both the InnovaPYME and ProSoft programs motivated collaboration between Academia and Private Companies.

Abacus Rationale started collaborating with a research center specializing in software projects to create a spinoff in its successful IT service provider vein. In 2012, a small software company was made—in reality, it was a startup. The SW company was looking for a business model. The company was named Code Rationale, following its parent's Rational way of work.

The Research Center had grouped a very talented bunch of people, some coming from booming government pace, others from industry, and persistent entrepreneurs with previous startup adventures scars.

Abacus Rationale, in collaboration with the Research Center, created Code Rationale. The Research Center used all its expertise to hire and train the development team, which a proficient Architect and Developer led. The team developed transactional software using the best open-source tools, frameworks, and base language. They had a year to create four prototypes, and they did it—even though they were looking for a business model.

After the first year, Abacus Rationale found a promising bet: Business Process Digitization Services. One year after the company's creation, Code Rationale started to offer another digitization service and a software house for transactional government systems. They also received funds from InnovaPYME and created both software and hardware to specialize in document digitization.

At the same time, there were software development projects with other government organizations. Code Rational's team had to grow. They started with less than ten people. In three years, the developers' team was threepled.

Meanwhile, the projects for Abacus Rationale started to slow down. Cloud Web Services were a precarious competence, but a real one, for physical sites. The government doesn't use Cloud Web Services at all today, but some of the big entities do.

The local government promoted an Innovation Park where all innovative companies could create research centers. The Federal Government wants all Mexican states to have their innovation parks. The Local Government invited Innovative companies to join the effort. It was challenging to say no. The government was still the primary customer of Abacus Rationale. It was like a Trojan Horse. It was like a poisoned apple.

Abacus Rationale compromised its future to build the headquarters of its dreams. They did it; it was a big bet. The luxury building could be the company's presentation card.

Then, the country's economic context changed dramatically. Local states started to need more resources. That was 2018. The New Federal Administration erased innovation funding programs and other funds for specific purposes; the Federal Government erased municipal development funds, mining funds, and disaster funds. All were concentrated at the federal government level to invest in social programs for younger and third-age people. What innovation companies did some companies take advantage of to grow and disappear in just one year?

Then, the COVID-19 pandemic hit the world and the economy.

## The 2020s

In 2021, there was a radical change in the Local Government from a different party.

Abacus Rationale started to starving. No projects, no money. Depending mostly on one client made Abacus Rationale fragile. The little brother of Abacus was an instrument for selling.

From 2012 to 2018, Code Rationale was Net Profitable. But the pressure was too high. Code Rationale received the work and the problems, but it didn't receive the benefits of the Abacus projects obtained thanks to the Code Rationale sacrifice.

In 2018, Code Rationale gave up.

When Toyota faced the challenge of the global crisis in 2008 and then the recall crisis in 2010, it was prepared. It had a global market, the TPS, the culture, the people, and leadership. It took advantage and refocused on quality again. Abacus Rationale could have had the same opportunity.

When 3M faced a mining crisis, it gave the employees time to look for new ways to make money. That allowed the creation of different projects, among them the Post-it. Abacus Rationale could have the time.

But Abucus Rational had no money.

## Lack of money = lack of time

They needed money but a new luxury headquarters in the Innovation Park.

After investing in the new headquarters building, all the money was used to pay, so the annual bonus disappeared completely. That started in 2018.

The company, which had evolved resiliently from software to a subscription service, IT infrastructure solutions, and business process outsourcing, lost its direction.

Entrepreneurs thought that a building could be the prestige they needed to go further.

Without new projects, an important part of the personnel payroll disappeared. The personnel had to look for new projects. The few projects were assigned to other providers. Each new Government administration has its preferences, under the legal boundaries. That was the case.

The engineers left the ship one by one until the last proficient engineer left the dream.

The entrepreneurs who invest "a lot" of money in the certifications ask them to stay—to hold on. But more mature people need money to cover their normal expenses (household, food, tuition, etc.). They look for new jobs, and they find them.

All the certified engineers now work for more prominent companies. Their experience, knowledge, and certificates went with them in their hearts, brains, and bodies.

The entrepreneur, his finance associate, and a pair of clerical people stay in the company, and they rent offices in the building they thought would once be the leverage point for the company's growth.

## What might have been?

What could have happened if the entrepreneur hadn't invested in the building and could have done what Toyota or 3M did to overcome the difficult times? As Eliyahu Goldratt, the creator of the Theory of Constraints, said: You have to take advantage of any crisis. Why did they not make a decision that made them a little bit antifragile or at least gave them more options for the future? We'll never know. The "would" does not exist.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
 <meta charset="utf-8" emacsmode="-*- markdown -*-">
# Understanding complexity in software systems

September 23th, 2024
by *Julio César*

> Controlling complexity is the essence of computer programming.
> 
> — Brian Kernighan

Recently I&rsquo;ve been enjoying reading &ldquo;A philosophy of software design&rdquo; by John
Ousterhout, the main focus of the book is to learn techniques to reduce
complexity in a software system and use that to drive our design decisions.
Before diving into how to reduce software complexity we might ask, what is
complexity?

Complexity in software is a term that has been explored a lot, I would think
that since we as a society started to depend on software systems to replace
processes that didn&rsquo;t need computers before, we started to observe a toxic pattern
emerging on our code bases.

Software systems never seem to be complete - they seem to always require
changes to be made - so systems have a need to be maintained. However, over
time, the system starts to rot, modifications become harder and harder to
make, this is the main indication of having a complex system in sight. Fred
Brooks wrote something on complexity in his famous book &ldquo;The Mythical
Man-Month: Essays on Software Engineering&rdquo; - from his perspective, there are
two kind of complexities, first, *essential complexity* - the kind of complexity
that exists just because the domain a software models maps to is inherently
complex. The second type of complexity Brooks writes about is *accidental
complexity* which is more in line with the notion of complexity that Ousterhout
documents in his book.

Accidental complexity is what remains when we take essential complexity out of
the picture, it is often the result of lack of skills, bad habits software
developers adopt, or frequently, simply due to an incomplete understanding of
the domain and the problem we are trying to solve. Under Ousterhout&rsquo;s
framework complexity is anything that inhibits change on a software system and
is primarily a consequence of bad software design decisions (be it small or
big) made one after another during a continuously prolonged amount of time. It
is hinted that software complexity is something that can&rsquo;t just be avoided at
all and will always exist but there are practices that help software
developers to manage it.

According to Ousterhout it is paramount to train ourselves to identify
complexity, we cannot start to manage it if we cannot see it in the first
place! In the book we&rsquo;re taught that one way to see complexity is to identify
where in the system we&rsquo;re spending the most time working on, typically, the
more time necessary to change a certain component of a system will hint that
the component is harder to change and therefore complex.

One might also think that beyond time - size of a component is also a good
indicator for presence of complexity in a system, yet this is not true, big
systems aren&rsquo;t necessarily complex, if they are easy to work with then they
remain simple. On the contrary, there could be pieces of code or even a single
instruction that on its own is very hard to understand and change, what is
worse is that in some cases doing the change might impact other parts of the
system unexpectedly, so beware! complexity can hide even behind a single line
of code.

Ousterhout mentions three signs that alert the presence of complexity in a
code-base.

1.  Change amplification
2.  Cognitive load
3.  Unknown unknowns

In the first case, whenever the implementation of even the simplest feature needs
a lot of changes in lots of places of the system it is said we&rsquo;re
suffering of *change amplification* and it is a major *major* sign of accidental
complexity on a software system.

On the second case, whenever the developers need deep understanding of a lot
of context in the code-base to carry out a simple change then *cognitive load*
exists. It follows then that lines of code do not translate to code
complexity, it may be the case that simple changes require lots of lines of
code - or, on the contrary, a complex change could end up being just a single
line change. Cognitive load refers about the context the developer needs to
understand in order to make changes to the system, the bigger that context is
the more complex the system is considered to be.

The third case, &ldquo;Unknown unknowns&rdquo; is a sign of complexity where a developer
doesn&rsquo;t know what or where a change is required to implement a certain
feature; often developers follow a hunch on what needs to be modified to get
the job done, they try out the new feature thinking all is done but then as
soon as it is tested the behaviour reveals the change is incomplete, there&rsquo;s
something the developer didn&rsquo;t anticipate and doesn&rsquo;t understand why the
change they made wasn&rsquo;t sufficient - &ldquo;Why it isn&rsquo;t working yet if I have just
changed this part here?&rdquo;, that&rsquo;s an unknown unknown.

From all the signs of complexity in a software system, having unknown unknowns
is the worst, it reveals deep problems in the design of the system as it is
non-obvious what its structure is and there&rsquo;s no clear path to evolve it in a
sane way.

All in all, these are just signs that we have a complex system in our hands,
but it doesn&rsquo;t give indication of where that complexity is coming from or how
we can tackle it. Ousterhout suggests that complexity is mainly introduced by
*dependencies* and *obscurities* in a software system.

Dependencies exist whenever
the code can&rsquo;t be understood in isolation, or, when changes in a part of the system
also require separate components to be updated, there we have a
dependency.

Obscurity is another form of dependency, but is a non-obvious one, or rather
an indirect dependency where there&rsquo;s nothing in the code that relates two
areas of the code-base that in reality are coupled to each other. Obscurity,
also happens when a variable or symbol refers to two separate concepts, in
this case, there&rsquo;s a dependency but it isn&rsquo;t clear what that dependency
entails or what is affected by changing it. A simple example may be a numeric
variable whose type (or name) does not hint about the &ldquo;units&rdquo; of the value
stored in that variable, e.g. 42 centigrade isn&rsquo;t the same as to 42 minutes. Also,
whenever we need extensive documentation on a component, whether in the code
or outside of it, we can take this as a clear indication that we have
obscurity in the code, or else, what&rsquo;s the need to explain it so thoroughly?

This is a good point to stop our exploration on software complexity, and as
we&rsquo;ve seen complexity is a key aspect to account for if we want to end up with
simpler and maintainable systems; if we can find ways or design techniques
that minimize dependencies and obscurity in our code-base then we&rsquo;ll be able
to reduce the complexity of the system as a whole. In a future post we&rsquo;ll
understand more about both of these aspects of software, and in doing so we&rsquo;ll
be able to come up with good software design decisions that over time will
help us rather than fight against us.


<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

# Unlocking the Power of Personal Cloud
September 24th, 2024
by *Agus Rumayor*

Rent vs Buy is a well-known dilemma, and we have plenty of tools and calculators to help us decide one of the biggest financial questions in life. From comparing the cost of buying versus renting to weighing opportunity costs like capital gains versus investment profits, there's one clear spoiler: if you plan to stay in one place for more than 10 years, it’s generally better to buy.

For data engineers, we face a similar dilemma: should we "rent" cloud services or "buy" our own? From a financial perspective, the conclusion is pretty much the same. If you plan to manage your data or services in the long run, it’s worth considering "buying" your own cloud.

That’s where the personal cloud comes into play, a solution that offers not just storage, but also long-term control, security, and savings in your data services. Rather than renting space on third-party servers, a personal cloud involves hardware you control. Setting up a personal cloud isn’t as simple as signing up for a public cloud service. It requires a bit more technical know-how and upfront planning. However, for individuals or small businesses that need large amounts of storage, prioritize data privacy, or want to avoid recurring costs, personal cloud storage could be the perfect long-term solution.

## What is needed?

A personal cloud should be tailored to meet your unique needs. From a developer or techie perspective, we aren't just talking about storing typical personal data like photos and documents. We need a robust environment that allows us to experiment, test, and host applications. Think of it as your personal sandbox, an all-in-one space for cloud data storage, cloud computing, hosting files and apps, and security tools to manage all these services.

Let's start with essential services:

************************************************************************
*                                                                      *
*               │                                                      *
*               │                                                      *
*  ┌────────────▼──────────────────┐                                   *
*  │                               │                                   *
*  │         Router                │                                   *
*  │                               │                                   *
*  │                               │                                   *
*  └────────────┬──────────────────┘                                   *
*               │                                                      *
*  ┌────────────▼──────────────────┐   ┌──────────────────────────┐    *
*  │                               │   │                          │    *
*  │  Reverse Proxy / Firewall     │   │    Access proxy          │    *
*  │                              ─┼───┼►                         │    *
*  │ Reverse proxy and firewall    │   │ Proxy to auth users and  │    *
*  │ rules to access all internal  │   │     proxy services       │    *
*  │           services           ─┼───┼─┐                        │    *
*  └──────────────┬────────────────┘   └─┼──────────┬─────────────┘    *
*                 │                      │          │                  *
*  ┌──────────────┼──────────────────┐  ┌┼──────────▼──────────────┐   *
*  │              ▼                  │  ││                         │   *
*  │                                 │  │▼ K8s and docker services │   *
*  │     NAS Private services        │  │                          │   *
*  │                                 │  │  Services allocated in   │   *
*  │  All the services we don't want │  │  private servers         │   *
*  │    to expose                    │  │                          │   *
*  │                                 │  │                          │   *
*  └─────────────────────────────────┘  └──────────────────────────┘   *
*                                                                      *
************************************************************************

### The Key Components
* **Router**

Acts as the entry point for all external traffic coming into the network. The router handles the distribution of incoming requests to the reverse proxy.

* **Reverse Proxy & Firewall**

The reverse proxy is a key component in securing the internal services. It handles external requests and forwards them to either public-facing services or routes them to an Access Proxy for authorization before exposing internal services. The firewall is configured to allow traffic based on specific rules, ensuring that only authorized traffic passes through to the services.

* **Access Proxy**

The access proxy manages Single Sign-On (SSO) and enforces authentication before allowing users to access private resources. When a request is made to a subdomain like private.example.com, the reverse proxy routes it to the access proxy, which authenticates the user and determines access rights.

* **NAS Private Services**

For all data and services that doesn’t need to be publicly exposed, the NAS (Network-Attached Storage) solution serves as a secure, private repository. This is where you store personal data like photos, documents, and any files that don’t require external exposure. Popular NAS devices offer a powerful combination of storage, security, and backup solutions.

* **Kubernetes and Docker Services**

These services power cloud computing and application hosting. K3s, a lightweight Kubernetes distribution, provides orchestration for containerized applications, allowing for easy scalability and management of services like blogs, development environments, or experimental code bases.
Portainer simplifies the management of these containers, providing an easy-to-use GUI for container orchestration, while Coder offers an IDE and development environment in the cloud for collaborative or remote projects.

## Architecture in Action

Let’s break down a real-world scenario to illustrate how this architecture functions.

Public Requests (e.g., public.example.com): When someone accesses a public-facing service like your personal blog, the request hits the reverse proxy, which redirects the traffic to the appropriate internal service (e.g., a Docker container hosting your blog).

Private Requests (e.g., private.example.com): For private services like a personal dashboard or sensitive data, the request is handled differently. The reverse proxy directs the traffic to the access proxy, which requires the user to authenticate via SSO before allowing access. If authenticated, the proxy routes the user to the service behind the firewall.

## Technologies Behind the Setup

Here's a quick summary of the technologies that power each part of my personal cloud:

***********************************************************
*                                                         *
*    ┌──────────────────────┬────────────────────────┐    *
*    │                      │                        │    *
*    │Service               │   Technology           │    *
*    ├──────────────────────┼────────────────────────┤    *
*    │                      │                        │    *
*    │Reverse Proxy         │   Nginx Reverse Proxy  │    *
*    │                      │                        │    *
*    │Access Proxy          │   Teleport             │    *
*    │                      │                        │    *
*    │NAS Private Services  │   QTS (QNAP)           │    *
*    │                      │                        │    *
*    │K8s Docker Services   │   K3s                  │    *
*    │                      │   Portainer            │    *
*    │                      │   Coder                │    *
*    │                      │                        │    *
*    └──────────────────────┴────────────────────────┘    *
*                                                         *
*                                                         *
*                                                         *
***********************************************************

## Why This Setup?

1. **Security**: By using a reverse proxy and access proxy combination, this setup ensures that only authorized users access private resources, while public resources remain easily accessible.
2. **Scalability**: With Kubernetes (K3s) and Docker, you have the flexibility to scale your cloud services quickly as needed.
3. **Cost-Effective**: Thanks to modern tools and open source projects solution offers high performance at a lower cost than traditional enterprise solutions.

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">
<meta name="author" content="Alejandro Garcia">
<meta name="description" content="Is there a silver bullet to solve any and all problems?"
<meta name="keywords" content="triz, toc, ibis, problem_solving">
<meta name="robots" content="index, follow">
<meta name="language" content="English">

<!-- Open Graph meta tags for better social media sharing -->
<meta property="og:title" content="How to define problems">
<meta property="og:description" content="Is there a silver bullet to solve any and all problems?">
<meta property="og:image" content="https://example.com/image.jpg">
<meta property="og:url" content="https://example.com/page-url">

                            **How to define problems**

We all have problems; they are everywhere and at every time.
So, how could we better solve problems?
Is there a silver bullet to solve any and all problems?

I think there is.



# Introduction
==============================================================================

Turns out that we know how to solve all the problems better:

> To ask the right question is already half the solution to a problem.
> Carl Jung.

So that's it!
To become better problem solvers, we need to ask better questions!

> How can we ask better questions?

In this article, we are going to explore three methodologies focused on how to ask better questions:

- IBIs Issue-Based Information System
- Theory of Constraints Thinking Process, in particular, The Current Reality Tree and the Cloud.
- TRIZ for going over contradictions


# Thinking methods

## Issue-Based Information System (IBIS)

The first methodology to ask better questions is IBIS.
In IBIs, they ask better questions by refusing to deal with a problem unless it's asked as a question.


For example, A person might say:

> I'm unhappy with my work.

According to IBIs, that is not a problem. A problem must be written in the form of a question:

> How can I be happy with my work?

or

> Why am I unhappy with my work?

or

> What makes me happy

In either case, each question is actually a problem, and we can actually propose Ideas to solve them:

### For example

``` mermaid
mindmap
	? How can I be happy at my work?
		* Ask for a rise
		* Transfer departements
		* Do the same work at a different company
	   ? What makes you happy?
		   * The outdoors
		   * Physical activity
		   * have a positive impact on society
		   * Money
```


In IBIs, there are rules on what we can write:

In IBIS, every problem is redacted as a question.
Then, below every question can only be an idea for a solution.
Or another question.
As a child to an Idea, there can only be Pros, Cons or other questions.
A Pro Con can only have as children another question.

### For example

``` mermaid
mindmap
	? what should we do about the one ring?
		* Give it to Frodo
			+ He has been carrying it already
			+ He doesn't have delusions of power
			- He is weak
			- He might fall pray to the ring as Gollum did
		* Give it to Gollum
			+ He has taken care of it for over 150 years
			+ He is invisible
		* Give it to humans
			+ Use the enemy weapon against him
			- The greed of man has failed us once before.

```


As you can see the mere constraint of having to write a problem as a question, already makes it easier to try to write options of a solution or a clarifying questions.

This is already more conducive to solving problems than just complaining.


But, sometimes we just know that we don't like the current situation, i.e. we can only complain! And express our dissatisfaction.

In that case, we can use the Current Reality Tree of the Theory of Constraints.
To bring to the surface the root problem.

## Theory of Constraints.

Ok, but how can we find the conflict?


The Current Reality Tree is TOCs method to voice the dissatisfaction that the different people have with the current situation.
Once everyone has voiced their concerns,
We can start to build cause-and-effect relationships between the concerns.
Then, one must appear as the root cause.
This root cause will frequently appear as the beginning and end of a feedback loop. (i.e., a Death spiral)

Once we find the root cause, we can write it as a conflict.
Then, we use the Cloud to try to solve it.


### The Cloud

In the theory of constraints, the tool to define a problem is called a Conflict Resolution Diagram.
But the nickname is the Cloud because once problems are properly defined, they evaporate.

In the Cloud, we start from the conflict.
I.e., Alice wants one thing, and Bob wants another.
And they simply cannot seem to be able to reach an agreement.

The next step in the Cloud is to understand the needs.

What does Alice *need* that is satisfied by her *want*
and what are Bob's *needs* that are satisfied by his *wants*

Then, we can identify the common goal. Both their needs want to be satisfied.

``` asciiflow

********************************************************
*                  ┌──────────┐        ┌─────────┐     *
*           ┌──────┼ Alice's  ◄────────┼Alice's  │     *
*           │      │ Needs    │        │Wants    │     *
*           │      └──────────┘        └─────┬───┘     *
*      ┌────▼─┐                              │         *
*      │Common│                        ┌─────▼────┐    *
*      │Goal▲ │                        │Conflict  │    *
*      └────┼─┘                        └─────▲────┘    *
*           │                                │         *
*           │                                │         *
*           │      ┌──────────┐        ┌─────┼───┐     *
*           │      │Bob's     │        │Bob's    │     *
*           └──────┼Needs    ◄┼────────┼─ants    │     *
*                  └──────────┘        └─────────┘     *
********************************************************

```

 Now, the Cloud is a super optimistic method of thinking with the following principles:

1. there is always a common goal.
 For example, if I want to go on holiday to the mountains and my wife wants to go to the beach.
 We could go our separate ways, and there wouldn't be any conflict.
 But we have the Common Goal of *spending time together*
 So we must find a *solution* that allows us to get what we need and spend time together.

 2. Only our *wants* our desires are in conflict. Never the needs.
 Again, everyone's needs are prerequisites to reach the common goal.
 So, in the Needs, there are no conflicts; they are prerequisites
 that a good solution must satisfy.

So, how do we solve a problem?

In the theory of constraints, the solution is to first:
Verify the Arrows.
I.e., the assumptions that create the relationships between concepts.
Sometimes, one of the arrows is not valid.
And we can move on.

However, more often than not, the arrows are valid.
And we must approach the conflict head-on.

In that case, we could use TRIZ to solve the conflict!!

## TRIZ

TRIZ is a Russian acronym that roughly translates to Theory of Inventive Problem Solving.
Legend has it that Genrich Artshulller studied 10,000 Russian patients.
Trying to extract the general principles that solve problems.

This led to the enunciation of the 40 principles of TRIZ
![Triz matrix](https://en.wikipedia.org/wiki/TRIZ#/media/File:40_principles_of_TRIZ_method_720dpi.jpg)

But before we can apply the 40 principles of innovation.
We must enunciate the problem as a contradiction.
A contraction is the idea of improving the solution in one dimension and making it worse in another.
But Both are needed!
The contradiction is the problem.

### Classic examples

#### Armor vs Agility::
  Ever since the knights mounted a Horse, they knew that heavier armor would protect them better.
  But making it heavier also makes the horses go slower and get tired faster.
  So this is a contradiction: we want speed but lightness.

  This problem is observed even today with Tanks and Jeeps.

  So, what solutions have been proposed to resolve this contradiction?

  For example, some thanks have "explosive" armor. That basically explode when a projectile is approaching the tank. The explosion is the protection, not the armor.

#### Area vs. Resistance

  In a boat deck we would like to have as much area as possible, to accomadate cargo, or even land a helicopter.
  But the wider we make a boat, the more friction that it will generate, and the more fuel that will be needed

  How can we have a boat that is wide above the surface but slim below it? With a catamaran.

So, that is how Triz approaches the definition of a problem. Just find the contradiction.
I.e., the attributes that you want and ask the question in terms of the contradiction.

# Leassons Learned

So, what have we learned?

In order to better solve problems, we need to:

- Ask better questions

To ask better questions, we need to:

a) Write problems and questions and

b) Find a contradiction

A contradiction is:

- When we *need* two properties at the same time, but improving one makes the other worse.

How can we find the contradiction?

- The TOC Current Reality Tree is a useful way to find the contradiction.

How can we solve the contradiction once it is found?

- With IBIS 40 principles.


<link rel="stylesheet" href="https://unpkg.com/latex.css/style.min.css" />
<style>
body.md{
	max-width:120ch; !important
}
</style>
<!-- Markdeep: --><style class="fallback">body{visibility:hidden}</style>
<script src="https://morgan3d.github.io/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/newsmag.css?">
    <!-- Author meta tag -->
    <meta name="author" content="Your Name">

    <!-- Description meta tag -->
    <meta name="description" content="newsmag description"

    <!-- Keywords meta tag -->
    <meta name="keywords" content="keyword1, keyword2, keyword3, keyword4, keyword5">

    <!-- Other common meta tags you might want to include -->
    <meta name="robots" content="index, follow">
    <meta name="language" content="English">

    <!-- Open Graph meta tags for better social media sharing -->
    <meta property="og:title" content="Your Page Title">
    <meta property="og:description" content="A brief description for social media sharing">
    <meta property="og:image" content="https://example.com/image.jpg">
    <meta property="og:url" content="https://example.com/page-url">

	<script src="https://morgan3d.github.io/include.js/include.min.js"></script>



                          **Jag.is**
	Cooperative Innovation Studio specialized in software development, devops and project management.
	We are on this for the long term with our members, our software and our customers.

We are a software development and Innovation Studio.
Specialized in high quality, long term maintenance of software products.

(insert /nav.html here)

An independent research lab exploring the future of tools for thought.
================================================================

We envision a new computer that amplifies human intelligence. A system
that helps you think more clearly, collaborate more effectively, and is
available anywhere and anytime. Though the specifics of our work
continue to evolve, everything we do is in pursuit of this vision.

Research Tracks
---------------------------------------------------------------

Our research spans a wide variety of domains from theoretical computer
science to practical user experiences. We currently have three primary
research themes.

### Malleable Software

Designing software environments where people can customize tools in the
moment to meet their unique needs.

### Programmable Ink

Discovering a dynamic medium for sketching ideas where adding behaviors
and interaction is as natural as applying ink to paper.

### [Local-First](/local-first)

Exploring software architecture that returns data to users and enables
collaboration in every tool.


Our Writing
==============================================================

This are the innovations that have been ocupaying our minds lately


### [2024-10-05: posts/how_to_define_a_problem](./posts/how_to_define_a_problem).
[lab notes ongaing](./posts/how_to_define_a_problem)


### [2024-10-05: posts/Unlocking_the_Power_of_Personal_Cloud](./posts/Unlocking_the_Power_of_Personal_Cloud).
[lab notes ongaing](./posts/Unlocking_the_Power_of_Personal_Cloud)


### [2024-10-05: posts/Understanding_complexity_in_software_systems](./posts/Understanding_complexity_in_software_systems).
[lab notes ongaing](./posts/Understanding_complexity_in_software_systems)


### [2024-10-05: posts/The_Rise_and_Fall_of_Abacus_Rationale](./posts/The_Rise_and_Fall_of_Abacus_Rationale).
[lab notes ongaing](./posts/The_Rise_and_Fall_of_Abacus_Rationale)


### [2024-10-05: posts/Requirements_in_the_Age_of_AI](./posts/Requirements_in_the_Age_of_AI).
[lab notes ongaing](./posts/Requirements_in_the_Age_of_AI)


### [2024-10-05: posts/Psychological_Safety](./posts/Psychological_Safety).
[lab notes ongaing](./posts/Psychological_Safety)


### [2024-10-05: posts/Manage_complexity_behind_simple_interfaces](./posts/Manage_complexity_behind_simple_interfaces).
[lab notes ongaing](./posts/Manage_complexity_behind_simple_interfaces)


### [2024-10-05: posts/Declarative_dotfiles_with_Home_Manager](./posts/Declarative_dotfiles_with_Home_Manager).
[lab notes ongaing](./posts/Declarative_dotfiles_with_Home_Manager)


### [2024-10-05: posts/Creating_a_QR_for_Google_review_URL](./posts/Creating_a_QR_for_Google_review_URL).
[lab notes ongaing](./posts/Creating_a_QR_for_Google_review_URL)


### [2024-10-05: posts/A_Tool_in_a_World_Full_of_Distractions](./posts/A_Tool_in_a_World_Full_of_Distractions).
[lab notes ongaing](./posts/A_Tool_in_a_World_Full_of_Distractions)


--------------------------------------------------

#### Connect with us

Say <hello@jag.is>

Code on [Github](https://github.com/jagcoop)

#### Our news letter

Keep up-to-date with the lab's latest findings, appearances, and
happenings by subscribing to our newsletter. For a sneak peek, [browse
the archive](/newsletter).

Email

<ul>
    <li><a href="/">index</a></li>
		<li>[posts/how_to_define_a_problem](/posts/how_to_define_a_problem/index.html)</li>
		<li>[posts/Unlocking_the_Power_of_Personal_Cloud](/posts/Unlocking_the_Power_of_Personal_Cloud/index.html)</li>
		<li>[posts/Understanding_complexity_in_software_systems](/posts/Understanding_complexity_in_software_systems/index.html)</li>
		<li>[posts/The_Rise_and_Fall_of_Abacus_Rationale](/posts/The_Rise_and_Fall_of_Abacus_Rationale/index.html)</li>
		<li>[posts/Requirements_in_the_Age_of_AI](/posts/Requirements_in_the_Age_of_AI/index.html)</li>
		<li>[posts/Psychological_Safety](/posts/Psychological_Safety/index.html)</li>
		<li>[posts/Manage_complexity_behind_simple_interfaces](/posts/Manage_complexity_behind_simple_interfaces/index.html)</li>
		<li>[posts/Declarative_dotfiles_with_Home_Manager](/posts/Declarative_dotfiles_with_Home_Manager/index.html)</li>
		<li>[posts/Creating_a_QR_for_Google_review_URL](/posts/Creating_a_QR_for_Google_review_URL/index.html)</li>
		<li>[posts/A_Tool_in_a_World_Full_of_Distractions](/posts/A_Tool_in_a_World_Full_of_Distractions/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>

--------------------------------------------------

CC-By-Sa-NC JagIs

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'medium'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-">

<meta name="author" content="Alejandro Garcia Fernandez">
<meta name="description" content="Implementing the Architecture Oriented Programming of Objective.st in Eiffel">
<meta name="keywords" content="Eiffel, Objective Smalltalk, Design Patterns">
<meta name="robots" content="index, follow">
<meta name="language" content="English">


                  **Architecture-Oriented Programming in Eiffel**
	Applying systems architecture (i.e. between servers) at level of programs (i.e. between functions)


A Conjecture
===============================================================================

Architecture Oriented Programming (AOP) is a programming paradigm that increases reusability and modularity of Object Oriented Languages.
By identifying patterns found at the *architecture level* of *systems* and shrinking them at the *code level* of *programs*.
The advanced features of Eiffel, such as Genericity, Aliasing, and Design by Contract, make it an ideal environment to implement AOP.
And it would result in smaller code with more reusability in Eiffel programs.

Background
================================================================================

Architecture Oriented Programming (AOP) is the name given by Weiher and Hirschfeld to their ideas in developing the Objective Smalltalk language.
The main idea is delightfully simple:

>  What if we took inspiration from the architecture of big systems,
>    and shrink the techniques to organize a single program.

(Weiher, 2020 a)  identified the first patterns and also made a summary in the YouTube presentation: "Can programmers escape the gentle tyranny of call return" (Weiher, 2020 b)
Also, each pattern was published independently. As is shown in table [Summary]:

| Inspired by                      | AOP Proposes                          | One Sentence Summary                                                                                                                                                                                 | Examples                                                                                                                                                     | Reference                                                                                                     |
|----------------------------------|---------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
| Internet URLs and URIs           | Polymorphic identifiers               | If every resource on your program: variables, objects, files, APIs had a local URI that you can use to communicate with it.                                                                          | var:person/name var:person/{attribute},     file://tmp/button.png ,    http://www.example.com/button.png, file:{env:HOME}/rfcs/{rfcName}                     | Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. |
| Internet Protocols FTP, WWW, IRC | Schemes                               | The same way that a URI like ftp://myDir/myImage.jpg has a different behavior, than www://myDy/myImage.jpg. Schemes change the behavior that Polymorphic URI will have                               |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. |
| Spreadsheet formulas             | References                            | The same way that changing a value in a cell in a spreadsheet automatically recalculates the derived values. Reference values will automatically update the derived values in a uniform identifier. |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. |
| Unix pipes and filters           | Polymorphic write streams             | What if unix pipes, instead of sending a chain of text to the next process, threw a nested object structure                                                                                           |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2019). Standard object out: streaming objects with polymorphic write streams.   |
| Rest and stackable filesystems   | Storage combinators                   | With limited API verbs (like REST) you can create components that can compose, web servers combined with cache servers and load balancers.                                                           | A composition serving the files in $HOME/Sites, cached by memory. server := ref:file:{env:HOME} -> CachingStore -> SchemeHTTPServer port:8080. server start. | Weiher, M., & Hirschfeld, R. (2019). Storage combinators.                                                     |
| Constraint programming           | Constraints as polymorphic connectors | What if the assignment operation had more meaning, such as keeping the values unidirectionally updated or synchronized?                                                                              |                                                                                                                                                              | Weiher, M., & Hirschfeld, R. (2016). Constraints as polymorphic connectors.                                   |
[Table [Summary]: Summary of AOP Patterns and their publication]

Uncertainties (Known-Unknowns)
================================================================================

In his conference, Marcel P. Weiher says that the comments for Unicon made it decide to create a new language (Objective Smalltalk) instead of a library for an existing language.
And on this project, I'm doing exactly that: creating a library, not a new language.
So it might be a bad idea.
However, the advanced tools of Eiffel make this a better approach in this language.

My plan
================================================================================

To get the implementation of AOP in the Eiffel, I intend to:

First
-----------

Write a complete design by contract specification of the architecture patterns identified.
This will require also the description of frame rules.
Probably using "model queries" (Polikarpova et al. 2012)

Second
-----------

I'll make several implementations.
Here, I'll experiment.
Where I'd ask a set of 5 developers to each
develop their storage combinator and polymorphic identifier.
Then, I will try to compose all of them.
And survey the developers to see how they feel about the patterns' specification and composability.

Third
-----------

To test that the code based on AOP is more reusable than the current call return style. I will reimplement a project in Eiffel (like the Nino Webserver).
On AOP and measure using Avontis & Mingis 93 "Metrics from Object-Oriented Design."


Future work (avenues to explore)
=============================================================================

It seems pretentious to talk about "future work" when discussing a proposal for a future project.
But, assuming that I can achieve the goals in the plan. I.e., a specification and implementation for AOP in Eiffel.
What other avenues will open for exploration?
At the moment, I can imagine the following:

Shrink other architectural patterns at the level of programs
-----------------------------------------------------------------------------
Weiher has currently only identified six architectural patterns and shrunk them to the level of programs.
So, a natural progression of this work would be to specify and code even more patterns.

For example, how would a queue-based architecture (like Rabbit MQ) look at the program level? Something like Erlang with OTP?

How would an Event Sourcing architecture look at the program level?
Could we reuse the agent and pub/sub mechanism in GUI Eiffel for other object communication, not only GUI?
Reusing it as the main means of communication among objects.


Given a specification, can ChatGPT program an implementation?
-----------------------------------------------------------------------------
If we follow the headlines, there are two ways of thinking about programming and Large Language Models (LLMs like chatgpt).
Either:

> Programming is dead, and ChatGPT killed it.

or

> ChatGPT and their inherent hallucinations make it irrelevant to programming.

However, I think Design by Contract (DBC) opens an avenue for collaboration between the two approaches.
In this collaboration, humans would write a specification in DBC  with the appropriate frame rules.
Then ChatGPT would try to code to the specification.

So it would be fascinating to see if, given a spec for AOP, we could get ChatGPT to implement it.

Others
-----------------------------
While developing this work, other avenues of growth will become more apparent.


Expected Contributions
================================================================================

As a result of this work, I expect to deliver the following work products.

- Write a design by contract specification of the AOP patterns documented by Weiher.
- Program an Eiffel implementation of said patterns.
- Share the specification and its benefits with the academic and development communities so they can use AOP.

References
================================================================================

- Avotins, J., & Mingins, C. (1993). Metrics for Object-Oriented Design. International Conference on Software Technology: Methods and Tools.
- Polikarpova, N., Furia, C.A., Pei, Y., Wei, Y., & Meyer, B. (2012). What good are strong specifications? 2013 35th International Conference on Software Engineering (ICSE), 262-271.
- Weiher, M., & Hirschfeld, R. (2013). Polymorphic identifiers: uniform resource access in objective-smalltalk. Dynamic Languages Symposium.
- Weiher, M., & Hirschfeld, R. (2016). Constraints as polymorphic connectors. Proceedings of the 15th International Conference on Modularity.
- Weiher, M., & Hirschfeld, R. (2019). Standard object out: streaming objects with polymorphic write streams. Proceedings of the 15th ACM SIGPLAN International Symposium on Dynamic Languages.
- Weiher, M., & Hirschfeld, R. (2019). Storage combinators. Proceedings of the 2019 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software.
- Weiher, M. (2020 a). Can programmers escape the gentle tyranny of call/return? Companion Proceedings of the 4th International Conference on Art, Science, and Engineering of Programming.
- Weiher, M. (2020 b). Can programmers escape the gentle tyranny of call/return? https://www.youtube.com/watch?v=Gel8ffr4pqw


<link rel="stylesheet" href="https://unpkg.com/latex.css/style.min.css" />
<style>
body.md{
	max-width:90ch; !important
}
</style>
<!-- Markdeep: --><style class="fallback">body{visibility:hidden}</style>
<script src="https://morgan3d.github.io/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<meta charset="utf-8" emacsmode="-*- markdown -*-"><link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/newsmag.css?">
    <!-- Author meta tag -->
    <meta name="author" content="Your Name">

    <!-- Description meta tag -->
    <meta name="description" content="newsmag description"

    <!-- Keywords meta tag -->
    <meta name="keywords" content="keyword1, keyword2, keyword3, keyword4, keyword5">

    <!-- Other common meta tags you might want to include -->
    <meta name="robots" content="index, follow">
    <meta name="language" content="English">

    <!-- Open Graph meta tags for better social media sharing -->
    <meta property="og:title" content="Your Page Title">
    <meta property="og:description" content="A brief description for social media sharing">
    <meta property="og:image" content="https://example.com/image.jpg">
    <meta property="og:url" content="https://example.com/page-url">

	<script src="https://morgan3d.github.io/include.js/include.min.js"></script>



                          **Jag.is**
	Cooperative Innovation Studio specialized in software development, devops and project management.
	We are on this for the long term with our members, our software and our customers.

We are a software development and Innovation Studio.
Specialized in high quality, long term maintenance of software products.

(insert /nav.html here)

An independent research lab exploring the future of tools for thought.
================================================================

We envision a new computer that amplifies human intelligence. A system
that helps you think more clearly, collaborate more effectively, and is
available anywhere and anytime. Though the specifics of our work
continue to evolve, everything we do is in pursuit of this vision.

Research Tracks
---------------------------------------------------------------

Our research spans a wide variety of domains from theoretical computer
science to practical user experiences. We currently have three primary
research themes.

### Malleable Software

Designing software environments where people can customize tools in the
moment to meet their unique needs.

### Programmable Ink

Discovering a dynamic medium for sketching ideas where adding behaviors
and interaction is as natural as applying ink to paper.

### [Local-First](/local-first)

Exploring software architecture that returns data to users and enables
collaboration in every tool.


Our Writing
==============================================================

This are the innovations that have been ocupaying our minds lately


### [2024-10-05: projects/rewards.codes](./projects/rewards.codes).
[lab notes ongaing](./projects/rewards.codes)


### [2024-10-05: projects/AOP_in_Eiffel](./projects/AOP_in_Eiffel).
[lab notes ongaing](./projects/AOP_in_Eiffel)


--------------------------------------------------

#### Connect with us

Say <hello@jag.is>

Code on [Github](https://github.com/jagcoop)

#### Our news letter

Keep up-to-date with the lab's latest findings, appearances, and
happenings by subscribing to our newsletter. For a sneak peek, [browse
the archive](/newsletter).

Email

<ul>
    <li><a href="/">index</a></li>
		<li>[projects/rewards.codes](/projects/rewards.codes/index.html)</li>
		<li>[projects/AOP_in_Eiffel](/projects/AOP_in_Eiffel/index.html)</li>
</ul>

<script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>

--------------------------------------------------

CC-By-Sa-NC JagIs

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'medium'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
   <meta charset="utf-8" emacsmode="-*- markdown -*-"> <link rel="stylesheet" href="https://casual-effects.com/markdeep/latest/journal.css?">

                        **Rewards Codes**
                        A Simple Loyalty Platform for *Small* Businesses Using **Big** Strategies


[Rewards Codes - RwC](https://rewards.codes)
Rewards Codes is a straightforward loyalty platform designed to help small businesses implement big strategies for customer retention. This project evolved from a previous initiative, "SigueMS," which was an SMS interface for Twitter.

Why do 50% of loyalty strategies fail? Mainly because they are:

1. Hard to use,
2. Hard to understand, and
3. Offer unappealing rewards.

Rewards Codes addresses these challenges by adopting best practices from the retail and service industries. We focus on:

* Simplicity: With just two easy steps, our platform is designed to be intuitive and user-friendly.
* Accessibility: We use globally recognized communication platforms, making it easy for businesses and customers to engage.
* Valuable Rewards: By allowing businesses to exchange reward points within our network, customers always have access to appealing, desirable rewards.

Thanks to the support of our clients, Rewards Codes has become a tool for fostering positive communication between businesses and their customers. It’s fascinating how an initial customer visit can grow into an ongoing dialogue that includes service feedback, repeat purchases, product launches, and even quick answers to frequently asked questions. Ultimately, this leads to stronger, more meaningful relationships.

### What’s Next for Rewards Codes?

We’re continually evolving to meet the needs of small businesses. Our next steps include expanding the network of businesses that can exchange rewards, introducing new customer engagement features like creating and updating appointments and orders automatically, and exploring partnerships with additional communication platforms. Our goal is to make it even easier for businesses to connect with their customers, strengthen loyalty, and drive growth.

2024-09-19: Features Roadmap 
=================================================================


************************************************************************************
*                  ┌──────────────────────────────────┐ ┌─────────────────────────┐*
*                  │                                  │ │                         │*
*                  │        Q4 2024                   │ │       Q1 2025           │*
*                  │                                  │ │                         │*
*                  │                                  │ │                         │*
*                  │                                  │ │                         │*
*                  └──────────────────────────────────┘ └─────────────────────────┘*
*┌────────────────┐                                                                *
*│                │  * Visits loyalty program             * Customization 1.1      *
*│  Platform      │  * Static QR                                                   *
*│                │  * Dynamic QR                                                  *
*└────────────────┘  * Customization 1.0                                           *
*                                                                                  *
*┌────────────────┐                                                                *
*│                │  * Odoo                               * Oxxo Pay               *
*│  Integrations  │  * Whatsapp reminders                                          *
*│                │  * Whatsapp device link                                        *
*└────────────────┘                                                                *
*                                                                                  *
*┌────────────────┐                                                                *
*│                │  * Company Loyalty card                                        *
*│   Apps         │  * Redeem Code                                                 *
*│                │  * Nearby RwC Businesses (Map)                                 *
*└────────────────┘                                                                *
*                                                                                  *
*┌────────────────┐                                                                *
*│                │  * Customized virtual assistant       * Historical context     *
*│   Chatbot      │  * Time for response customization    * User context           *
*│                │                                       * Agenda management      *
*└────────────────┘                                                                *
************************************************************************************

<style class="fallback">body{visibility:hidden}</style><script>markdeepOptions={tocStyle:'long'};</script>
<!-- Markdeep: --><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?" charset="utf-8"></script>
<li>[.](././) 
    <ul>
	  <li>[./projects](././projects/) 
	      <ul>
	  	  <li>[./projects/rewards.codes](././projects/rewards.codes/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./projects/AOP_in_Eiffel](././projects/AOP_in_Eiffel/) 
	  	  </li>
	  	</ul>
	  </li>
	</ul>
    <ul>
	  <li>[./posts](././posts/) 
	      <ul>
	  	  <li>[./posts/how_to_define_a_problem](././posts/how_to_define_a_problem/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Unlocking_the_Power_of_Personal_Cloud](././posts/Unlocking_the_Power_of_Personal_Cloud/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Understanding_complexity_in_software_systems](././posts/Understanding_complexity_in_software_systems/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/The_Rise_and_Fall_of_Abacus_Rationale](././posts/The_Rise_and_Fall_of_Abacus_Rationale/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Requirements_in_the_Age_of_AI](././posts/Requirements_in_the_Age_of_AI/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Psychological_Safety](././posts/Psychological_Safety/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Manage_complexity_behind_simple_interfaces](././posts/Manage_complexity_behind_simple_interfaces/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Declarative_dotfiles_with_Home_Manager](././posts/Declarative_dotfiles_with_Home_Manager/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/Creating_a_QR_for_Google_review_URL](././posts/Creating_a_QR_for_Google_review_URL/) 
	  	  </li>
	  	</ul>
	      <ul>
	  	  <li>[./posts/A_Tool_in_a_World_Full_of_Distractions](././posts/A_Tool_in_a_World_Full_of_Distractions/) 
	  	  </li>
	  	</ul>
	  </li>
	</ul>
    <ul>
	  <li>[./about](././about/) 
	  </li>
	</ul>
</li>
