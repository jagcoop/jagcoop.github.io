#!/usr/bin/env nu
use std assert

let OUTPUT_DIR = '.cms/public_html'
def main [] { }

def "main build" [] {
	#in main generate .info, rss, sitemap (en ese orden)
	rm -rf $OUTPUT_DIR; mkdir $OUTPUT_DIR
	
	#copies everything except files and directories that start with a dot
	rsync --archive --include=".githu*" --include=".nojekyll" --exclude="*mustache*" --exclude=".*"   ./* $OUTPUT_DIR

	.cms/generate .info ;
	#the navigation template must be processed before everything else.
	process_template ./nav.mustache.html 
	.cms/generate all_mustache;

	let all_html_files = $"($OUTPUT_DIR)/all_contents.txt"
	
	# TODO When I try to use this with a variable
	# ls $"($OUTPUT_DIR)/**/*.html" Throws the error pattern not found
	# so i left thepath hardcoded but it should be with the constant
	
	ls -f .cms/public_html/**/*.html
	| get name
	| each {|f| open $f
	| save --append $all_html_files}
	wc --words $all_html_files
}



def "main all_mustache" [] : nothing -> nothing {
	ls -f **/*.mustache.*
	| get name
	| each {|m| process_template $m }
}

def "main .info" []: nothing -> nothing {
	ls -f **/index*.html
	| each {|f|
	  if (extract_description $f.name | is-empty) {
	  	 #if there is no description don't do anything
	  } else {
	  	    $"($f.name| path basename)\n\t($in)"
	 		| save --force ($f.name | path dirname | $"./($in)/.info" )}
	  }
	| if ($in | is-empty) { null}
}

def "main process_template" [a_template:path] -> nothing {
	process_template $a_template
}

def process_template [a_template:path] -> nothing {
	assert str contains $a_template "mustache"
	assert path exists $a_template

	
	let $relative_template = $a_template | path relative-to $env.PWD
	assert path exists $relative_template
	
	let $output_extension = $a_template | path parse | get extension
	
	let $jsonata =  $relative_template | path parse | upsert parent {|f| $".cms/jsonata/($f.parent)"}| path join 
	assert path exists $jsonata
	
	let $html_output_file = $relative_template | path parse | upsert parent {|f| $"($OUTPUT_DIR)/($f.parent)" } | upsert stem {|f| $"($f.stem | path parse | get stem)" } | path join
	$html_output_file | path dirname | mkdir $in
	
	mut what_is_the_relative_path = $'($relative_template|path dirname)' 
	$what_is_the_relative_path = if ($what_is_the_relative_path | is-empty) { '.' } else { $what_is_the_relative_path }

	tree --info --timefmt %Y-%m-%d -H '.' --noreport -J -t -r $what_is_the_relative_path
	| jfq  --query-file $jsonata
	| mustache $relative_template
	| save --force $html_output_file;

	assert path exists $html_output_file
}



def "assert path exists" [a_path:path] {
	assert ($a_path | path exists) --error-label {
        text: $"Mandatory file: '($a_path)' doesn't exist",
        span: (metadata $a_path).span
    }
}


def "main .info ls" [] -> table<name: string, type: string, size: filesize, modified: date> (stream) {
	ls **/*	-a | where name =~  ".info" | to tsv
}


def extract_description [f] -> string {
	open $f.name| pup 'meta[name="description"] attr{content}'
}

