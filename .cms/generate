#!/usr/bin/env nu
use std assert

def main [] { }

def "main build" [] {
	#in main generate .info, rss, sitemap (en ese orden)
	.cms/generate .info ;
	.cms/generate all_mustache;

	rm -rf .cms/puplic_html; mkdir .cms/public_html
	#copies everything except files and directories that start with a dot
	rsync --archive --include=".githu*" --include=".nojekyll" --exclude="*mustache*" --exclude=".*/"   ./* .cms/public_html/

	#if we are in the branch main,
		#create a new branch html
		#copy all files there except .cms
		#commit y push en el branch
	#else create the branch html-staging
}

def "main all_mustache" [] : nothing -> nothing {
	ls **/*
	| where name =~ ".mustache.*"
	| get name
	| each {|mustache_file| process_template  $mustache_file }
	| null
}

def "main .info" []: nothing -> nothing {
	ls **/*
	| where name =~  "index.html"
	| where {|f| (extract_description $f) != "" }
	| each {|f| (extract_description $f)
	  	    |  $"index.html\n\t($in)"
	 		| save --force ($f.name | path dirname | $"./($in)/.info" )}
	| if ($in | is-empty) { null}
}


export def "main process_template" [a_template:path] -> nothing {
	assert str contains $a_template ".mustache."
	assert path exists $a_template
	let $relative_template = ($a_template | path relative-to $env.PWD)
	
	let $output_extension = $a_template | path parse | get extension
	
	let $jsonata =  $relative_template | path parse | upsert parent {|f| $".cms/jsonata/($f.parent)"}| path join 
	assert path exists $jsonata
	
	let $html_output_file = $relative_template | path parse | upsert parent {|f| $".cms/public_html/($f.parent)"} | upsert stem {|f| $"($f.stem | path parse | get stem)"} | path join
	($html_output_file | path dirname | mkdir $in)
	
	tree --info --timefmt %Y-%m-%d -H '.' --noreport -J -t -r .
	| jfq  --query-file $jsonata
	| mustache $a_template
	| save --force $html_output_file
}



def "assert path exists" [a_path:path] {
	assert ($a_path | path exists) --error-label {
        text: $"Mandatory file: '($a_path)' doesn't exist",
        span: (metadata $a_path).span
    }
}


def "main .info ls" [] -> table<name: string, type: string, size: filesize, modified: date> (stream) {
	ls **/*	-a | where name =~  ".info" | to tsv
}


def extract_description [f] -> string {
	open $f.name| pup 'meta[name="description"] attr{content}'
}

